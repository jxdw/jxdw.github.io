<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>渐学顿悟</title>
  
  
  <link href="https://jxdw.github.io/atom.xml" rel="self"/>
  
  <link href="https://jxdw.github.io/"/>
  <updated>2020-10-22T14:29:22.400Z</updated>
  <id>https://jxdw.github.io/</id>
  
  <author>
    <name>渐学顿悟</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【中间件client系列】go语言服务使用nacos server作为配置中心</title>
    <link href="https://jxdw.github.io/2020/09/25/nacos-go-client-config-example/"/>
    <id>https://jxdw.github.io/2020/09/25/nacos-go-client-config-example/</id>
    <published>2020-09-25T11:17:59.000Z</published>
    <updated>2020-10-22T14:29:22.400Z</updated>
    
    <content type="html"><![CDATA[<p>话不多说，直接上源码。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;github.com&#x2F;nacos-group&#x2F;nacos-sdk-go&#x2F;clients&quot;</span><br><span class="line">&quot;github.com&#x2F;nacos-group&#x2F;nacos-sdk-go&#x2F;clients&#x2F;config_client&quot;</span><br><span class="line">&quot;github.com&#x2F;nacos-group&#x2F;nacos-sdk-go&#x2F;common&#x2F;constant&quot;</span><br><span class="line">&quot;github.com&#x2F;nacos-group&#x2F;nacos-sdk-go&#x2F;vo&quot;</span><br><span class="line">&quot;net&#x2F;http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建一个真正的注册中心</span><br><span class="line">func init()  &#123;</span><br><span class="line">serverconfig:&#x3D;[]constant.ServerConfig&#123;</span><br><span class="line">&#123;</span><br><span class="line">IpAddr: &quot;192.168.172.9&quot;,</span><br><span class="line">Port:   8848,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">clientconfig:&#x3D;constant.ClientConfig&#123;</span><br><span class="line">TimeoutMs:           5000,</span><br><span class="line">NotLoadCacheAtStart: true,</span><br><span class="line">LogDir:              &quot;\\data\\server\\nacos\\log&quot;,</span><br><span class="line">NamespaceId: &quot;0cf7435e-262c-4827-86d2-474408a0dced&quot;,</span><br><span class="line">CacheDir: &quot;\\data\\server\\demoservice&quot;,</span><br><span class="line">&#x2F;&#x2F;Username: &quot;nacos&quot;,</span><br><span class="line">&#x2F;&#x2F;Password: &quot;nacos&quot;,</span><br><span class="line">LogLevel:            &quot;warn&quot;,</span><br><span class="line">&#125;</span><br><span class="line">configclient, err :&#x3D; clients.CreateConfigClient(map[string]interface&#123;&#125;&#123;</span><br><span class="line">&quot;serverConfigs&quot;: serverconfig,</span><br><span class="line">&quot;clientConfig&quot;:  clientconfig,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">configFile,err:&#x3D;configclient.GetConfig(vo.ConfigParam&#123;</span><br><span class="line">DataId: &quot;test-data&quot;,</span><br><span class="line">Group:  &quot;test-group&quot;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;config file  content is :&quot;+configFile)</span><br><span class="line"></span><br><span class="line">go listenConfig(configclient)</span><br><span class="line"></span><br><span class="line">namingClient, err :&#x3D; clients.CreateNamingClient(map[string]interface&#123;&#125;&#123;</span><br><span class="line">&quot;serverConfigs&quot;:serverconfig ,</span><br><span class="line">&quot;clientConfig&quot;: clientconfig,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">var param &#x3D; vo.RegisterInstanceParam&#123;</span><br><span class="line">Ip:          &quot;10.3.20.215&quot;,</span><br><span class="line">Port:        18848,</span><br><span class="line">ServiceName: &quot;go_demo_service&quot;,</span><br><span class="line">Weight:      10,</span><br><span class="line">ClusterName: &quot;zwt&quot;,</span><br><span class="line">Enable:      true,</span><br><span class="line">Healthy:     true,</span><br><span class="line">Ephemeral:   true,</span><br><span class="line">Metadata:    map[string]string&#123;&quot;preserved.heart.beat.interval&quot;: &quot;100000000000&quot;,&#125;,</span><br><span class="line">&#125;</span><br><span class="line">success,err:&#x3D;namingClient.RegisterInstance(param)</span><br><span class="line"></span><br><span class="line">if !success &#123;</span><br><span class="line">fmt.Printf(&quot;RegisterServiceInstance,param:%+v,result:%+v \n\n&quot;, param, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service,_:&#x3D;namingClient.GetService(vo.GetServiceParam&#123;</span><br><span class="line">Clusters: []string&#123;</span><br><span class="line">&quot;zwt&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">ServiceName: &quot;go_demo_service&quot;,</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(&quot;service is &quot;,service)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func listenConfig(client config_client.IConfigClient) &#123;</span><br><span class="line">for  &#123;</span><br><span class="line">err :&#x3D; client.ListenConfig(vo.ConfigParam&#123;</span><br><span class="line">DataId: &quot;test-data&quot;,</span><br><span class="line">Group:  &quot;test-group&quot;,</span><br><span class="line">OnChange: func(namespace, group, dataId, data string) &#123;</span><br><span class="line">fmt.Println(&quot;config changed group:&quot; + group + &quot;, dataId:&quot; + dataId + &quot;, content:&quot; + data)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">if err!&#x3D;nil &#123;</span><br><span class="line">fmt.Println(&quot;error is &quot;,err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">http.HandleFunc(&quot;&#x2F;&quot;,HelloworldHander)</span><br><span class="line">http.ListenAndServe(&quot;10.3.20.215:18848&quot; ,nil)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func HelloworldHander(writer http.ResponseWriter, request *http.Request) &#123;</span><br><span class="line">message:&#x3D;&quot;hello world&quot;</span><br><span class="line">writer.Write([]byte(message))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;话不多说，直接上源码。&lt;/p&gt;</summary>
    
    
    
    <category term="go知识体系" scheme="https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
    
    <category term="编程语言" scheme="https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【转载】vue学习之day8</title>
    <link href="https://jxdw.github.io/2020/07/14/es6_vue_study_day8/"/>
    <id>https://jxdw.github.io/2020/07/14/es6_vue_study_day8/</id>
    <published>2020-07-14T13:41:16.000Z</published>
    <updated>2020-10-22T14:31:18.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="day8学习笔记"><a href="#day8学习笔记" class="headerlink" title="day8学习笔记"></a>day8学习笔记</h1><h2 id="使用mui的tab-top-webview-main完成分类滑动栏"><a href="#使用mui的tab-top-webview-main完成分类滑动栏" class="headerlink" title="使用mui的tab-top-webview-main完成分类滑动栏"></a>使用mui的<code>tab-top-webview-main</code>完成分类滑动栏</h2><a id="more"></a><h3 id="兼容问题"><a href="#兼容问题" class="headerlink" title="兼容问题"></a>兼容问题</h3><ol><li>和 App.vue 中的 <code>router-link</code> 身上的类名 <code>mui-tab-item</code> 存在兼容性问题，导致tab栏失效，可以把<code>mui-tab-item</code>改名为<code>mui-tab-item1</code>，并复制相关的类样式，来解决这个问题；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.mui-bar-tab .mui-tab-item1.mui-active &#123;</span><br><span class="line">  color: #007aff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mui-bar-tab .mui-tab-item1 &#123;</span><br><span class="line">  display: table-cell;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  width: 1%;</span><br><span class="line">  height: 50px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">  color: #929292;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mui-bar-tab .mui-tab-item1 .mui-icon &#123;</span><br><span class="line">  top: 3px;</span><br><span class="line">  width: 24px;</span><br><span class="line">  height: 24px;</span><br><span class="line">  padding-top: 0;</span><br><span class="line">  padding-bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mui-bar-tab .mui-tab-item1 .mui-icon~.mui-tab-label &#123;</span><br><span class="line">  font-size: 11px;</span><br><span class="line">  display: block;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>tab-top-webview-main</code>组件第一次显示到页面中的时候，无法被滑动的解决方案：<ul><li>先导入 mui 的JS文件:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import mui from &#39;..&#x2F;..&#x2F;..&#x2F;lib&#x2F;mui&#x2F;js&#x2F;mui.min.js&#39;</span><br></pre></td></tr></table></figure></li><li>在 组件的 <code>mounted</code> 事件钩子中，注册 mui 的滚动事件：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  &#x2F;&#x2F; 需要在组件的 mounted 事件钩子中，注册 mui 的 scroll 滚动事件</span><br><span class="line">      mui(&#39;.mui-scroll-wrapper&#39;).scroll(&#123;</span><br><span class="line">        deceleration: 0.0005 &#x2F;&#x2F;flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>滑动的时候报警告：<code>Unable to preventDefault inside passive event listener due to target being treated as passive. See https://www.chromestatus.com/features/5093566007214080</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">解决方法，可以加上* &#123; touch-action: pan-y; &#125; 这句样式去掉。</span><br></pre></td></tr></table></figure>原因：（是chrome为了提高页面的滑动流畅度而新折腾出来的一个东西） <a href="http://www.cnblogs.com/pearl07/p/6589114.html">http://www.cnblogs.com/pearl07/p/6589114.html</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action">https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action</a></li></ol><h2 id="移除严格模式"><a href="#移除严格模式" class="headerlink" title="移除严格模式"></a>移除严格模式</h2><p><a href="https://github.com/genify/babel-plugin-transform-remove-strict-mode">babel-plugin-transform-remove-strict-mode</a></p><h2 id="vue-preview"><a href="#vue-preview" class="headerlink" title="vue-preview"></a><a href="https://github.com/LS1231/vue-preview">vue-preview</a></h2><p>一个Vue集成PhotoSwipe图片预览插件</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;day8学习笔记&quot;&gt;&lt;a href=&quot;#day8学习笔记&quot; class=&quot;headerlink&quot; title=&quot;day8学习笔记&quot;&gt;&lt;/a&gt;day8学习笔记&lt;/h1&gt;&lt;h2 id=&quot;使用mui的tab-top-webview-main完成分类滑动栏&quot;&gt;&lt;a href=&quot;#使用mui的tab-top-webview-main完成分类滑动栏&quot; class=&quot;headerlink&quot; title=&quot;使用mui的tab-top-webview-main完成分类滑动栏&quot;&gt;&lt;/a&gt;使用mui的&lt;code&gt;tab-top-webview-main&lt;/code&gt;完成分类滑动栏&lt;/h2&gt;</summary>
    
    
    
    <category term="es6语言" scheme="https://jxdw.github.io/categories/es6%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="编程语言" scheme="https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【转载】vue学习之day7</title>
    <link href="https://jxdw.github.io/2020/07/13/es6_vue_study_day7/"/>
    <id>https://jxdw.github.io/2020/07/13/es6_vue_study_day7/</id>
    <published>2020-07-13T13:25:16.000Z</published>
    <updated>2020-10-22T14:31:13.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="day7"><a href="#day7" class="headerlink" title="day7"></a>day7</h1><h2 id="使用mui的tab-top-webview-main完成分类滑动栏"><a href="#使用mui的tab-top-webview-main完成分类滑动栏" class="headerlink" title="使用mui的tab-top-webview-main完成分类滑动栏"></a>使用mui的<code>tab-top-webview-main</code>完成分类滑动栏</h2><a id="more"></a><h3 id="兼容问题"><a href="#兼容问题" class="headerlink" title="兼容问题"></a>兼容问题</h3><ol><li>和 App.vue 中的 <code>router-link</code> 身上的类名 <code>mui-tab-item</code> 存在兼容性问题，导致tab栏失效，可以把<code>mui-tab-item</code>改名为<code>mui-tab-item1</code>，并复制相关的类样式，来解决这个问题；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.mui-bar-tab .mui-tab-item1.mui-active &#123;</span><br><span class="line">  color: #007aff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mui-bar-tab .mui-tab-item1 &#123;</span><br><span class="line">  display: table-cell;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  width: 1%;</span><br><span class="line">  height: 50px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">  color: #929292;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mui-bar-tab .mui-tab-item1 .mui-icon &#123;</span><br><span class="line">  top: 3px;</span><br><span class="line">  width: 24px;</span><br><span class="line">  height: 24px;</span><br><span class="line">  padding-top: 0;</span><br><span class="line">  padding-bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mui-bar-tab .mui-tab-item1 .mui-icon~.mui-tab-label &#123;</span><br><span class="line">  font-size: 11px;</span><br><span class="line">  display: block;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>tab-top-webview-main</code>组件第一次显示到页面中的时候，无法被滑动的解决方案：<ul><li>先导入 mui 的JS文件:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import mui from &#39;..&#x2F;..&#x2F;..&#x2F;lib&#x2F;mui&#x2F;js&#x2F;mui.min.js&#39;</span><br></pre></td></tr></table></figure></li><li>在 组件的 <code>mounted</code> 事件钩子中，注册 mui 的滚动事件：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  &#x2F;&#x2F; 需要在组件的 mounted 事件钩子中，注册 mui 的 scroll 滚动事件</span><br><span class="line">      mui(&#39;.mui-scroll-wrapper&#39;).scroll(&#123;</span><br><span class="line">        deceleration: 0.0005 &#x2F;&#x2F;flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>滑动的时候报警告：<code>Unable to preventDefault inside passive event listener due to target being treated as passive. See https://www.chromestatus.com/features/5093566007214080</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">解决方法，可以加上* &#123; touch-action: none; &#125; 这句样式去掉。</span><br></pre></td></tr></table></figure>原因：（是chrome为了提高页面的滑动流畅度而新折腾出来的一个东西） <a href="http://www.cnblogs.com/pearl07/p/6589114.html">http://www.cnblogs.com/pearl07/p/6589114.html</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action">https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action</a></li></ol><h2 id="移除严格模式"><a href="#移除严格模式" class="headerlink" title="移除严格模式"></a>移除严格模式</h2><p><a href="https://github.com/genify/babel-plugin-transform-remove-strict-mode">babel-plugin-transform-remove-strict-mode</a></p><h2 id="vue-preview"><a href="#vue-preview" class="headerlink" title="vue-preview"></a><a href="https://github.com/LS1231/vue-preview">vue-preview</a></h2><p>一个Vue集成PhotoSwipe图片预览插件</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;day7&quot;&gt;&lt;a href=&quot;#day7&quot; class=&quot;headerlink&quot; title=&quot;day7&quot;&gt;&lt;/a&gt;day7&lt;/h1&gt;&lt;h2 id=&quot;使用mui的tab-top-webview-main完成分类滑动栏&quot;&gt;&lt;a href=&quot;#使用mui的tab-top-webview-main完成分类滑动栏&quot; class=&quot;headerlink&quot; title=&quot;使用mui的tab-top-webview-main完成分类滑动栏&quot;&gt;&lt;/a&gt;使用mui的&lt;code&gt;tab-top-webview-main&lt;/code&gt;完成分类滑动栏&lt;/h2&gt;</summary>
    
    
    
    <category term="es6语言" scheme="https://jxdw.github.io/categories/es6%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="编程语言" scheme="https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【转载】vue学习之day6</title>
    <link href="https://jxdw.github.io/2020/07/12/es6_vue_study_day6/"/>
    <id>https://jxdw.github.io/2020/07/12/es6_vue_study_day6/</id>
    <published>2020-07-12T13:21:16.000Z</published>
    <updated>2020-10-22T14:31:08.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-day6"><a href="#Vue-js-day6" class="headerlink" title="Vue.js - day6"></a>Vue.js - day6</h1><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>有时候使用<code>npm i node-sass -D</code>装不上，这时候，就必须使用 <code>cnpm i node-sass -D</code></p><h2 id="在普通页面中使用render函数渲染组件"><a href="#在普通页面中使用render函数渲染组件" class="headerlink" title="在普通页面中使用render函数渲染组件"></a>在普通页面中使用render函数渲染组件</h2><a id="more"></a><h2 id="在webpack中配置-vue组件页面的解析"><a href="#在webpack中配置-vue组件页面的解析" class="headerlink" title="在webpack中配置.vue组件页面的解析"></a>在webpack中配置.vue组件页面的解析</h2><ol><li><p>运行<code>cnpm i vue -S</code>将vue安装为运行依赖；</p></li><li><p>运行<code>cnpm i vue-loader vue-template-compiler -D</code>将解析转换vue的包安装为开发依赖；</p></li><li><p>运行<code>cnpm i style-loader css-loader -D</code>将解析转换CSS的包安装为开发依赖，因为.vue文件中会写CSS样式；</p></li><li><p>在<code>webpack.config.js</code>中，添加如下<code>module</code>规则：</p></li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">module: &#123;</span><br><span class="line"></span><br><span class="line">    rules: [</span><br><span class="line"></span><br><span class="line">      &#123; test: &#x2F;\.css$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;] &#125;,</span><br><span class="line"></span><br><span class="line">      &#123; test: &#x2F;\.vue$&#x2F;, use: &#39;vue-loader&#39; &#125;</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>创建<code>App.js</code>组件页面：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 注意：在 .vue 的组件中，template 中必须有且只有唯一的根元素进行包裹，一般都用 div 当作唯一的根元素 --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;这是APP组件 - &#123;&#123;msg&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;我是h3&lt;&#x2F;h3&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 注意：在 .vue 的组件中，通过 script 标签来定义组件的行为，需要使用 ES6 中提供的 export default 方式，导出一个vue实例对象</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  data() &#123;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">      msg: &#39;OK&#39;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">h1 &#123;</span><br><span class="line"></span><br><span class="line">  color: red;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li>创建<code>main.js</code>入口文件：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导入 Vue 组件</span><br><span class="line"></span><br><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导入 App组件</span><br><span class="line"></span><br><span class="line">import App from &#39;.&#x2F;components&#x2F;App.vue&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建一个 Vue 实例，使用 render 函数，渲染指定的组件</span><br><span class="line"></span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line"></span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line"></span><br><span class="line">  render: c &#x3D;&gt; c(App)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="在使用webpack构建的Vue项目中使用模板对象？"><a href="#在使用webpack构建的Vue项目中使用模板对象？" class="headerlink" title="在使用webpack构建的Vue项目中使用模板对象？"></a>在使用webpack构建的Vue项目中使用模板对象？</h2><ol><li>在<code>webpack.config.js</code>中添加<code>resolve</code>属性：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &#39;vue$&#39;: &#39;vue&#x2F;dist&#x2F;vue.esm.js&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="ES6中语法使用总结"><a href="#ES6中语法使用总结" class="headerlink" title="ES6中语法使用总结"></a>ES6中语法使用总结</h2><ol><li><p>使用 <code>export default</code> 和 <code>export</code> 导出模块中的成员; 对应ES5中的 <code>module.exports</code> 和 <code>export</code></p></li><li><p>使用 <code>import ** from **</code> 和 <code>import &#39;路径&#39;</code> 还有 <code>import &#123;a, b&#125; from &#39;模块标识&#39;</code> 导入其他模块</p></li><li><p>使用箭头函数：<code>(a, b)=&gt; &#123; return a-b; &#125;</code></p></li></ol><h2 id="在vue组件页面中，集成vue-router路由模块"><a href="#在vue组件页面中，集成vue-router路由模块" class="headerlink" title="在vue组件页面中，集成vue-router路由模块"></a>在vue组件页面中，集成vue-router路由模块</h2><p><a href="https://router.vuejs.org/">vue-router官网</a></p><ol><li>导入路由模块：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import VueRouter from &#39;vue-router&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>安装路由模块：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>导入需要展示的组件:</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import login from &#39;.&#x2F;components&#x2F;account&#x2F;login.vue&#39;</span><br><span class="line"></span><br><span class="line">import register from &#39;.&#x2F;components&#x2F;account&#x2F;register.vue&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>创建路由对象:</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">var router &#x3D; new VueRouter(&#123;</span><br><span class="line"></span><br><span class="line">  routes: [</span><br><span class="line"></span><br><span class="line">    &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;login&#39; &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; path: &#39;&#x2F;login&#39;, component: login &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>将路由对象，挂载到 Vue 实例上:</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line"></span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; render: c &#x3D;&gt; &#123; return c(App) &#125;</span><br><span class="line"></span><br><span class="line">  render(c) &#123;</span><br><span class="line"></span><br><span class="line">    return c(App);</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  router &#x2F;&#x2F; 将路由对象，挂载到 Vue 实例上</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li>改造App.vue组件，在 template 中，添加<code>router-link</code>和<code>router-view</code>：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="组件中的css作用域问题"><a href="#组件中的css作用域问题" class="headerlink" title="组件中的css作用域问题"></a>组件中的css作用域问题</h2><h2 id="抽离路由为单独的模块"><a href="#抽离路由为单独的模块" class="headerlink" title="抽离路由为单独的模块"></a>抽离路由为单独的模块</h2><h2 id="使用-饿了么的-MintUI-组件"><a href="#使用-饿了么的-MintUI-组件" class="headerlink" title="使用 饿了么的 MintUI 组件"></a>使用 饿了么的 MintUI 组件</h2><p><a href="https://github.com/ElemeFE/mint-ui">Github 仓储地址</a></p><p><a href="http://mint-ui.github.io/#!/zh-cn">Mint-UI官方文档</a></p><ol><li>导入所有MintUI组件：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import MintUI from &#39;mint-ui&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>导入样式表：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import &#39;mint-ui&#x2F;lib&#x2F;style.css&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>在 vue 中使用 MintUI中的Button按钮和Toast弹框提示：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Vue.use(MintUI)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>使用的例子：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;mt-button type&#x3D;&quot;primary&quot; size&#x3D;&quot;large&quot;&gt;primary&lt;&#x2F;mt-button&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Mint-UI中按需导入的配置方式"><a href="#Mint-UI中按需导入的配置方式" class="headerlink" title="Mint-UI中按需导入的配置方式"></a>Mint-UI中按需导入的配置方式</h2><h2 id="使用-MUI-代码片段"><a href="#使用-MUI-代码片段" class="headerlink" title="使用 MUI 代码片段"></a>使用 MUI 代码片段</h2><blockquote><p>注意： MUI 不同于 Mint-UI，MUI只是开发出来的一套好用的代码片段，里面提供了配套的样式、配套的HTML代码段，类似于 Bootstrap； 而 Mint-UI，是真正的组件库，是使用 Vue 技术封装出来的 成套的组件，可以无缝的和 VUE项目进行集成开发；<br>因此，从体验上来说， Mint-UI体验更好，因为这是别人帮我们开发好的现成的Vue组件；<br>从体验上来说， MUI和Bootstrap类似；<br>理论上，任何项目都可以使用 MUI 或 Bootstrap，但是，MInt-UI只适用于Vue项目；</p></blockquote><p>注意： MUI 并不能使用  npm 去下载，需要自己手动从 github 上，下载现成的包，自己解压出来，然后手动拷贝到项目中使用；</p><p><a href="http://dev.dcloud.net.cn/mui/">官网首页</a></p><p><a href="http://dev.dcloud.net.cn/mui/ui/">文档地址</a></p><ol><li>导入 MUI 的样式表：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import &#39;..&#x2F;lib&#x2F;mui&#x2F;css&#x2F;mui.min.css&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>webpack.config.js</code>中添加新的loader规则：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123; test: &#x2F;\.(png|jpg|gif|ttf)$&#x2F;, use: &#39;url-loader&#39; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>根据官方提供的文档和example，尝试使用相关的组件</li></ol><h2 id="将项目源码托管到oschina中"><a href="#将项目源码托管到oschina中" class="headerlink" title="将项目源码托管到oschina中"></a>将项目源码托管到oschina中</h2><ol><li><p>点击头像 -&gt; 修改资料 -&gt; SSH公钥 <a href="http://git.mydoc.io/?t=154712">如何生成SSH公钥</a></p></li><li><p>创建自己的空仓储，使用 <code>git config --global user.name &quot;用户名&quot;</code> 和 <code>git config --global user.email ***@**.com</code> 来全局配置提交时用户的名称和邮箱</p></li><li><p>使用 <code>git init</code> 在本地初始化项目</p></li><li><p>使用 <code>touch README.md</code> 和 <code>touch .gitignore</code> 来创建项目的说明文件和忽略文件；</p></li><li><p>使用 <code>git add .</code> 将所有文件托管到 git 中</p></li><li><p>使用 <code>git commit -m &quot;init project&quot;</code> 将项目进行本地提交</p></li><li><p>使用 <code>git remote add origin 仓储地址</code>将本地项目和远程仓储连接，并使用origin最为远程仓储的别名</p></li><li><p>使用 <code>git push -u origin master</code> 将本地代码push到仓储中</p></li></ol><h2 id="App-vue-组件的基本设置"><a href="#App-vue-组件的基本设置" class="headerlink" title="App.vue 组件的基本设置"></a>App.vue 组件的基本设置</h2><ol><li><p>头部的固定导航栏使用 <code>Mint-UI</code> 的 <code>Header</code> 组件；</p></li><li><p>底部的页签使用 <code>mui</code> 的 <code>tabbar</code>;</p></li><li><p>购物车的图标，使用 <code>icons-extra</code> 中的 <code>mui-icon-extra mui-icon-extra-cart</code>，同时，应该把其依赖的字体图标文件 <code>mui-icons-extra.ttf</code>，复制到 <code>fonts</code> 目录下！</p></li><li><p>将底部的页签，改造成 <code>router-link</code> 来实现单页面的切换；</p></li><li><p>Tab Bar 路由激活时候设置高亮的两种方式：</p><ul><li>全局设置样式如下：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">.router-link-active&#123;</span><br><span class="line"></span><br><span class="line">    color:#007aff !important;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>或者在 <code>new VueRouter</code> 的时候，通过 <code>linkActiveClass</code> 来指定高亮的类：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建路由对象</span><br><span class="line"></span><br><span class="line">  var router &#x3D; new VueRouter(&#123;</span><br><span class="line"></span><br><span class="line">    routes: [</span><br><span class="line"></span><br><span class="line">      &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;home&#39; &#125;</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    linkActiveClass: &#39;mui-active&#39;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="实现-tabbar-页签不同组件页面的切换"><a href="#实现-tabbar-页签不同组件页面的切换" class="headerlink" title="实现 tabbar 页签不同组件页面的切换"></a>实现 tabbar 页签不同组件页面的切换</h2><ol><li><p>将 tabbar 改造成 <code>router-link</code> 形式，并指定每个连接的 <code>to</code> 属性；</p></li><li><p>在入口文件中导入需要展示的组件，并创建路由对象：</p></li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导入需要展示的组件</span><br><span class="line"></span><br><span class="line">import Home from &#39;.&#x2F;components&#x2F;home&#x2F;home.vue&#39;</span><br><span class="line"></span><br><span class="line">import Member from &#39;.&#x2F;components&#x2F;member&#x2F;member.vue&#39;</span><br><span class="line"></span><br><span class="line">import Shopcar from &#39;.&#x2F;components&#x2F;shopcar&#x2F;shopcar.vue&#39;</span><br><span class="line"></span><br><span class="line">import Search from &#39;.&#x2F;components&#x2F;search&#x2F;search.vue&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建路由对象</span><br><span class="line"></span><br><span class="line">var router &#x3D; new VueRouter(&#123;</span><br><span class="line"></span><br><span class="line">  routes: [</span><br><span class="line"></span><br><span class="line">    &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;home&#39; &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; path: &#39;&#x2F;home&#39;, component: Home &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; path: &#39;&#x2F;member&#39;, component: Member &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; path: &#39;&#x2F;shopcar&#39;, component: Shopcar &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; path: &#39;&#x2F;search&#39;, component: Search &#125;</span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  linkActiveClass: &#39;mui-active&#39;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用-mt-swipe-轮播图组件"><a href="#使用-mt-swipe-轮播图组件" class="headerlink" title="使用 mt-swipe 轮播图组件"></a>使用 mt-swipe 轮播图组件</h2><ol><li>假数据：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">lunbo: [</span><br><span class="line"></span><br><span class="line">        &#39;http:&#x2F;&#x2F;www.itcast.cn&#x2F;images&#x2F;slidead&#x2F;BEIJING&#x2F;2017440109442800.jpg&#39;,</span><br><span class="line"></span><br><span class="line">        &#39;http:&#x2F;&#x2F;www.itcast.cn&#x2F;images&#x2F;slidead&#x2F;BEIJING&#x2F;2017511009514700.jpg&#39;,</span><br><span class="line"></span><br><span class="line">        &#39;http:&#x2F;&#x2F;www.itcast.cn&#x2F;images&#x2F;slidead&#x2F;BEIJING&#x2F;2017421414422600.jpg&#39;</span><br><span class="line"></span><br><span class="line">      ]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>引入轮播图组件：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- Mint-UI 轮播图组件 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;home-swipe&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;mt-swipe :auto&#x3D;&quot;4000&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;mt-swipe-item v-for&#x3D;&quot;(item, i) in lunbo&quot; :key&#x3D;&quot;i&quot;&gt;</span><br><span class="line"></span><br><span class="line">          &lt;img :src&#x3D;&quot;item&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;mt-swipe-item&gt;</span><br><span class="line"></span><br><span class="line">      &lt;&#x2F;mt-swipe&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="在-vue组件中使用vue-resource获取数据"><a href="#在-vue组件中使用vue-resource获取数据" class="headerlink" title="在.vue组件中使用vue-resource获取数据"></a>在<code>.vue</code>组件中使用<code>vue-resource</code>获取数据</h2><ol><li><p>运行<code>cnpm i vue-resource -S</code>安装模块</p></li><li><p>导入 vue-resource 组件</p></li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import VueResource from &#39;vue-resource&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>在vue中使用 vue-resource 组件</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Vue.use(VueResource);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Vue-js-day6&quot;&gt;&lt;a href=&quot;#Vue-js-day6&quot; class=&quot;headerlink&quot; title=&quot;Vue.js - day6&quot;&gt;&lt;/a&gt;Vue.js - day6&lt;/h1&gt;&lt;h2 id=&quot;注意：&quot;&gt;&lt;a href=&quot;#注意：&quot; class=&quot;headerlink&quot; title=&quot;注意：&quot;&gt;&lt;/a&gt;注意：&lt;/h2&gt;&lt;p&gt;有时候使用&lt;code&gt;npm i node-sass -D&lt;/code&gt;装不上，这时候，就必须使用 &lt;code&gt;cnpm i node-sass -D&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;在普通页面中使用render函数渲染组件&quot;&gt;&lt;a href=&quot;#在普通页面中使用render函数渲染组件&quot; class=&quot;headerlink&quot; title=&quot;在普通页面中使用render函数渲染组件&quot;&gt;&lt;/a&gt;在普通页面中使用render函数渲染组件&lt;/h2&gt;</summary>
    
    
    
    <category term="es6语言" scheme="https://jxdw.github.io/categories/es6%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="编程语言" scheme="https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【转载】vue学习之day5</title>
    <link href="https://jxdw.github.io/2020/07/11/es6_vue_study_day5/"/>
    <id>https://jxdw.github.io/2020/07/11/es6_vue_study_day5/</id>
    <published>2020-07-11T13:20:16.000Z</published>
    <updated>2020-10-22T14:31:03.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-Day5-Webpack"><a href="#Vue-js-Day5-Webpack" class="headerlink" title="Vue.js - Day5 - Webpack"></a>Vue.js - Day5 - Webpack</h1><h2 id="在网页中会引用哪些常见的静态资源？"><a href="#在网页中会引用哪些常见的静态资源？" class="headerlink" title="在网页中会引用哪些常见的静态资源？"></a>在网页中会引用哪些常见的静态资源？</h2><ul><li>JS<ul><li>.js  .jsx  .coffee  .ts（TypeScript  类 C# 语言）</li></ul></li><li>CSS<ul><li>.css  .less   .sass  .scss</li></ul></li><li>Images<ul><li>.jpg   .png   .gif   .bmp   .svg</li></ul></li><li>字体文件（Fonts）<ul><li>.svg   .ttf   .eot   .woff   .woff2</li></ul></li><li>模板文件<ul><li>.ejs   .jade  .vue【这是在webpack中定义组件的方式，推荐这么用】</li></ul></li></ul><h2 id="网页中引入的静态资源多了以后有什么问题？？？"><a href="#网页中引入的静态资源多了以后有什么问题？？？" class="headerlink" title="网页中引入的静态资源多了以后有什么问题？？？"></a>网页中引入的静态资源多了以后有什么问题？？？</h2><ol><li>网页加载速度慢， 因为 我们要发起很多的二次请求；</li><li>要处理错综复杂的依赖关系</li></ol><a id="more"></a><h2 id="如何解决上述两个问题"><a href="#如何解决上述两个问题" class="headerlink" title="如何解决上述两个问题"></a>如何解决上述两个问题</h2><ol><li>合并、压缩、精灵图、图片的Base64编码</li><li>可以使用之前学过的requireJS、也可以使用webpack可以解决各个包之间的复杂依赖关系；</li></ol><h2 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack?"></a>什么是webpack?</h2><p>webpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具；</p><h2 id="如何完美实现上述的2种解决方案"><a href="#如何完美实现上述的2种解决方案" class="headerlink" title="如何完美实现上述的2种解决方案"></a>如何完美实现上述的2种解决方案</h2><ol><li>使用Gulp， 是基于 task 任务的；</li><li>使用Webpack， 是基于整个项目进行构建的；</li></ol><ul><li>借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。</li><li>根据官网的图片介绍webpack打包的过程</li><li><a href="http://webpack.github.io/">webpack官网</a></li></ul><h2 id="webpack安装的两种方式"><a href="#webpack安装的两种方式" class="headerlink" title="webpack安装的两种方式"></a>webpack安装的两种方式</h2><ol><li>运行<code>npm i webpack -g</code>全局安装webpack，这样就能在全局使用webpack的命令</li><li>在项目根目录中运行<code>npm i webpack --save-dev</code>安装到项目依赖中</li></ol><h2 id="初步使用webpack打包构建列表隔行变色案例"><a href="#初步使用webpack打包构建列表隔行变色案例" class="headerlink" title="初步使用webpack打包构建列表隔行变色案例"></a>初步使用webpack打包构建列表隔行变色案例</h2><ol><li>运行<code>npm init</code>初始化项目，使用npm管理项目中的依赖包</li><li>创建项目基本的目录结构</li><li>使用<code>cnpm i jquery --save</code>安装jquery类库</li><li>创建<code>main.js</code>并书写各行变色的代码逻辑：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 导入jquery类库</span><br><span class="line">   import $ from &#39;jquery&#39;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; 设置偶数行背景色，索引从0开始，0是偶数</span><br><span class="line">   $(&#39;#list li:even&#39;).css(&#39;backgroundColor&#39;,&#39;lightblue&#39;);</span><br><span class="line">   &#x2F;&#x2F; 设置奇数行背景色</span><br><span class="line">   $(&#39;#list li:odd&#39;).css(&#39;backgroundColor&#39;,&#39;pink&#39;);</span><br></pre></td></tr></table></figure></li><li>直接在页面上引用<code>main.js</code>会报错，因为浏览器不认识<code>import</code>这种高级的JS语法，需要使用webpack进行处理，webpack默认会把这种高级的语法转换为低级的浏览器能识别的语法；</li><li>运行<code>webpack 入口文件路径 输出文件路径</code>对<code>main.js</code>进行处理：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack src&#x2F;js&#x2F;main.js dist&#x2F;bundle.js</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用webpack的配置文件简化打包时候的命令"><a href="#使用webpack的配置文件简化打包时候的命令" class="headerlink" title="使用webpack的配置文件简化打包时候的命令"></a>使用webpack的配置文件简化打包时候的命令</h2><ol><li>在项目根目录中创建<code>webpack.config.js</code></li><li>由于运行webpack命令的时候，webpack需要指定入口文件和输出文件的路径，所以，我们需要在<code>webpack.config.js</code>中配置这两个路径：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 导入处理路径的模块</span><br><span class="line">var path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导出一个配置对象，将来webpack在启动的时候，会默认来查找webpack.config.js，并读取这个文件中导出的配置对象，来进行打包处理</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: path.resolve(__dirname, &#39;src&#x2F;js&#x2F;main.js&#39;), &#x2F;&#x2F; 项目入口文件</span><br><span class="line">    output: &#123; &#x2F;&#x2F; 配置输出选项</span><br><span class="line">        path: path.resolve(__dirname, &#39;dist&#39;), &#x2F;&#x2F; 配置输出的路径</span><br><span class="line">        filename: &#39;bundle.js&#39; &#x2F;&#x2F; 配置输出的文件名</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="实现webpack的实时打包构建"><a href="#实现webpack的实时打包构建" class="headerlink" title="实现webpack的实时打包构建"></a>实现webpack的实时打包构建</h2><ol><li>由于每次重新修改代码之后，都需要手动运行webpack打包的命令，比较麻烦，所以使用<code>webpack-dev-server</code>来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。</li><li>运行<code>cnpm i webpack-dev-server --save-dev</code>安装到开发依赖</li><li>安装完成之后，在命令行直接运行<code>webpack-dev-server</code>来进行打包，发现报错，此时需要借助于<code>package.json</code>文件中的指令，来进行运行<code>webpack-dev-server</code>命令，在<code>scripts</code>节点下新增<code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code>指令，发现可以进行实时打包，但是dist目录下并没有生成<code>bundle.js</code>文件，这是因为<code>webpack-dev-server</code>将打包好的文件放在了内存中<ul><li>把<code>bundle.js</code>放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快</li><li>这个时候访问webpack-dev-server启动的<code>http://localhost:8080/</code>网站，发现是一个文件夹的面板，需要点击到src目录下，才能打开我们的index首页，此时引用不到bundle.js文件，需要修改index.html中script的src属性为:<code>&lt;script src=&quot;../bundle.js&quot;&gt;&lt;/script&gt;</code></li><li>为了能在访问<code>http://localhost:8080/</code>的时候直接访问到index首页，可以使用<code>--contentBase src</code>指令来修改dev指令，指定启动的根目录：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server --contentBase src&quot;</span><br></pre></td></tr></table></figure>同时修改index页面中script的src属性为<code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code></li></ul></li></ol><h2 id="使用html-webpack-plugin插件配置启动页面"><a href="#使用html-webpack-plugin插件配置启动页面" class="headerlink" title="使用html-webpack-plugin插件配置启动页面"></a>使用<code>html-webpack-plugin</code>插件配置启动页面</h2><p>由于使用<code>--contentBase</code>指令的过程比较繁琐，需要指定启动的目录，同时还需要修改index.html中script标签的src属性，所以推荐大家使用<code>html-webpack-plugin</code>插件配置启动页面.</p><ol><li>运行<code>cnpm i html-webpack-plugin --save-dev</code>安装到开发依赖</li><li>修改<code>webpack.config.js</code>配置文件如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 导入处理路径的模块</span><br><span class="line">var path &#x3D; require(&#39;path&#39;);</span><br><span class="line">&#x2F;&#x2F; 导入自动生成HTMl文件的插件</span><br><span class="line">var htmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: path.resolve(__dirname, &#39;src&#x2F;js&#x2F;main.js&#39;), &#x2F;&#x2F; 项目入口文件</span><br><span class="line">    output: &#123; &#x2F;&#x2F; 配置输出选项</span><br><span class="line">        path: path.resolve(__dirname, &#39;dist&#39;), &#x2F;&#x2F; 配置输出的路径</span><br><span class="line">        filename: &#39;bundle.js&#39; &#x2F;&#x2F; 配置输出的文件名</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[ &#x2F;&#x2F; 添加plugins节点配置插件</span><br><span class="line">        new htmlWebpackPlugin(&#123;</span><br><span class="line">            template:path.resolve(__dirname, &#39;src&#x2F;index.html&#39;),&#x2F;&#x2F;模板路径</span><br><span class="line">            filename:&#39;index.html&#39;&#x2F;&#x2F;自动生成的HTML文件的名称</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改<code>package.json</code>中<code>script</code>节点中的dev指令如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server&quot;</span><br></pre></td></tr></table></figure></li><li>将index.html中script标签注释掉，因为<code>html-webpack-plugin</code>插件会自动把bundle.js注入到index.html页面中！</li></ol><h2 id="实现自动打开浏览器、热更新和配置浏览器的默认端口号"><a href="#实现自动打开浏览器、热更新和配置浏览器的默认端口号" class="headerlink" title="实现自动打开浏览器、热更新和配置浏览器的默认端口号"></a>实现自动打开浏览器、热更新和配置浏览器的默认端口号</h2><p><strong>注意：热更新在JS中表现的不明显，可以从一会儿要讲到的CSS身上进行介绍说明！</strong></p><h3 id="方式1："><a href="#方式1：" class="headerlink" title="方式1："></a>方式1：</h3><ul><li>修改<code>package.json</code>的script节点如下，其中<code>--open</code>表示自动打开浏览器，<code>--port 4321</code>表示打开的端口号为4321，<code>--hot</code>表示启用浏览器热更新：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server --hot --port 4321 --open&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="方式2："><a href="#方式2：" class="headerlink" title="方式2："></a>方式2：</h3><ol><li>修改<code>webpack.config.js</code>文件，新增<code>devServer</code>节点如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">        hot:true,</span><br><span class="line">        open:true,</span><br><span class="line">        port:4321</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>在头部引入<code>webpack</code>模块：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var webpack &#x3D; require(&#39;webpack&#39;);</span><br></pre></td></tr></table></figure></li><li>在<code>plugins</code>节点下新增：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new webpack.HotModuleReplacementPlugin()</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用webpack打包css文件"><a href="#使用webpack打包css文件" class="headerlink" title="使用webpack打包css文件"></a>使用webpack打包css文件</h2><ol><li>运行<code>cnpm i style-loader css-loader --save-dev</code></li><li>修改<code>webpack.config.js</code>这个配置文件：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module: &#123; &#x2F;&#x2F; 用来配置第三方loader模块的</span><br><span class="line">        rules: [ &#x2F;&#x2F; 文件的匹配规则</span><br><span class="line">            &#123; test: &#x2F;\.css$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;] &#125;&#x2F;&#x2F;处理css文件的规则</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>注意：<code>use</code>表示使用哪些模块来处理<code>test</code>所匹配到的文件；<code>use</code>中相关loader模块的调用顺序是从后向前调用的；</li></ol><h2 id="使用webpack打包less文件"><a href="#使用webpack打包less文件" class="headerlink" title="使用webpack打包less文件"></a>使用webpack打包less文件</h2><ol><li>运行<code>cnpm i less-loader less -D</code></li><li>修改<code>webpack.config.js</code>这个配置文件：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; test: &#x2F;\.less$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;less-loader&#39;] &#125;,</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用webpack打包sass文件"><a href="#使用webpack打包sass文件" class="headerlink" title="使用webpack打包sass文件"></a>使用webpack打包sass文件</h2><ol><li>运行<code>cnpm i sass-loader node-sass --save-dev</code></li><li>在<code>webpack.config.js</code>中添加处理sass文件的loader模块：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; test: &#x2F;\.scss$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;sass-loader&#39;] &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用webpack处理css中的路径"><a href="#使用webpack处理css中的路径" class="headerlink" title="使用webpack处理css中的路径"></a>使用webpack处理css中的路径</h2><ol><li>运行<code>cnpm i url-loader file-loader --save-dev</code></li><li>在<code>webpack.config.js</code>中添加处理url路径的loader模块：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; test: &#x2F;\.(png|jpg|gif)$&#x2F;, use: &#39;url-loader&#39; &#125;</span><br></pre></td></tr></table></figure></li><li>可以通过<code>limit</code>指定进行base64编码的图片大小；只有小于指定字节（byte）的图片才会进行base64编码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; test: &#x2F;\.(png|jpg|gif)$&#x2F;, use: &#39;url-loader?limit&#x3D;43960&#39; &#125;,</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用babel处理高级JS语法"><a href="#使用babel处理高级JS语法" class="headerlink" title="使用babel处理高级JS语法"></a>使用babel处理高级JS语法</h2><ol><li>运行<code>cnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev</code>安装babel的相关loader包</li><li>运行<code>cnpm i babel-preset-es2015 babel-preset-stage-0 --save-dev</code>安装babel转换的语法</li><li>在<code>webpack.config.js</code>中添加相关loader模块，其中需要注意的是，一定要把<code>node_modules</code>文件夹添加到排除项：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; test: &#x2F;\.js$&#x2F;, use: &#39;babel-loader&#39;, exclude: &#x2F;node_modules&#x2F; &#125;</span><br></pre></td></tr></table></figure></li><li>在项目根目录中添加<code>.babelrc</code>文件，并修改这个配置文件如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;:[&quot;es2015&quot;, &quot;stage-0&quot;],</span><br><span class="line">    &quot;plugins&quot;:[&quot;transform-runtime&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>注意：语法插件<code>babel-preset-es2015</code>可以更新为<code>babel-preset-env</code>，它包含了所有的ES相关的语法；</strong></li></ol><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p><a href="https://segmentfault.com/p/1210000008466178">babel-preset-env：你需要的唯一Babel插件</a><br><a href="https://segmentfault.com/a/1190000009065987">Runtime transform 运行时编译es6</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Vue-js-Day5-Webpack&quot;&gt;&lt;a href=&quot;#Vue-js-Day5-Webpack&quot; class=&quot;headerlink&quot; title=&quot;Vue.js - Day5 - Webpack&quot;&gt;&lt;/a&gt;Vue.js - Day5 - Webpack&lt;/h1&gt;&lt;h2 id=&quot;在网页中会引用哪些常见的静态资源？&quot;&gt;&lt;a href=&quot;#在网页中会引用哪些常见的静态资源？&quot; class=&quot;headerlink&quot; title=&quot;在网页中会引用哪些常见的静态资源？&quot;&gt;&lt;/a&gt;在网页中会引用哪些常见的静态资源？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JS&lt;ul&gt;
&lt;li&gt;.js  .jsx  .coffee  .ts（TypeScript  类 C# 语言）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CSS&lt;ul&gt;
&lt;li&gt;.css  .less   .sass  .scss&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Images&lt;ul&gt;
&lt;li&gt;.jpg   .png   .gif   .bmp   .svg&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字体文件（Fonts）&lt;ul&gt;
&lt;li&gt;.svg   .ttf   .eot   .woff   .woff2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模板文件&lt;ul&gt;
&lt;li&gt;.ejs   .jade  .vue【这是在webpack中定义组件的方式，推荐这么用】&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;网页中引入的静态资源多了以后有什么问题？？？&quot;&gt;&lt;a href=&quot;#网页中引入的静态资源多了以后有什么问题？？？&quot; class=&quot;headerlink&quot; title=&quot;网页中引入的静态资源多了以后有什么问题？？？&quot;&gt;&lt;/a&gt;网页中引入的静态资源多了以后有什么问题？？？&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;网页加载速度慢， 因为 我们要发起很多的二次请求；&lt;/li&gt;
&lt;li&gt;要处理错综复杂的依赖关系&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="es6语言" scheme="https://jxdw.github.io/categories/es6%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="编程语言" scheme="https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【转载】vue学习之day4</title>
    <link href="https://jxdw.github.io/2020/07/10/es6_vue_study_day4/"/>
    <id>https://jxdw.github.io/2020/07/10/es6_vue_study_day4/</id>
    <published>2020-07-10T13:15:16.000Z</published>
    <updated>2020-10-22T14:30:57.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-Day4"><a href="#Vue-js-Day4" class="headerlink" title="Vue.js - Day4"></a>Vue.js - Day4</h1><h2 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h2><ol><li>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        msg: &#39;这是父组件中的消息&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        son: &#123;</span><br><span class="line">          template: &#39;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class="line">          props: [&#39;finfo&#39;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;son :finfo&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h2 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h2><ol><li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li><li>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br></pre></td></tr></table></figure></li><li>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 引用父组件 --&gt;</span><br><span class="line">    &lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 组件模板定义 --&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;x-template&quot; id&#x3D;&quot;son&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;向父组件传值&quot; @click&#x3D;&quot;sendMsg&quot; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 子组件的定义方式</span><br><span class="line">    Vue.component(&#39;son&#39;, &#123;</span><br><span class="line">      template: &#39;#son&#39;, &#x2F;&#x2F; 组件模板Id</span><br><span class="line">      methods: &#123;</span><br><span class="line">        sendMsg() &#123; &#x2F;&#x2F; 按钮的点击事件</span><br><span class="line">          this.$emit(&#39;func&#39;, &#39;OK&#39;); &#x2F;&#x2F; 调用父组件传递过来的方法，同时把数据传递出去</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        getMsg(val)&#123; &#x2F;&#x2F; 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span><br><span class="line">          alert(val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="组件中data和props的区别"><a href="#组件中data和props的区别" class="headerlink" title="组件中data和props的区别"></a>组件中data和props的区别</h2><h2 id="评论列表案例"><a href="#评论列表案例" class="headerlink" title="评论列表案例"></a>评论列表案例</h2><p>目标：主要练习父子组件之间传值</p><h2 id="使用-this-refs-来获取元素和组件"><a href="#使用-this-refs-来获取元素和组件" class="headerlink" title="使用 this.$refs 来获取元素和组件"></a>使用 <code>this.$refs</code> 来获取元素和组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;获取元素内容&quot; @click&#x3D;&quot;getElement&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!-- 使用 ref 获取元素 --&gt;</span><br><span class="line">    &lt;h1 ref&#x3D;&quot;myh1&quot;&gt;这是一个大大的H1&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- 使用 ref 获取子组件 --&gt;</span><br><span class="line">    &lt;my-com ref&#x3D;&quot;mycom&quot;&gt;&lt;&#x2F;my-com&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  Vue.component(&#39;my-com&#39;, &#123;</span><br><span class="line">    template: &#39;&lt;h5&gt;这是一个子组件&lt;&#x2F;h5&gt;&#39;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#39;子组件&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">  var vm &#x3D; new Vue(&#123;</span><br><span class="line">    el: &#39;#app&#39;,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getElement() &#123;</span><br><span class="line">        &#x2F;&#x2F; 通过 this.$refs 来获取元素</span><br><span class="line">        console.log(this.$refs.myh1.innerText);</span><br><span class="line">        &#x2F;&#x2F; 通过 this.$refs 来获取组件</span><br><span class="line">        console.log(this.$refs.mycom.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h2><ol><li><p><strong>后端路由：</strong>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p></li><li><p><strong>前端路由：</strong>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p></li><li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p></li></ol><h2 id="在-vue-中使用-vue-router"><a href="#在-vue-中使用-vue-router" class="headerlink" title="在 vue 中使用 vue-router"></a>在 vue 中使用 vue-router</h2><ol><li>导入 vue-router 组件类库：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 1. 导入 vue-router 组件类库 --&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue-router-2.7.0.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li>使用 router-link 组件来导航<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span><br><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li><li>使用 router-view 组件来显示匹配到的组件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span><br><span class="line">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure></li><li>创建使用<code>Vue.extend</code>创建组件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 4.1 使用 Vue.extend 来创建登录组件</span><br><span class="line">var login &#x3D; Vue.extend(&#123;</span><br><span class="line">  template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 4.2 使用 Vue.extend 来创建注册组件</span><br><span class="line">var register &#x3D; Vue.extend(&#123;</span><br><span class="line">  template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</span><br><span class="line">    var router &#x3D; new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123; path: &#39;&#x2F;login&#39;, component: login &#125;,</span><br><span class="line">        &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li>使用 router 属性来使用路由规则<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 6. 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      router: router &#x2F;&#x2F; 使用 router 属性来使用路由规则</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用tag属性指定router-link渲染的标签类型"><a href="#使用tag属性指定router-link渲染的标签类型" class="headerlink" title="使用tag属性指定router-link渲染的标签类型"></a>使用tag属性指定router-link渲染的标签类型</h2><h2 id="设置路由重定向"><a href="#设置路由重定向" class="headerlink" title="设置路由重定向"></a>设置路由重定向</h2><h2 id="设置路由高亮"><a href="#设置路由高亮" class="headerlink" title="设置路由高亮"></a>设置路由高亮</h2><h2 id="设置路由切换动效"><a href="#设置路由切换动效" class="headerlink" title="设置路由切换动效"></a>设置路由切换动效</h2><h2 id="在路由规则中定义参数"><a href="#在路由规则中定义参数" class="headerlink" title="在路由规则中定义参数"></a>在路由规则中定义参数</h2><ol><li>在规则中定义参数：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; path: &#39;&#x2F;register&#x2F;:id&#39;, component: register &#125;</span><br></pre></td></tr></table></figure></li><li>通过 <code>this.$route.params</code>来获取路由中的参数：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var register &#x3D; Vue.extend(&#123;</span><br><span class="line">      template: &#39;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用-children-属性实现路由嵌套"><a href="#使用-children-属性实现路由嵌套" class="headerlink" title="使用 children 属性实现路由嵌套"></a>使用 <code>children</code> 属性实现路由嵌套</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;router-link to&#x3D;&quot;&#x2F;account&quot;&gt;Account&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  &#x2F;&#x2F; 父路由中的组件</span><br><span class="line">  const account &#x3D; Vue.extend(&#123;</span><br><span class="line">    template: &#96;&lt;div&gt;</span><br><span class="line">      这是account组件</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;login&quot;&gt;login&lt;&#x2F;router-link&gt; | </span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;register&quot;&gt;register&lt;&#x2F;router-link&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;&#96;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 子路由中的 login 组件</span><br><span class="line">  const login &#x3D; Vue.extend(&#123;</span><br><span class="line">    template: &#39;&lt;div&gt;登录组件&lt;&#x2F;div&gt;&#39;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 子路由中的 register 组件</span><br><span class="line">  const register &#x3D; Vue.extend(&#123;</span><br><span class="line">    template: &#39;&lt;div&gt;注册组件&lt;&#x2F;div&gt;&#39;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 路由实例</span><br><span class="line">  var router &#x3D; new VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">      &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;account&#x2F;login&#39; &#125;, &#x2F;&#x2F; 使用 redirect 实现路由重定向</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;&#x2F;account&#39;,</span><br><span class="line">        component: account,</span><br><span class="line">        children: [ &#x2F;&#x2F; 通过 children 数组属性，来实现路由的嵌套</span><br><span class="line">          &#123; path: &#39;login&#39;, component: login &#125;, &#x2F;&#x2F; 注意，子路由的开头位置，不要加 &#x2F; 路径符</span><br><span class="line">          &#123; path: &#39;register&#39;, component: register &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">  var vm &#x3D; new Vue(&#123;</span><br><span class="line">    el: &#39;#app&#39;,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      account</span><br><span class="line">    &#125;,</span><br><span class="line">    router: router</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="命名视图实现经典布局"><a href="#命名视图实现经典布局" class="headerlink" title="命名视图实现经典布局"></a>命名视图实现经典布局</h2><ol><li>标签代码结构：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">      &lt;router-view name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">      &lt;router-view name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li>JS代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var header &#x3D; Vue.component(&#39;header&#39;, &#123;</span><br><span class="line">      template: &#39;&lt;div class&#x3D;&quot;header&quot;&gt;header&lt;&#x2F;div&gt;&#39;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var sidebar &#x3D; Vue.component(&#39;sidebar&#39;, &#123;</span><br><span class="line">      template: &#39;&lt;div class&#x3D;&quot;sidebar&quot;&gt;sidebar&lt;&#x2F;div&gt;&#39;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var mainbox &#x3D; Vue.component(&#39;mainbox&#39;, &#123;</span><br><span class="line">      template: &#39;&lt;div class&#x3D;&quot;mainbox&quot;&gt;mainbox&lt;&#x2F;div&gt;&#39;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建路由对象</span><br><span class="line">    var router &#x3D; new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: &#39;&#x2F;&#39;, components: &#123;</span><br><span class="line">            default: header,</span><br><span class="line">            a: sidebar,</span><br><span class="line">            b: mainbox</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li>CSS 样式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .header &#123;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .content&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">  &#125;</span><br><span class="line">  .sidebar &#123;</span><br><span class="line">    flex: 2;</span><br><span class="line">    border: 1px solid green;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">  .mainbox&#123;</span><br><span class="line">    flex: 8;</span><br><span class="line">    border: 1px solid blue;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="watch属性的使用"><a href="#watch属性的使用" class="headerlink" title="watch属性的使用"></a><code>watch</code>属性的使用</h2><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p><ol><li>监听<code>data</code>中属性的改变：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &#39;jack&#39;,</span><br><span class="line">        lastName: &#39;chen&#39;,</span><br><span class="line">        fullName: &#39;jack - chen&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        &#39;firstName&#39;: function (newVal, oldVal) &#123; &#x2F;&#x2F; 第一个参数是新数据，第二个参数是旧数据</span><br><span class="line">          this.fullName &#x3D; newVal + &#39; - &#39; + this.lastName;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;lastName&#39;: function (newVal, oldVal) &#123;</span><br><span class="line">          this.fullName &#x3D; this.firstName + &#39; - &#39; + newVal;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li>监听路由对象的改变：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var login &#x3D; Vue.extend(&#123;</span><br><span class="line">      template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var register &#x3D; Vue.extend(&#123;</span><br><span class="line">      template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var router &#x3D; new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123; path: &quot;&#x2F;login&quot;, component: login &#125;,</span><br><span class="line">        &#123; path: &quot;&#x2F;register&quot;, component: register &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router: router,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        &#39;$route&#39;: function (newVal, oldVal) &#123;</span><br><span class="line">          if (newVal.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;</span><br><span class="line">            console.log(&#39;这是登录组件&#39;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="computed计算属性的使用"><a href="#computed计算属性的使用" class="headerlink" title="computed计算属性的使用"></a><code>computed</code>计算属性的使用</h2><ol><li>默认只有<code>getter</code>的计算属性：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &#39;jack&#39;,</span><br><span class="line">        lastName: &#39;chen&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      computed: &#123; &#x2F;&#x2F; 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class="line">        fullName() &#123;</span><br><span class="line">          return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li>定义有<code>getter</code>和<code>setter</code>的计算属性：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt;</span><br><span class="line">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;修改fullName&quot; @click&#x3D;&quot;changeName&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &#39;jack&#39;,</span><br><span class="line">        lastName: &#39;chen&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        changeName() &#123;</span><br><span class="line">          this.fullName &#x3D; &#39;TOM - chen2&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line">        fullName: &#123;</span><br><span class="line">          get: function () &#123;</span><br><span class="line">            return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class="line">          &#125;,</span><br><span class="line">          set: function (newVal) &#123;</span><br><span class="line">            var parts &#x3D; newVal.split(&#39; - &#39;);</span><br><span class="line">            this.firstName &#x3D; parts[0];</span><br><span class="line">            this.lastName &#x3D; parts[1];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="watch、computed和methods之间的对比"><a href="#watch、computed和methods之间的对比" class="headerlink" title="watch、computed和methods之间的对比"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h2><ol><li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li><li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li><li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li></ol><h2 id="nrm的安装使用"><a href="#nrm的安装使用" class="headerlink" title="nrm的安装使用"></a><code>nrm</code>的安装使用</h2><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p><ol><li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li><li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li><li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li></ol><blockquote><p>注意： nrm 只是单纯的提供了几个常用的 下载包的 URL地址，并能够让我们在 这几个 地址之间，很方便的进行切换，但是，我们每次装包的时候，使用的 装包工具，都是  npm</p></blockquote><h2 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h2><ol><li><a href="http://www.cnblogs.com/joyho/articles/4430148.html">URL中的hash（井号）</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Vue-js-Day4&quot;&gt;&lt;a href=&quot;#Vue-js-Day4&quot; class=&quot;headerlink&quot; title=&quot;Vue.js - Day4&quot;&gt;&lt;/a&gt;Vue.js - Day4&lt;/h1&gt;&lt;h2 id=&quot;父组件向子组件传值&quot;&gt;&lt;a href=&quot;#父组件向子组件传值&quot; class=&quot;headerlink&quot; title=&quot;父组件向子组件传值&quot;&gt;&lt;/a&gt;父组件向子组件传值&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;组件实例定义方式，注意：一定要使用&lt;code&gt;props&lt;/code&gt;属性来定义父组件传递过来的数据&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#x2F;&amp;#x2F; 创建 Vue 实例，得到 ViewModel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var vm &amp;#x3D; new Vue(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      el: &amp;#39;#app&amp;#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      data: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        msg: &amp;#39;这是父组件中的消息&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      components: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        son: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          template: &amp;#39;&amp;lt;h1&amp;gt;这是子组件 --- &amp;#123;&amp;#123;finfo&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h1&amp;gt;&amp;#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          props: [&amp;#39;finfo&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;#x2F;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;v-bind&lt;/code&gt;或简化指令，将数据传递到子组件中：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div id&amp;#x3D;&amp;quot;app&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;son :finfo&amp;#x3D;&amp;quot;msg&amp;quot;&amp;gt;&amp;lt;&amp;#x2F;son&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;#x2F;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="es6语言" scheme="https://jxdw.github.io/categories/es6%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="编程语言" scheme="https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【转载】vue学习之day3</title>
    <link href="https://jxdw.github.io/2020/07/09/es6_vue_study_day3/"/>
    <id>https://jxdw.github.io/2020/07/09/es6_vue_study_day3/</id>
    <published>2020-07-09T13:13:16.000Z</published>
    <updated>2020-10-22T14:31:38.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-Day3"><a href="#Vue-js-Day3" class="headerlink" title="Vue.js - Day3"></a>Vue.js - Day3</h1><h2 id="定义Vue组件"><a href="#定义Vue组件" class="headerlink" title="定义Vue组件"></a>定义Vue组件</h2><p>什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；<br>组件化和模块化的不同：</p><ul><li>模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；</li><li>组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用<a id="more"></a> <h3 id="全局组件定义的三种方式"><a href="#全局组件定义的三种方式" class="headerlink" title="全局组件定义的三种方式"></a>全局组件定义的三种方式</h3><ol><li>使用 Vue.extend 配合 Vue.component 方法：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var login &#x3D; Vue.extend(&#123;</span><br><span class="line">      template: &#39;&lt;h1&gt;登录&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;);</span><br><span class="line">    Vue.component(&#39;login&#39;, login);</span><br></pre></td></tr></table></figure></li><li>直接使用 Vue.component 方法：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&#39;register&#39;, &#123;</span><br><span class="line">      template: &#39;&lt;h1&gt;注册&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li>将模板字符串，定义到script标签种：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script id&#x3D;&quot;tmpl&quot; type&#x3D;&quot;x-template&quot;&gt;</span><br><span class="line">      &lt;div&gt;&lt;a href&#x3D;&quot;#&quot;&gt;登录&lt;&#x2F;a&gt; | &lt;a href&#x3D;&quot;#&quot;&gt;注册&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>同时，需要使用 Vue.component 来定义组件：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&#39;account&#39;, &#123;</span><br><span class="line">      template: &#39;#tmpl&#39;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ol></li></ul><blockquote><p>注意： 组件中的DOM结构，有且只能有唯一的根元素（Root Element）来进行包裹！</p></blockquote><h3 id="组件中展示数据和响应事件"><a href="#组件中展示数据和响应事件" class="headerlink" title="组件中展示数据和响应事件"></a>组件中展示数据和响应事件</h3><ol><li>在组件中，<code>data</code>需要被定义为一个方法，例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&#39;account&#39;, &#123;</span><br><span class="line">      template: &#39;#tmpl&#39;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          msg: &#39;大家好！&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line">        login()&#123;</span><br><span class="line">          alert(&#39;点击了登录按钮&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li>在子组件中，如果将模板字符串，定义到了script标签中，那么，要访问子组件身上的<code>data</code>属性中的值，需要使用<code>this</code>来访问；</li></ol><h3 id="【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象"><a href="#【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象" class="headerlink" title="【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象"></a>【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象</h3><ol><li>通过计数器案例演示</li></ol><h3 id="使用components属性定义局部子组件"><a href="#使用components属性定义局部子组件" class="headerlink" title="使用components属性定义局部子组件"></a>使用<code>components</code>属性定义局部子组件</h3><ol><li>组件实例定义方式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components: &#123; &#x2F;&#x2F; 定义子组件</span><br><span class="line">        account: &#123; &#x2F;&#x2F; account 组件</span><br><span class="line">          template: &#39;&lt;div&gt;&lt;h1&gt;这是Account组件&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;&lt;login&gt;&lt;&#x2F;login&gt;&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; 在这里使用定义的子组件</span><br><span class="line">          components: &#123; &#x2F;&#x2F; 定义子组件的子组件</span><br><span class="line">            login: &#123; &#x2F;&#x2F; login 组件</span><br><span class="line">              template: &quot;&lt;h3&gt;这是登录组件&lt;&#x2F;h3&gt;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li>引用组件：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;account&gt;&lt;&#x2F;account&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用flag标识符结合v-if和v-else切换组件"><a href="#使用flag标识符结合v-if和v-else切换组件" class="headerlink" title="使用flag标识符结合v-if和v-else切换组件"></a>使用<code>flag</code>标识符结合<code>v-if</code>和<code>v-else</code>切换组件</h2><ol><li>页面结构：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;toggle&quot; @click&#x3D;&quot;flag&#x3D;!flag&quot;&gt;</span><br><span class="line">    &lt;my-com1 v-if&#x3D;&quot;flag&quot;&gt;&lt;&#x2F;my-com1&gt;</span><br><span class="line">    &lt;my-com2 v-else&#x3D;&quot;flag&quot;&gt;&lt;&#x2F;my-com2&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li>Vue实例定义：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&#39;myCom1&#39;, &#123;</span><br><span class="line">      template: &#39;&lt;h3&gt;奔波霸&lt;&#x2F;h3&gt;&#39;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    Vue.component(&#39;myCom2&#39;, &#123;</span><br><span class="line">      template: &#39;&lt;h3&gt;霸波奔&lt;&#x2F;h3&gt;&#39;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        flag: true</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用-is属性来切换不同的子组件-并添加切换动画"><a href="#使用-is属性来切换不同的子组件-并添加切换动画" class="headerlink" title="使用:is属性来切换不同的子组件,并添加切换动画"></a>使用<code>:is</code>属性来切换不同的子组件,并添加切换动画</h2><ol><li>组件实例定义方式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 登录组件</span><br><span class="line">  const login &#x3D; Vue.extend(&#123;</span><br><span class="line">    template: &#96;&lt;div&gt;</span><br><span class="line">      &lt;h3&gt;登录组件&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;&#96;</span><br><span class="line">  &#125;);</span><br><span class="line">  Vue.component(&#39;login&#39;, login);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 注册组件</span><br><span class="line">  const register &#x3D; Vue.extend(&#123;</span><br><span class="line">    template: &#96;&lt;div&gt;</span><br><span class="line">      &lt;h3&gt;注册组件&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;&#96;</span><br><span class="line">  &#125;);</span><br><span class="line">  Vue.component(&#39;register&#39;, register);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">  var vm &#x3D; new Vue(&#123;</span><br><span class="line">    el: &#39;#app&#39;,</span><br><span class="line">    data: &#123; comName: &#39;login&#39; &#125;,</span><br><span class="line">    methods: &#123;&#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li>使用<code>component</code>标签，来引用组件，并通过<code>:is</code>属性来指定要加载的组件：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;login&#39;&quot;&gt;登录&lt;&#x2F;a&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;register&#39;&quot;&gt;注册&lt;&#x2F;a&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;transition mode&#x3D;&quot;out-in&quot;&gt;</span><br><span class="line">    &lt;component :is&#x3D;&quot;comName&quot;&gt;&lt;&#x2F;component&gt;</span><br><span class="line">  &lt;&#x2F;transition&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li>添加切换样式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .v-enter,</span><br><span class="line">  .v-leave-to &#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line">    transform: translateX(30px);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .v-enter-active,</span><br><span class="line">  .v-leave-active &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    transition: all 0.3s ease;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  h3&#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h2><ol><li>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        msg: &#39;这是父组件中的消息&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        son: &#123;</span><br><span class="line">          template: &#39;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class="line">          props: [&#39;finfo&#39;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;son :finfo&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h2><ol><li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li><li>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br></pre></td></tr></table></figure></li><li>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 引用父组件 --&gt;</span><br><span class="line">    &lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 组件模板定义 --&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;x-template&quot; id&#x3D;&quot;son&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;向父组件传值&quot; @click&#x3D;&quot;sendMsg&quot; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 子组件的定义方式</span><br><span class="line">    Vue.component(&#39;son&#39;, &#123;</span><br><span class="line">      template: &#39;#son&#39;, &#x2F;&#x2F; 组件模板Id</span><br><span class="line">      methods: &#123;</span><br><span class="line">        sendMsg() &#123; &#x2F;&#x2F; 按钮的点击事件</span><br><span class="line">          this.$emit(&#39;func&#39;, &#39;OK&#39;); &#x2F;&#x2F; 调用父组件传递过来的方法，同时把数据传递出去</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        getMsg(val)&#123; &#x2F;&#x2F; 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span><br><span class="line">          alert(val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="评论列表案例"><a href="#评论列表案例" class="headerlink" title="评论列表案例"></a>评论列表案例</h2><p>目标：主要练习父子组件之间传值</p><h2 id="使用-this-refs-来获取元素和组件"><a href="#使用-this-refs-来获取元素和组件" class="headerlink" title="使用 this.$refs 来获取元素和组件"></a>使用 <code>this.$refs</code> 来获取元素和组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;获取元素内容&quot; @click&#x3D;&quot;getElement&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!-- 使用 ref 获取元素 --&gt;</span><br><span class="line">    &lt;h1 ref&#x3D;&quot;myh1&quot;&gt;这是一个大大的H1&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- 使用 ref 获取子组件 --&gt;</span><br><span class="line">    &lt;my-com ref&#x3D;&quot;mycom&quot;&gt;&lt;&#x2F;my-com&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  Vue.component(&#39;my-com&#39;, &#123;</span><br><span class="line">    template: &#39;&lt;h5&gt;这是一个子组件&lt;&#x2F;h5&gt;&#39;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#39;子组件&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">  var vm &#x3D; new Vue(&#123;</span><br><span class="line">    el: &#39;#app&#39;,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getElement() &#123;</span><br><span class="line">        &#x2F;&#x2F; 通过 this.$refs 来获取元素</span><br><span class="line">        console.log(this.$refs.myh1.innerText);</span><br><span class="line">        &#x2F;&#x2F; 通过 this.$refs 来获取组件</span><br><span class="line">        console.log(this.$refs.mycom.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h2><ol><li><p>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p></li><li><p>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p></li><li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p></li></ol><h2 id="在-vue-中使用-vue-router"><a href="#在-vue-中使用-vue-router" class="headerlink" title="在 vue 中使用 vue-router"></a>在 vue 中使用 vue-router</h2><ol><li>导入 vue-router 组件类库：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 1. 导入 vue-router 组件类库 --&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue-router-2.7.0.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li>使用 router-link 组件来导航<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span><br><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li><li>使用 router-view 组件来显示匹配到的组件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span><br><span class="line">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure></li><li>创建使用<code>Vue.extend</code>创建组件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 4.1 使用 Vue.extend 来创建登录组件</span><br><span class="line">var login &#x3D; Vue.extend(&#123;</span><br><span class="line">  template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 4.2 使用 Vue.extend 来创建注册组件</span><br><span class="line">var register &#x3D; Vue.extend(&#123;</span><br><span class="line">  template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</span><br><span class="line">    var router &#x3D; new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123; path: &#39;&#x2F;login&#39;, component: login &#125;,</span><br><span class="line">        &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li>使用 router 属性来使用路由规则<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 6. 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      router: router &#x2F;&#x2F; 使用 router 属性来使用路由规则</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="设置路由高亮"><a href="#设置路由高亮" class="headerlink" title="设置路由高亮"></a>设置路由高亮</h2><h2 id="设置路由切换动效"><a href="#设置路由切换动效" class="headerlink" title="设置路由切换动效"></a>设置路由切换动效</h2><h2 id="在路由规则中定义参数"><a href="#在路由规则中定义参数" class="headerlink" title="在路由规则中定义参数"></a>在路由规则中定义参数</h2><ol><li>在规则中定义参数：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; path: &#39;&#x2F;register&#x2F;:id&#39;, component: register &#125;</span><br></pre></td></tr></table></figure></li><li>通过 <code>this.$route.params</code>来获取路由中的参数：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var register &#x3D; Vue.extend(&#123;</span><br><span class="line">      template: &#39;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用-children-属性实现路由嵌套"><a href="#使用-children-属性实现路由嵌套" class="headerlink" title="使用 children 属性实现路由嵌套"></a>使用 <code>children</code> 属性实现路由嵌套</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;router-link to&#x3D;&quot;&#x2F;account&quot;&gt;Account&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  &#x2F;&#x2F; 父路由中的组件</span><br><span class="line">  const account &#x3D; Vue.extend(&#123;</span><br><span class="line">    template: &#96;&lt;div&gt;</span><br><span class="line">      这是account组件</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;login&quot;&gt;login&lt;&#x2F;router-link&gt; | </span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;register&quot;&gt;register&lt;&#x2F;router-link&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;&#96;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 子路由中的 login 组件</span><br><span class="line">  const login &#x3D; Vue.extend(&#123;</span><br><span class="line">    template: &#39;&lt;div&gt;登录组件&lt;&#x2F;div&gt;&#39;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 子路由中的 register 组件</span><br><span class="line">  const register &#x3D; Vue.extend(&#123;</span><br><span class="line">    template: &#39;&lt;div&gt;注册组件&lt;&#x2F;div&gt;&#39;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 路由实例</span><br><span class="line">  var router &#x3D; new VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">      &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;account&#x2F;login&#39; &#125;, &#x2F;&#x2F; 使用 redirect 实现路由重定向</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;&#x2F;account&#39;,</span><br><span class="line">        component: account,</span><br><span class="line">        children: [ &#x2F;&#x2F; 通过 children 数组属性，来实现路由的嵌套</span><br><span class="line">          &#123; path: &#39;login&#39;, component: login &#125;, &#x2F;&#x2F; 注意，子路由的开头位置，不要加 &#x2F; 路径符</span><br><span class="line">          &#123; path: &#39;register&#39;, component: register &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">  var vm &#x3D; new Vue(&#123;</span><br><span class="line">    el: &#39;#app&#39;,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      account</span><br><span class="line">    &#125;,</span><br><span class="line">    router: router</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="命名视图实现经典布局"><a href="#命名视图实现经典布局" class="headerlink" title="命名视图实现经典布局"></a>命名视图实现经典布局</h2><ol><li>标签代码结构：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">      &lt;router-view name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">      &lt;router-view name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li>JS代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var header &#x3D; Vue.component(&#39;header&#39;, &#123;</span><br><span class="line">      template: &#39;&lt;div class&#x3D;&quot;header&quot;&gt;header&lt;&#x2F;div&gt;&#39;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var sidebar &#x3D; Vue.component(&#39;sidebar&#39;, &#123;</span><br><span class="line">      template: &#39;&lt;div class&#x3D;&quot;sidebar&quot;&gt;sidebar&lt;&#x2F;div&gt;&#39;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var mainbox &#x3D; Vue.component(&#39;mainbox&#39;, &#123;</span><br><span class="line">      template: &#39;&lt;div class&#x3D;&quot;mainbox&quot;&gt;mainbox&lt;&#x2F;div&gt;&#39;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建路由对象</span><br><span class="line">    var router &#x3D; new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: &#39;&#x2F;&#39;, components: &#123;</span><br><span class="line">            default: header,</span><br><span class="line">            a: sidebar,</span><br><span class="line">            b: mainbox</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li>CSS 样式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .header &#123;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .content&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">  &#125;</span><br><span class="line">  .sidebar &#123;</span><br><span class="line">    flex: 2;</span><br><span class="line">    border: 1px solid green;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">  .mainbox&#123;</span><br><span class="line">    flex: 8;</span><br><span class="line">    border: 1px solid blue;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="watch属性的使用"><a href="#watch属性的使用" class="headerlink" title="watch属性的使用"></a><code>watch</code>属性的使用</h2><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p><ol><li>监听<code>data</code>中属性的改变：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &#39;jack&#39;,</span><br><span class="line">        lastName: &#39;chen&#39;,</span><br><span class="line">        fullName: &#39;jack - chen&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        &#39;firstName&#39;: function (newVal, oldVal) &#123; &#x2F;&#x2F; 第一个参数是新数据，第二个参数是旧数据</span><br><span class="line">          this.fullName &#x3D; newVal + &#39; - &#39; + this.lastName;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;lastName&#39;: function (newVal, oldVal) &#123;</span><br><span class="line">          this.fullName &#x3D; this.firstName + &#39; - &#39; + newVal;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li>监听路由对象的改变：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var login &#x3D; Vue.extend(&#123;</span><br><span class="line">      template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var register &#x3D; Vue.extend(&#123;</span><br><span class="line">      template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var router &#x3D; new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123; path: &quot;&#x2F;login&quot;, component: login &#125;,</span><br><span class="line">        &#123; path: &quot;&#x2F;register&quot;, component: register &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router: router,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        &#39;$route&#39;: function (newVal, oldVal) &#123;</span><br><span class="line">          if (newVal.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;</span><br><span class="line">            console.log(&#39;这是登录组件&#39;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="computed计算属性的使用"><a href="#computed计算属性的使用" class="headerlink" title="computed计算属性的使用"></a><code>computed</code>计算属性的使用</h2><ol><li>默认只有<code>getter</code>的计算属性：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &#39;jack&#39;,</span><br><span class="line">        lastName: &#39;chen&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      computed: &#123; &#x2F;&#x2F; 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class="line">        fullName() &#123;</span><br><span class="line">          return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li>定义有<code>getter</code>和<code>setter</code>的计算属性：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt;</span><br><span class="line">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;修改fullName&quot; @click&#x3D;&quot;changeName&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &#39;jack&#39;,</span><br><span class="line">        lastName: &#39;chen&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        changeName() &#123;</span><br><span class="line">          this.fullName &#x3D; &#39;TOM - chen2&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line">        fullName: &#123;</span><br><span class="line">          get: function () &#123;</span><br><span class="line">            return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class="line">          &#125;,</span><br><span class="line">          set: function (newVal) &#123;</span><br><span class="line">            var parts &#x3D; newVal.split(&#39; - &#39;);</span><br><span class="line">            this.firstName &#x3D; parts[0];</span><br><span class="line">            this.lastName &#x3D; parts[1];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="watch、computed和methods之间的对比"><a href="#watch、computed和methods之间的对比" class="headerlink" title="watch、computed和methods之间的对比"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h2><ol><li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li><li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li><li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li></ol><h2 id="nrm的安装使用"><a href="#nrm的安装使用" class="headerlink" title="nrm的安装使用"></a><code>nrm</code>的安装使用</h2><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p><ol><li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li><li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li><li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li></ol><h2 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h2><ol><li><a href="http://www.cnblogs.com/joyho/articles/4430148.html">URL中的hash（井号）</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Vue-js-Day3&quot;&gt;&lt;a href=&quot;#Vue-js-Day3&quot; class=&quot;headerlink&quot; title=&quot;Vue.js - Day3&quot;&gt;&lt;/a&gt;Vue.js - Day3&lt;/h1&gt;&lt;h2 id=&quot;定义Vue组件&quot;&gt;&lt;a href=&quot;#定义Vue组件&quot; class=&quot;headerlink&quot; title=&quot;定义Vue组件&quot;&gt;&lt;/a&gt;定义Vue组件&lt;/h2&gt;&lt;p&gt;什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；&lt;br&gt;组件化和模块化的不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；&lt;/li&gt;
&lt;li&gt;组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用</summary>
    
    
    
    <category term="es6语言" scheme="https://jxdw.github.io/categories/es6%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="编程语言" scheme="https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【转载】vue学习之day2</title>
    <link href="https://jxdw.github.io/2020/07/08/es6_vue_study_day2/"/>
    <id>https://jxdw.github.io/2020/07/08/es6_vue_study_day2/</id>
    <published>2020-07-08T13:12:16.000Z</published>
    <updated>2020-10-22T14:30:51.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-Day2"><a href="#Vue-js-Day2" class="headerlink" title="Vue.js - Day2"></a>Vue.js - Day2</h1><a id="more"></a><h2 id="品牌管理案例"><a href="#品牌管理案例" class="headerlink" title="品牌管理案例"></a>品牌管理案例</h2><h3 id="添加新品牌"><a href="#添加新品牌" class="headerlink" title="添加新品牌"></a>添加新品牌</h3><h3 id="删除品牌"><a href="#删除品牌" class="headerlink" title="删除品牌"></a>删除品牌</h3><h3 id="根据条件筛选品牌"><a href="#根据条件筛选品牌" class="headerlink" title="根据条件筛选品牌"></a>根据条件筛选品牌</h3><ol><li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li></ol><p><a href="https://v1-cn.vuejs.org/api/#filterBy">filterBy - 指令</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;tr v-for&#x3D;&quot;item in list | filterBy searchName in &#39;name&#39;&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;td&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>在2.x版本中<a href="https://cn.vuejs.org/v2/guide/list.html#%E6%98%BE%E7%A4%BA%E8%BF%87%E6%BB%A4-%E6%8E%92%E5%BA%8F%E7%BB%93%E6%9E%9C">手动实现筛选的方式</a>：</li></ol><ul><li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;hr&gt; 输入筛选名称：</span><br><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;tbody&gt;</span><br><span class="line"></span><br><span class="line">      &lt;tr v-for&#x3D;&quot;item in search(searchName)&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;</span><br><span class="line"></span><br><span class="line">          &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;td&gt;</span><br><span class="line"></span><br><span class="line">      &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;tbody&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">search(name) &#123;</span><br><span class="line"></span><br><span class="line">  return this.list.filter(x &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    return x.name.indexOf(name) !&#x3D; -1;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Vue调试工具vue-devtools的安装步骤和使用"><a href="#Vue调试工具vue-devtools的安装步骤和使用" class="headerlink" title="Vue调试工具vue-devtools的安装步骤和使用"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN">Vue.js devtools - 翻墙安装方式 - 推荐</a></p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p><h3 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h3><ol><li>HTML元素：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(&#39;yyyy-mm-dd&#39;)&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>私有 <code>filters</code> 定义方式：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">filters: &#123; &#x2F;&#x2F; 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span><br><span class="line"></span><br><span class="line">    dataFormat(input, pattern &#x3D; &quot;&quot;) &#123; &#x2F;&#x2F; 在参数列表中 通过 pattern&#x3D;&quot;&quot; 来指定形参默认值，防止报错</span><br><span class="line"></span><br><span class="line">      var dt &#x3D; new Date(input);</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 获取年月日</span><br><span class="line"></span><br><span class="line">      var y &#x3D; dt.getFullYear();</span><br><span class="line"></span><br><span class="line">      var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class="line"></span><br><span class="line">      var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class="line"></span><br><span class="line">      if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class="line"></span><br><span class="line">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class="line"></span><br><span class="line">      &#125; else &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 获取时分秒</span><br><span class="line"></span><br><span class="line">        var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class="line"></span><br><span class="line">        var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class="line"></span><br><span class="line">        var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p></blockquote><h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义一个全局过滤器</span><br><span class="line"></span><br><span class="line">Vue.filter(&#39;dataFormat&#39;, function (input, pattern &#x3D; &#39;&#39;) &#123;</span><br><span class="line"></span><br><span class="line">  var dt &#x3D; new Date(input);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 获取年月日</span><br><span class="line"></span><br><span class="line">  var y &#x3D; dt.getFullYear();</span><br><span class="line"></span><br><span class="line">  var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class="line"></span><br><span class="line">  var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class="line"></span><br><span class="line">  if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class="line"></span><br><span class="line">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class="line"></span><br><span class="line">  &#125; else &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取时分秒</span><br><span class="line"></span><br><span class="line">    var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class="line"></span><br><span class="line">    var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class="line"></span><br><span class="line">    var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p></blockquote><h2 id="键盘修饰符以及自定义键盘修饰符"><a href="#键盘修饰符以及自定义键盘修饰符" class="headerlink" title="键盘修饰符以及自定义键盘修饰符"></a>键盘修饰符以及自定义键盘修饰符</h2><h3 id="1-x中自定义键盘修饰符【了解即可】"><a href="#1-x中自定义键盘修饰符【了解即可】" class="headerlink" title="1.x中自定义键盘修饰符【了解即可】"></a>1.x中自定义键盘修饰符【了解即可】</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Vue.directive(&#39;on&#39;).keyCodes.f2 &#x3D; 113;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-x中自定义键盘修饰符"><a href="#2-x中自定义键盘修饰符" class="headerlink" title="2.x中自定义键盘修饰符"></a><a href="https://cn.vuejs.org/v2/guide/events.html#%E9%94%AE%E5%80%BC%E4%BF%AE%E9%A5%B0%E7%AC%A6">2.x中自定义键盘修饰符</a></h3><ol><li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Vue.config.keyCodes.f2 &#x3D; 113;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>使用自定义的按键修饰符：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot; @keyup.f2&#x3D;&quot;add&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a><a href="https://cn.vuejs.org/v2/guide/custom-directive.html">自定义指令</a></h2><ol><li>自定义全局和局部的 自定义指令：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span><br><span class="line"></span><br><span class="line">Vue.directive(&#39;focus&#39;, &#123;</span><br><span class="line"></span><br><span class="line">  inserted: function (el) &#123; &#x2F;&#x2F; inserted 表示被绑定元素插入父节点时调用</span><br><span class="line"></span><br><span class="line">    el.focus();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span><br><span class="line"></span><br><span class="line">  directives: &#123;</span><br><span class="line"></span><br><span class="line">    color: &#123; &#x2F;&#x2F; 为元素设置指定的字体颜色</span><br><span class="line"></span><br><span class="line">      bind(el, binding) &#123;</span><br><span class="line"></span><br><span class="line">        el.style.color &#x3D; binding.value;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#39;font-weight&#39;: function (el, binding2) &#123; &#x2F;&#x2F; 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span><br><span class="line"></span><br><span class="line">      el.style.fontWeight &#x3D; binding2.value;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>自定义指令的使用方式：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot; v-focus v-color&#x3D;&quot;&#39;red&#39;&quot; v-font-weight&#x3D;&quot;900&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Vue-1-x-中-自定义元素指令【已废弃-了解即可】"><a href="#Vue-1-x-中-自定义元素指令【已废弃-了解即可】" class="headerlink" title="Vue 1.x 中 自定义元素指令【已废弃,了解即可】"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.elementDirective(&#39;red-color&#39;, &#123;</span><br><span class="line">  bind: function () &#123;</span><br><span class="line">    this.el.style.color &#x3D; &#39;red&#39;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;red-color&gt;1232&lt;&#x2F;red-color&gt;</span><br></pre></td></tr></table></figure><h2 id="vue实例的生命周期"><a href="#vue实例的生命周期" class="headerlink" title="vue实例的生命周期"></a><a href="https://cn.vuejs.org/v2/guide/instance.html#%E5%AE%9E%E4%BE%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">vue实例的生命周期</a></h2><ul><li>什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</li><li><a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90">生命周期钩子</a>：就是生命周期事件的别名而已；</li><li>生命周期钩子 = 生命周期函数 = 生命周期事件</li><li>主要的生命周期函数分类：<ul><li>创建期间的生命周期函数：<ul><li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</li><li>created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板</li><li>beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</li><li>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</li></ul></li><li>运行期间的生命周期函数：<ul><li>beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</li><li>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li></ul></li><li>销毁期间的生命周期函数：<ul><li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</li><li>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ul></li></ul></li></ul><h2 id="vue-resource-实现-get-post-jsonp请求"><a href="#vue-resource-实现-get-post-jsonp请求" class="headerlink" title="vue-resource 实现 get, post, jsonp请求"></a><a href="https://github.com/pagekit/vue-resource">vue-resource 实现 get, post, jsonp请求</a></h2><p>除了 vue-resource 之外，还可以使用 <code>axios</code> 的第三方包实现实现数据的请求</p><ol><li>之前的学习中，如何发起数据请求？</li><li>常见的数据请求类型？  get  post jsonp</li><li>测试的URL请求资源地址：<ul><li>get请求地址： <a href="http://vue.studyit.io/api/getlunbo">http://vue.studyit.io/api/getlunbo</a></li><li>post请求地址：<a href="http://vue.studyit.io/api/post">http://vue.studyit.io/api/post</a></li><li>jsonp请求地址：<a href="http://vue.studyit.io/api/jsonp">http://vue.studyit.io/api/jsonp</a></li></ul></li><li>JSONP的实现原理<ul><li>由于浏览器的安全性限制，不允许AJAX访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全；</li><li>可以通过动态创建script标签的形式，把script标签的src属性，指向数据接口的地址，因为script标签不存在跨域限制，这种数据获取方式，称作JSONP（注意：根据JSONP的实现原理，知晓，JSONP只支持Get请求）；</li><li>具体实现过程：<ul><li>先在客户端定义一个回调方法，预定义对数据的操作；</li><li>再把这个回调方法的名称，通过URL传参的形式，提交到服务器的数据接口；</li><li>服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行；</li><li>客户端拿到服务器返回的字符串之后，当作Script脚本去解析执行，这样就能够拿到JSONP的数据了；</li></ul></li><li>带大家通过 Node.js ，来手动实现一个JSONP的请求例子；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const http &#x3D; require(&#39;http&#39;);</span><br><span class="line">&#x2F;&#x2F; 导入解析 URL 地址的核心模块</span><br><span class="line">const urlModule &#x3D; require(&#39;url&#39;);</span><br><span class="line"></span><br><span class="line">const server &#x3D; http.createServer();</span><br><span class="line">&#x2F;&#x2F; 监听 服务器的 request 请求事件，处理每个请求</span><br><span class="line">server.on(&#39;request&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class="line">  const url &#x3D; req.url;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 解析客户端请求的URL地址</span><br><span class="line">  var info &#x3D; urlModule.parse(url, true);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 如果请求的 URL 地址是 &#x2F;getjsonp ，则表示要获取JSONP类型的数据</span><br><span class="line">  if (info.pathname &#x3D;&#x3D;&#x3D; &#39;&#x2F;getjsonp&#39;) &#123;</span><br><span class="line">    &#x2F;&#x2F; 获取客户端指定的回调函数的名称</span><br><span class="line">    var cbName &#x3D; info.query.callback;</span><br><span class="line">    &#x2F;&#x2F; 手动拼接要返回给客户端的数据对象</span><br><span class="line">    var data &#x3D; &#123;</span><br><span class="line">      name: &#39;zs&#39;,</span><br><span class="line">      age: 22,</span><br><span class="line">      gender: &#39;男&#39;,</span><br><span class="line">      hobby: [&#39;吃饭&#39;, &#39;睡觉&#39;, &#39;运动&#39;]</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 拼接出一个方法的调用，在调用这个方法的时候，把要发送给客户端的数据，序列化为字符串，作为参数传递给这个调用的方法：</span><br><span class="line">    var result &#x3D; &#96;$&#123;cbName&#125;($&#123;JSON.stringify(data)&#125;)&#96;;</span><br><span class="line">    &#x2F;&#x2F; 将拼接好的方法的调用，返回给客户端去解析执行</span><br><span class="line">    res.end(result);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    res.end(&#39;404&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(3000, () &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;server running at http:&#x2F;&#x2F;127.0.0.1:3000&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li>vue-resource 的配置步骤：<ul><li>直接在页面中，通过<code>script</code>标签，引入 <code>vue-resource</code> 的脚本文件；</li><li>注意：引用的先后顺序是：先引用 <code>Vue</code> 的脚本文件，再引用 <code>vue-resource</code> 的脚本文件；</li></ul></li><li>发送get请求：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getInfo() &#123; &#x2F;&#x2F; get 方式获取数据</span><br><span class="line">  this.$http.get(&#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;getlunbo&#39;).then(res &#x3D;&gt; &#123;</span><br><span class="line">    console.log(res.body);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>发送post请求：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postInfo() &#123;</span><br><span class="line">  var url &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;post&#39;;</span><br><span class="line">  &#x2F;&#x2F; post 方法接收三个参数：</span><br><span class="line">  &#x2F;&#x2F; 参数1： 要请求的URL地址</span><br><span class="line">  &#x2F;&#x2F; 参数2： 要发送的数据对象</span><br><span class="line">  &#x2F;&#x2F; 参数3： 指定post提交的编码类型为 application&#x2F;x-www-form-urlencoded</span><br><span class="line">  this.$http.post(url, &#123; name: &#39;zs&#39; &#125;, &#123; emulateJSON: true &#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">    console.log(res.body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>发送JSONP请求获取数据：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jsonpInfo() &#123; &#x2F;&#x2F; JSONP形式从服务器获取数据</span><br><span class="line">  var url &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;jsonp&#39;;</span><br><span class="line">  this.$http.jsonp(url).then(res &#x3D;&gt; &#123;</span><br><span class="line">    console.log(res.body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置本地数据库和数据接口API"><a href="#配置本地数据库和数据接口API" class="headerlink" title="配置本地数据库和数据接口API"></a>配置本地数据库和数据接口API</h2><ol><li>先解压安装 <code>PHPStudy</code>;</li><li>解压安装 <code>Navicat</code> 这个数据库可视化工具，并激活；</li><li>打开 <code>Navicat</code> 工具，新建空白数据库，名为 <code>dtcmsdb4</code>;</li><li>双击新建的数据库，连接上这个空白数据库，在新建的数据库上<code>右键</code> -&gt; <code>运行SQL文件</code>，选择并执行 <code>dtcmsdb4.sql</code> 这个数据库脚本文件；如果执行不报错，则数据库导入完成；</li><li>进入文件夹 <code>vuecms3_nodejsapi</code> 内部，执行 <code>npm i</code> 安装所有的依赖项；</li><li>先确保本机安装了 <code>nodemon</code>, 没有安装，则运行 <code>npm i nodemon -g</code> 进行全局安装，安装完毕后，进入到 <code>vuecms3_nodejsapi</code>目录 -&gt; <code>src</code>目录 -&gt; 双击运行 <code>start.bat</code></li><li>如果API启动失败，请检查 PHPStudy 是否正常开启，同时，检查 <code>app.js</code> 中第 <code>14行</code> 中数据库连接配置字符串是否正确；PHPStudy 中默认的 用户名是root，默认的密码也是root</li></ol><h2 id="品牌管理改造"><a href="#品牌管理改造" class="headerlink" title="品牌管理改造"></a>品牌管理改造</h2><h3 id="展示品牌列表"><a href="#展示品牌列表" class="headerlink" title="展示品牌列表"></a>展示品牌列表</h3><h3 id="添加品牌数据"><a href="#添加品牌数据" class="headerlink" title="添加品牌数据"></a>添加品牌数据</h3><h3 id="删除品牌数据"><a href="#删除品牌数据" class="headerlink" title="删除品牌数据"></a>删除品牌数据</h3><h2 id="Vue中的动画"><a href="#Vue中的动画" class="headerlink" title="Vue中的动画"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html">Vue中的动画</a></h2><p>为什么要有动画：动画能够提高用户的体验，帮助用户更好的理解页面中的功能；</p><h3 id="使用过渡类名"><a href="#使用过渡类名" class="headerlink" title="使用过渡类名"></a>使用过渡类名</h3><ol><li>HTML结构：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;动起来&quot; @click&#x3D;&quot;myAnimate&quot;&gt;</span><br><span class="line">    &lt;!-- 使用 transition 将需要过渡的元素包裹起来 --&gt;</span><br><span class="line">    &lt;transition name&#x3D;&quot;fade&quot;&gt;</span><br><span class="line">      &lt;div v-show&#x3D;&quot;isshow&quot;&gt;动画哦&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li>VM 实例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    isshow: false</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    myAnimate() &#123;</span><br><span class="line">      this.isshow &#x3D; !this.isshow;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>定义两组类样式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 定义进入和离开时候的过渡状态 *&#x2F;</span><br><span class="line">    .fade-enter-active,</span><br><span class="line">    .fade-leave-active &#123;</span><br><span class="line">      transition: all 0.2s ease;</span><br><span class="line">      position: absolute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;* 定义进入过渡的开始状态 和 离开过渡的结束状态 *&#x2F;</span><br><span class="line">    .fade-enter,</span><br><span class="line">    .fade-leave-to &#123;</span><br><span class="line">      opacity: 0;</span><br><span class="line">      transform: translateX(100px);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用第三方-CSS-动画库"><a href="#使用第三方-CSS-动画库" class="headerlink" title="使用第三方 CSS 动画库"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%B8%A1%E7%B1%BB%E5%90%8D">使用第三方 CSS 动画库</a></h3><ol><li>导入动画类库：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;.&#x2F;lib&#x2F;animate.css&quot;&gt;</span><br></pre></td></tr></table></figure></li><li>定义 transition 及属性：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">enter-active-class&#x3D;&quot;fadeInRight&quot;</span><br><span class="line">    leave-active-class&#x3D;&quot;fadeOutRight&quot;</span><br><span class="line">    :duration&#x3D;&quot;&#123; enter: 500, leave: 800 &#125;&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;animated&quot; v-show&#x3D;&quot;isshow&quot;&gt;动画哦&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用动画钩子函数"><a href="#使用动画钩子函数" class="headerlink" title="使用动画钩子函数"></a>使用动画钩子函数</h3><ol><li>定义 transition 组件以及三个钩子函数：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;切换动画&quot; @click&#x3D;&quot;isshow &#x3D; !isshow&quot;&gt;</span><br><span class="line">    &lt;transition</span><br><span class="line">    @before-enter&#x3D;&quot;beforeEnter&quot;</span><br><span class="line">    @enter&#x3D;&quot;enter&quot;</span><br><span class="line">    @after-enter&#x3D;&quot;afterEnter&quot;&gt;</span><br><span class="line">      &lt;div v-if&#x3D;&quot;isshow&quot; class&#x3D;&quot;show&quot;&gt;OK&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li>定义三个 methods 钩子方法：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">        beforeEnter(el) &#123; &#x2F;&#x2F; 动画进入之前的回调</span><br><span class="line">          el.style.transform &#x3D; &#39;translateX(500px)&#39;;</span><br><span class="line">        &#125;,</span><br><span class="line">        enter(el, done) &#123; &#x2F;&#x2F; 动画进入完成时候的回调</span><br><span class="line">          el.offsetWidth;</span><br><span class="line">          el.style.transform &#x3D; &#39;translateX(0px)&#39;;</span><br><span class="line">          done();</span><br><span class="line">        &#125;,</span><br><span class="line">        afterEnter(el) &#123; &#x2F;&#x2F; 动画进入完成之后的回调</span><br><span class="line">          this.isshow &#x3D; !this.isshow;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li><li>定义动画过渡时长和样式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.show&#123;</span><br><span class="line">      transition: all 0.4s ease;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="v-for-的列表过渡"><a href="#v-for-的列表过渡" class="headerlink" title="v-for 的列表过渡"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html#%E5%88%97%E8%A1%A8%E7%9A%84%E8%BF%9B%E5%85%A5%E5%92%8C%E7%A6%BB%E5%BC%80%E8%BF%87%E6%B8%A1">v-for 的列表过渡</a></h3><ol><li>定义过渡样式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .list-enter,</span><br><span class="line">    .list-leave-to &#123;</span><br><span class="line">      opacity: 0;</span><br><span class="line">      transform: translateY(10px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .list-enter-active,</span><br><span class="line">    .list-leave-active &#123;</span><br><span class="line">      transition: all 0.3s ease;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li><li>定义DOM结构，其中，需要使用 transition-group 组件把v-for循环的列表包裹起来：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;txt&quot; @keyup.enter&#x3D;&quot;add&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;transition-group tag&#x3D;&quot;ul&quot; name&#x3D;&quot;list&quot;&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;(item, i) in list&quot; :key&#x3D;&quot;i&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;transition-group&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li>定义 VM中的结构：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    txt: &#39;&#39;,</span><br><span class="line">    list: [1, 2, 3, 4]</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    add() &#123;</span><br><span class="line">      this.list.push(this.txt);</span><br><span class="line">      this.txt &#x3D; &#39;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="列表的排序过渡"><a href="#列表的排序过渡" class="headerlink" title="列表的排序过渡"></a>列表的排序过渡</h3><p><code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，<strong>还可以改变定位</strong>。要使用这个新功能只需了解新增的 <code>v-move</code> 特性，<strong>它会在元素的改变定位的过程中应用</strong>。</p><ul><li><code>v-move</code> 和 <code>v-leave-active</code> 结合使用，能够让列表的过渡更加平缓柔和：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.v-move&#123;</span><br><span class="line">  transition: all 0.8s ease;</span><br><span class="line">&#125;</span><br><span class="line">.v-leave-active&#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ol><li><a href="https://v1-cn.vuejs.org/">vue.js 1.x 文档</a></li><li><a href="https://cn.vuejs.org/">vue.js 2.x 文档</a></li><li><a href="http://www.css88.com/archives/7715">String.prototype.padStart(maxLength, fillString)</a></li><li><a href="http://www.cnblogs.com/wuhua1/p/6686237.html">js 里面的键盘事件对应的键码</a></li><li><a href="https://github.com/pagekit/vue-resource">pagekit/vue-resource</a></li><li><a href="https://jingyan.baidu.com/article/a65957f4976aad24e67f9b9b.html">navicat如何导入sql文件和导出sql文件</a></li><li><a href="http://cubic-bezier.com/#.4,-0.3,1,.33">贝塞尔在线生成器</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Vue-js-Day2&quot;&gt;&lt;a href=&quot;#Vue-js-Day2&quot; class=&quot;headerlink&quot; title=&quot;Vue.js - Day2&quot;&gt;&lt;/a&gt;Vue.js - Day2&lt;/h1&gt;</summary>
    
    
    
    <category term="es6语言" scheme="https://jxdw.github.io/categories/es6%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="编程语言" scheme="https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【转载】ES6与Vue框架学习之day1</title>
    <link href="https://jxdw.github.io/2020/07/07/es6_vue_study_day1/"/>
    <id>https://jxdw.github.io/2020/07/07/es6_vue_study_day1/</id>
    <published>2020-07-07T13:11:16.000Z</published>
    <updated>2020-10-22T14:30:41.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-js介绍"><a href="#vue-js介绍" class="headerlink" title="vue.js介绍"></a>vue.js介绍</h1><h2 id="前端工程师的主要工作"><a href="#前端工程师的主要工作" class="headerlink" title="前端工程师的主要工作"></a>前端工程师的主要工作</h2><h3 id="Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别"><a href="#Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别" class="headerlink" title="Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别"></a>Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别</h3><ul><li>MVC 是后端的分层开发概念；</li><li>为什么有了MVC还要有MVVM<ul><li>MVC主要是后端工程师关注。</li></ul></li><li>MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</li></ul><h3 id="前端的主要工作"><a href="#前端的主要工作" class="headerlink" title="前端的主要工作"></a>前端的主要工作</h3><p>主要负责MVVM中的V、VM这一层；主要工作就是和界面打交道，来制作前端页面效果；</p><h2 id="框架与Vue-js"><a href="#框架与Vue-js" class="headerlink" title="框架与Vue.js"></a>框架与Vue.js</h2><h3 id="框架和库的区别"><a href="#框架和库的区别" class="headerlink" title="框架和库的区别"></a>框架和库的区别</h3><ul><li><p>框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。</p><ul><li>node 中的 express；</li></ul></li><li><p>库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。</p><ul><li><ol><li>从Jquery 切换到 Zepto</li></ol></li><li><ol start="2"><li>从 EJS 切换到 art-template</li></ol></li></ul></li></ul><h3 id="为什么要学习流行框架"><a href="#为什么要学习流行框架" class="headerlink" title="为什么要学习流行框架"></a>为什么要学习流行框架</h3><ul><li>企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱；<ul><li>企业中，使用框架，能够提高开发的效率；</li><li>提高开发效率的发展历程：<ul><li>原生JS </li><li>Jquery之类的类库 </li><li>前端模板引擎 </li><li>Angular.js / Vue.js</li></ul></li></ul></li><li>增强自己就业时候的竞争力<ul><li>人无我有，人有我优</li><li>你平时不忙的时候，都在干嘛？<a id="more"></a>  <h3 id="什么是Vue-js"><a href="#什么是Vue-js" class="headerlink" title="什么是Vue.js"></a>什么是Vue.js</h3></li></ul><ul><li>Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex）</li><li>Vue.js 是前端的<strong>主流框架之一</strong>，和Angular.js、React.js 一起，并成为前端三大主流框架！</li><li>Vue.js 是一套构建用户界面的框架，<strong>只关注视图层</strong>，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发）</li><li>在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑；</li><li>能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】</li></ul></li></ul><h2 id="Vue调试工具"><a href="#Vue调试工具" class="headerlink" title="Vue调试工具"></a>Vue调试工具</h2><h2 id="vue-devtools的安装步骤和使用"><a href="#vue-devtools的安装步骤和使用" class="headerlink" title="vue-devtools的安装步骤和使用"></a>vue-devtools的安装步骤和使用</h2><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN">Vue.js devtools - 翻墙安装方式 - 推荐</a></p><h1 id="Vue基础语法"><a href="#Vue基础语法" class="headerlink" title="Vue基础语法"></a>Vue基础语法</h1><h2 id="基本的代码结构和插值表达式"><a href="#基本的代码结构和插值表达式" class="headerlink" title="基本的代码结构和插值表达式"></a>基本的代码结构和插值表达式</h2><h2 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h2><h2 id="Vue语法之v-text"><a href="#Vue语法之v-text" class="headerlink" title="Vue语法之v-text"></a>Vue语法之<code>v-text</code></h2><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><h2 id="Vue指令之v-bind的三种用法"><a href="#Vue指令之v-bind的三种用法" class="headerlink" title="Vue指令之v-bind的三种用法"></a>Vue指令之<code>v-bind</code>的三种用法</h2><ol><li>直接使用指令<code>v-bind</code></li><li>使用简化指令<code>:</code></li><li>在绑定的时候，拼接绑定内容：<code>:title=&quot;btnTitle + &#39;, 这是追加的内容&#39;&quot;</code></li></ol><h2 id="Vue指令之v-on"><a href="#Vue指令之v-on" class="headerlink" title="Vue指令之v-on"></a>Vue指令之v-on</h2><h2 id="跑马灯效果"><a href="#跑马灯效果" class="headerlink" title="跑马灯效果"></a>跑马灯效果</h2><ol><li>HTML结构：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;&#123;&#123;info&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;开启&quot; v-on:click&#x3D;&quot;go&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;停止&quot; v-on:click&#x3D;&quot;stop&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>Vue实例：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line"></span><br><span class="line">   var vm &#x3D; new Vue(&#123;</span><br><span class="line">     el: &#39;#app&#39;,</span><br><span class="line">     data: &#123;</span><br><span class="line">       info: &#39;猥琐发育，别浪~！&#39;,</span><br><span class="line">       intervalId: null</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line">       go() &#123;</span><br><span class="line">         &#x2F;&#x2F; 如果当前有定时器在运行，则直接return</span><br><span class="line">         if (this.intervalId !&#x3D; null) &#123;</span><br><span class="line">           return;</span><br><span class="line">         &#125;</span><br><span class="line">         &#x2F;&#x2F; 开始定时器</span><br><span class="line">         this.intervalId &#x3D; setInterval(() &#x3D;&gt; &#123;</span><br><span class="line">           this.info &#x3D; this.info.substring(1) + this.info.substring(0, 1);</span><br><span class="line">         &#125;, 500);</span><br><span class="line">       &#125;,</span><br><span class="line">       stop() &#123;</span><br><span class="line">         clearInterval(this.intervalId);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h2 id="Vue指令之v-on的缩写和事件修饰符"><a href="#Vue指令之v-on的缩写和事件修饰符" class="headerlink" title="Vue指令之v-on的缩写和事件修饰符"></a>Vue指令之<code>v-on的缩写</code>和<code>事件修饰符</code></h2><h2 id="事件修饰符："><a href="#事件修饰符：" class="headerlink" title="事件修饰符："></a>事件修饰符：</h2><ul><li>.stop       阻止冒泡</li><li>.prevent    阻止默认事件</li><li>.capture    添加事件侦听器时使用事件捕获模式</li><li>.self       只当事件在该元素本身（比如不是子元素）触发时触发回调</li><li>.once       事件只触发一次</li></ul><h2 id="Vue指令之v-model和双向数据绑定"><a href="#Vue指令之v-model和双向数据绑定" class="headerlink" title="Vue指令之v-model和双向数据绑定"></a>Vue指令之<code>v-model</code>和<code>双向数据绑定</code></h2><h2 id="Vue指令之v-for和key属性"><a href="#Vue指令之v-for和key属性" class="headerlink" title="Vue指令之v-for和key属性"></a>Vue指令之<code>v-for</code>和<code>key</code>属性</h2><ol><li><p>迭代数组</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for&#x3D;&quot;(item, i) in list&quot;&gt;索引：&#123;&#123;i&#125;&#125; --- 姓名：&#123;&#123;item.name&#125;&#125; --- 年龄：&#123;&#123;item.age&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure></li><li><p>迭代对象中的属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 循环遍历对象身上的属性 --&gt;</span><br><span class="line">   &lt;div v-for&#x3D;&quot;(val, key, i) in userInfo&quot;&gt;&#123;&#123;val&#125;&#125; --- &#123;&#123;key&#125;&#125; --- &#123;&#123;i&#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li><p>迭代数字</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p v-for&#x3D;&quot;i in 10&quot;&gt;这是第 &#123;&#123;i&#125;&#125; 个P标签&lt;&#x2F;p&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>2.2.0+ 的版本里，<strong>当在组件中使用</strong> v-for 时，key 现在是必须的。</p></blockquote></li></ol><p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “<strong>就地复用</strong>” 策略。如果数据项的顺序被改变，Vue将<strong>不是移动 DOM 元素来匹配数据项的顺序</strong>， 而是<strong>简单复用此处每个元素</strong>，并且确保它在特定索引下显示已被渲染过的每个元素。<br>为了给 Vue 一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每项提供一个唯一 key 属性。</p><h2 id="Vue指令之v-if和v-show"><a href="#Vue指令之v-if和v-show" class="headerlink" title="Vue指令之v-if和v-show"></a>Vue指令之<code>v-if</code>和<code>v-show</code></h2><blockquote><p>一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。</p></blockquote><h1 id="在Vue中使用样式"><a href="#在Vue中使用样式" class="headerlink" title="在Vue中使用样式"></a>在Vue中使用样式</h1><h2 id="使用class样式"><a href="#使用class样式" class="headerlink" title="使用class样式"></a>使用class样式</h2><ol><li><p>数组</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li><li><p>数组中使用三元表达式</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, isactive?&#39;active&#39;:&#39;&#39;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li><li><p>数组中嵌套对象</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, &#123;&#39;active&#39;: isactive&#125;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li><li><p>直接使用对象</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1 :class&#x3D;&quot;&#123;red:true, italic:true, active:true, thin:true&#125;&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用内联样式"><a href="#使用内联样式" class="headerlink" title="使用内联样式"></a>使用内联样式</h2><ol><li><p>直接在元素上通过 <code>:style</code> 的形式，书写样式对象</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1 :style&#x3D;&quot;&#123;color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;&#125;&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li><li><p>将样式对象，定义到 <code>data</code> 中，并直接引用到 <code>:style</code> 中</p><ul><li><p>在data上定义样式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">        h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在元素中，通过属性绑定的形式，将样式对象应用到元素中：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1 :style&#x3D;&quot;h1StyleObj&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在 <code>:style</code> 中通过数组，引用多个 <code>data</code> 上的样式对象</p><ul><li>在data上定义样式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">        h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;,</span><br><span class="line">        h1StyleObj2: &#123; fontStyle: &#39;italic&#39; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1 :style&#x3D;&quot;[h1StyleObj, h1StyleObj2]&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p><h3 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h3><ol><li><p>HTML元素：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(&#39;yyyy-mm-dd&#39;)&#125;&#125;&lt;&#x2F;td&gt;</span><br></pre></td></tr></table></figure></li><li><p>私有 <code>filters</code> 定义方式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filters: &#123; &#x2F;&#x2F; 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span><br><span class="line">    dataFormat(input, pattern &#x3D; &quot;&quot;) &#123; &#x2F;&#x2F; 在参数列表中 通过 pattern&#x3D;&quot;&quot; 来指定形参默认值，防止报错</span><br><span class="line">      var dt &#x3D; new Date(input);</span><br><span class="line">      &#x2F;&#x2F; 获取年月日</span><br><span class="line">      var y &#x3D; dt.getFullYear();</span><br><span class="line">      var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class="line">      var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class="line">      &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class="line">      &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class="line">      if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class="line">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; 获取时分秒</span><br><span class="line">        var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class="line">        var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class="line">        var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class="line">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p></blockquote><h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义一个全局过滤器</span><br><span class="line"></span><br><span class="line">Vue.filter(&#39;dataFormat&#39;, function (input, pattern &#x3D; &#39;&#39;) &#123;</span><br><span class="line"></span><br><span class="line">  var dt &#x3D; new Date(input);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 获取年月日</span><br><span class="line"></span><br><span class="line">  var y &#x3D; dt.getFullYear();</span><br><span class="line"></span><br><span class="line">  var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class="line"></span><br><span class="line">  var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class="line"></span><br><span class="line">  if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class="line"></span><br><span class="line">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class="line"></span><br><span class="line">  &#125; else &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取时分秒</span><br><span class="line"></span><br><span class="line">    var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class="line"></span><br><span class="line">    var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class="line"></span><br><span class="line">    var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p></blockquote><h2 id="键盘修饰符以及自定义键盘修饰符"><a href="#键盘修饰符以及自定义键盘修饰符" class="headerlink" title="键盘修饰符以及自定义键盘修饰符"></a>键盘修饰符以及自定义键盘修饰符</h2><h3 id="1-x中自定义键盘修饰符【了解即可】"><a href="#1-x中自定义键盘修饰符【了解即可】" class="headerlink" title="1.x中自定义键盘修饰符【了解即可】"></a>1.x中自定义键盘修饰符【了解即可】</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Vue.directive(&#39;on&#39;).keyCodes.f2 &#x3D; 113;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-x中自定义键盘修饰符"><a href="#2-x中自定义键盘修饰符" class="headerlink" title="[2.x中自定义键盘修饰符]"></a>[2.x中自定义键盘修饰符]</h3><p>参考文档：<a href="https://cn.vuejs.org/v2/guide/events.html#%E9%94%AE%E5%80%BC%E4%BF%AE%E9%A5%B0%E7%AC%A6">https://cn.vuejs.org/v2/guide/events.html#键值修饰符</a></p><ol><li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.config.keyCodes.f2 &#x3D; 113;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用自定义的按键修饰符：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot; @keyup.f2&#x3D;&quot;add&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>参考文档:<a href="https://cn.vuejs.org/v2/guide/custom-directive.html">https://cn.vuejs.org/v2/guide/custom-directive.html</a></p><ol><li>自定义全局和局部的 自定义指令：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span><br><span class="line">Vue.directive(&#39;focus&#39;, &#123;</span><br><span class="line">  inserted: function (el) &#123; &#x2F;&#x2F; inserted 表示被绑定元素插入父节点时调用</span><br><span class="line">    el.focus();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span><br><span class="line">  directives: &#123;</span><br><span class="line">    color: &#123; &#x2F;&#x2F; 为元素设置指定的字体颜色</span><br><span class="line">      bind(el, binding) &#123;</span><br><span class="line">        el.style.color &#x3D; binding.value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;font-weight&#39;: function (el, binding2) &#123; &#x2F;&#x2F; 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span><br><span class="line">      el.style.fontWeight &#x3D; binding2.value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>自定义指令的使用方式：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot; v-focus v-color&#x3D;&quot;&#39;red&#39;&quot; v-font-weight&#x3D;&quot;900&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Vue-1-x-中-自定义元素指令【已废弃-了解即可】"><a href="#Vue-1-x-中-自定义元素指令【已废弃-了解即可】" class="headerlink" title="Vue 1.x 中 自定义元素指令【已废弃,了解即可】"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.elementDirective(&#39;red-color&#39;, &#123;</span><br><span class="line">  bind: function () &#123;</span><br><span class="line">    this.el.style.color &#x3D; &#39;red&#39;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;red-color&gt;1232&lt;&#x2F;red-color&gt;</span><br></pre></td></tr></table></figure><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="简易计算器案例"><a href="#简易计算器案例" class="headerlink" title="简易计算器案例"></a>简易计算器案例</h2><ol><li><p>HTML 代码结构</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;n1&quot;&gt;</span><br><span class="line">  &lt;select v-model&#x3D;&quot;opt&quot;&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;0&quot;&gt;+&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;1&quot;&gt;-&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;2&quot;&gt;*&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;3&quot;&gt;÷&lt;&#x2F;option&gt;</span><br><span class="line">  &lt;&#x2F;select&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;n2&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;&#x3D;&quot; v-on:click&#x3D;&quot;getResult&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;result&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Vue实例代码：</p></li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">   var vm &#x3D; new Vue(&#123;</span><br><span class="line">     el: &#39;#app&#39;,</span><br><span class="line">     data: &#123;</span><br><span class="line">       n1: 0,</span><br><span class="line">       n2: 0,</span><br><span class="line">       result: 0,</span><br><span class="line">       opt: &#39;0&#39;</span><br><span class="line">     &#125;,</span><br><span class="line"></span><br><span class="line">     methods: &#123;</span><br><span class="line">       getResult() &#123;</span><br><span class="line">         switch (this.opt) &#123;</span><br><span class="line">           case &#39;0&#39;:</span><br><span class="line">             this.result &#x3D; parseInt(this.n1) + parseInt(this.n2);</span><br><span class="line">             break;</span><br><span class="line">           case &#39;1&#39;:</span><br><span class="line">             this.result &#x3D; parseInt(this.n1) - parseInt(this.n2);</span><br><span class="line">             break;</span><br><span class="line">           case &#39;2&#39;:</span><br><span class="line">             this.result &#x3D; parseInt(this.n1) * parseInt(this.n2);</span><br><span class="line">             break;</span><br><span class="line">           case &#39;3&#39;:</span><br><span class="line">             this.result &#x3D; parseInt(this.n1) &#x2F; parseInt(this.n2);</span><br><span class="line">             break;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h2 id="品牌管理案例"><a href="#品牌管理案例" class="headerlink" title="品牌管理案例"></a>品牌管理案例</h2><h3 id="添加新品牌"><a href="#添加新品牌" class="headerlink" title="添加新品牌"></a>添加新品牌</h3><h3 id="删除品牌"><a href="#删除品牌" class="headerlink" title="删除品牌"></a>删除品牌</h3><h3 id="根据条件筛选品牌"><a href="#根据条件筛选品牌" class="headerlink" title="根据条件筛选品牌"></a>根据条件筛选品牌</h3><ol><li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li></ol><p><a href="https://v1-cn.vuejs.org/api/#filterBy">filterBy - 指令</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;tr v-for&#x3D;&quot;item in list | filterBy searchName in &#39;name&#39;&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;td&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>在2.x版本中<a href="https://cn.vuejs.org/v2/guide/list.html#%E6%98%BE%E7%A4%BA%E8%BF%87%E6%BB%A4-%E6%8E%92%E5%BA%8F%E7%BB%93%E6%9E%9C">手动实现筛选的方式</a>：</li></ol><ul><li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;hr&gt; 输入筛选名称：</span><br><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;tbody&gt;</span><br><span class="line">  &lt;tr v-for&#x3D;&quot;item in search(searchName)&quot;&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;</span><br><span class="line">      &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;td&gt;</span><br><span class="line">  &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;tbody&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search(name) &#123;</span><br><span class="line">  return this.list.filter(x &#x3D;&gt; &#123;</span><br><span class="line">    return x.name.indexOf(name) !&#x3D; -1;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><ol><li><a href="https://v1-cn.vuejs.org/">vue.js 1.x 文档</a></li><li><a href="https://cn.vuejs.org/">vue.js 2.x 文档</a></li><li><a href="http://www.css88.com/archives/7715">String.prototype.padStart(maxLength, fillString)</a></li><li><a href="http://www.cnblogs.com/wuhua1/p/6686237.html">js 里面的键盘事件对应的键码</a></li><li><a href="http://www.cnblogs.com/kidney/p/6052935.html">Vue.js双向绑定的实现原理</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;vue-js介绍&quot;&gt;&lt;a href=&quot;#vue-js介绍&quot; class=&quot;headerlink&quot; title=&quot;vue.js介绍&quot;&gt;&lt;/a&gt;vue.js介绍&lt;/h1&gt;&lt;h2 id=&quot;前端工程师的主要工作&quot;&gt;&lt;a href=&quot;#前端工程师的主要工作&quot; class=&quot;headerlink&quot; title=&quot;前端工程师的主要工作&quot;&gt;&lt;/a&gt;前端工程师的主要工作&lt;/h2&gt;&lt;h3 id=&quot;Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别&quot;&gt;&lt;a href=&quot;#Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别&quot; class=&quot;headerlink&quot; title=&quot;Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别&quot;&gt;&lt;/a&gt;Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;MVC 是后端的分层开发概念；&lt;/li&gt;
&lt;li&gt;为什么有了MVC还要有MVVM&lt;ul&gt;
&lt;li&gt;MVC主要是后端工程师关注。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;前端的主要工作&quot;&gt;&lt;a href=&quot;#前端的主要工作&quot; class=&quot;headerlink&quot; title=&quot;前端的主要工作&quot;&gt;&lt;/a&gt;前端的主要工作&lt;/h3&gt;&lt;p&gt;主要负责MVVM中的V、VM这一层；主要工作就是和界面打交道，来制作前端页面效果；&lt;/p&gt;
&lt;h2 id=&quot;框架与Vue-js&quot;&gt;&lt;a href=&quot;#框架与Vue-js&quot; class=&quot;headerlink&quot; title=&quot;框架与Vue.js&quot;&gt;&lt;/a&gt;框架与Vue.js&lt;/h2&gt;&lt;h3 id=&quot;框架和库的区别&quot;&gt;&lt;a href=&quot;#框架和库的区别&quot; class=&quot;headerlink&quot; title=&quot;框架和库的区别&quot;&gt;&lt;/a&gt;框架和库的区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node 中的 express；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;从Jquery 切换到 Zepto&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;从 EJS 切换到 art-template&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;为什么要学习流行框架&quot;&gt;&lt;a href=&quot;#为什么要学习流行框架&quot; class=&quot;headerlink&quot; title=&quot;为什么要学习流行框架&quot;&gt;&lt;/a&gt;为什么要学习流行框架&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱；&lt;ul&gt;
&lt;li&gt;企业中，使用框架，能够提高开发的效率；&lt;/li&gt;
&lt;li&gt;提高开发效率的发展历程：&lt;ul&gt;
&lt;li&gt;原生JS &lt;/li&gt;
&lt;li&gt;Jquery之类的类库 &lt;/li&gt;
&lt;li&gt;前端模板引擎 &lt;/li&gt;
&lt;li&gt;Angular.js / Vue.js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;增强自己就业时候的竞争力&lt;ul&gt;
&lt;li&gt;人无我有，人有我优&lt;/li&gt;
&lt;li&gt;你平时不忙的时候，都在干嘛？</summary>
    
    
    
    <category term="es6语言" scheme="https://jxdw.github.io/categories/es6%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="编程语言" scheme="https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【感悟】如何学习一门编程语言</title>
    <link href="https://jxdw.github.io/2020/03/25/how_to_learn_a_language/"/>
    <id>https://jxdw.github.io/2020/03/25/how_to_learn_a_language/</id>
    <published>2020-03-25T11:17:59.000Z</published>
    <updated>2020-10-24T13:31:19.906Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="https://jxdw.github.io/img/architecture/language_learn_timeline.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;&lt;img src=&quot;https://jxdw.github.io/img/architecture/language_learn_timeline.png&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="es6语言" scheme="https://jxdw.github.io/categories/es6%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="编程语言" scheme="https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>2019年度的总结</title>
    <link href="https://jxdw.github.io/2020/03/25/jishuzongjie-2019/"/>
    <id>https://jxdw.github.io/2020/03/25/jishuzongjie-2019/</id>
    <published>2020-03-25T02:35:47.000Z</published>
    <updated>2020-10-24T13:13:08.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>2019年一直在”奔跑”，鲜有时间真正沉下心来想事情。</p><a id="more"></a><p>直到这次的突发情况被困老家35天，才有时间来想过去一年、以及未来需要做的事情：<br>1.物理层的东西是我们不可控的，只能依靠有想法的企业或者产业基金去投入。<br>2.操作系统和网络类也不是我们能接触到的，只能累积经验。<br>3.我们能做的就是编程语言和中间件做积累和突破。<br><img src="https://jxdw.github.io/img/architecture/silu.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;2019年一直在”奔跑”，鲜有时间真正沉下心来想事情。&lt;/p&gt;</summary>
    
    
    
    <category term="感悟" scheme="https://jxdw.github.io/categories/%E6%84%9F%E6%82%9F/"/>
    
    
    <category term="架构知识集合" scheme="https://jxdw.github.io/tags/%E6%9E%B6%E6%9E%84%E7%9F%A5%E8%AF%86%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>【中间件client系列】阿里云oss的go client使用</title>
    <link href="https://jxdw.github.io/2019/12/20/golang-upload-file-to-alicloud/"/>
    <id>https://jxdw.github.io/2019/12/20/golang-upload-file-to-alicloud/</id>
    <published>2019-12-20T12:17:59.000Z</published>
    <updated>2020-10-24T13:21:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>golang写一些工具程序是真的方便。直接上源码：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">uuid &quot;github.com&#x2F;satori&#x2F;go.uuid&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">&quot;github.com&#x2F;aliyun&#x2F;aliyun-oss-go-sdk&#x2F;oss&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">&#x2F;&#x2F; 创建OSSClient实例。</span><br><span class="line">endPoint:&#x3D;&quot;http:&#x2F;&#x2F;oss-cn-hangzhou.aliyuncs.com&quot;;</span><br><span class="line">accessKeyID:&#x3D;&quot;申请的keyid&quot;;</span><br><span class="line">accessKeySecret:&#x3D;&quot;申请的keysecret&quot;</span><br><span class="line">client, err :&#x3D; oss.New(endPoint, accessKeyID, accessKeySecret)</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">fmt.Println(&quot;Error:&quot;, err)</span><br><span class="line">os.Exit(-1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取存储空间。</span><br><span class="line">bucket, err :&#x3D; client.Bucket(&quot;申请的bucket名&quot;)</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">fmt.Println(&quot;Error:&quot;, err)</span><br><span class="line">os.Exit(-1)</span><br><span class="line">&#125;</span><br><span class="line">u2 :&#x3D; uuid.NewV4()</span><br><span class="line">&#x2F;&#x2F;上传本地文件。</span><br><span class="line">err &#x3D; bucket.PutObjectFromFile(os.Args[1]+&quot;&#x2F;&quot;+ u2.String()+os.Args[2], os.Args[3])</span><br><span class="line">fmt.Printf(&quot;%s&quot;, &quot;https:&#x2F;&#x2F;oss-cn-hangzhou.aliyuncs.com&#x2F;申请的bucket名&#x2F;&quot;+os.Args[1]+&quot;&#x2F;&quot;+ u2.String()+os.Args[2]);</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">fmt.Println(&quot;Error:&quot;, err)</span><br><span class="line">os.Exit(-1)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;unix timestamp&quot;,time.Now().Unix())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;golang写一些工具程序是真的方便。直接上源码：&lt;/p&gt;</summary>
    
    
    
    <category term="go知识体系" scheme="https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
    
    <category term="编程语言" scheme="https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【不定期更新】centos学习资源汇总</title>
    <link href="https://jxdw.github.io/2019/12/06/centos7_learn_resource/"/>
    <id>https://jxdw.github.io/2019/12/06/centos7_learn_resource/</id>
    <published>2019-12-06T02:35:47.000Z</published>
    <updated>2020-10-24T13:44:36.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官方站点"><a href="#官方站点" class="headerlink" title="官方站点"></a>官方站点</h1><p>官方站点<a href="http://www.centos.org肯定是要知道的,所有第一手的release/">www.centos.org肯定是要知道的，所有第一手的release</a> notes都是在这个网站的。</p><h1 id="开源中国"><a href="#开源中国" class="headerlink" title="开源中国"></a>开源中国</h1><p>很多时候，没有那么多精力关注官方站点，开源中国oschina.net是不二之选。他们的编辑（或者爬虫），会去各个技术网站拉取信息。</p><h1 id="菜鸟入门必选runoob"><a href="#菜鸟入门必选runoob" class="headerlink" title="菜鸟入门必选runoob"></a>菜鸟入门必选runoob</h1><p>很多国内的程序员在学习某们技术的时候，可能最先被引导去<a href="https://www.runoob.com/%E3%80%82">https://www.runoob.com/。</a><br>其实，入门之后，就是需要搭梯子，去看看英文站点了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;官方站点&quot;&gt;&lt;a href=&quot;#官方站点&quot; class=&quot;headerlink&quot; title=&quot;官方站点&quot;&gt;&lt;/a&gt;官方站点&lt;/h1&gt;&lt;p&gt;官方站点&lt;a href=&quot;http://www.centos.org肯定是要知道的,所有第一手的release/&quot;&gt;www.</summary>
      
    
    
    
    <category term="centos知识体系" scheme="https://jxdw.github.io/categories/centos%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
    
    <category term="工具软件集合" scheme="https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>【zipkin/jaeger使用系列】jaeger v1.15.1安装、配置</title>
    <link href="https://jxdw.github.io/2019/12/01/trace-jaeger-1150-install/"/>
    <id>https://jxdw.github.io/2019/12/01/trace-jaeger-1150-install/</id>
    <published>2019-12-01T15:00:00.000Z</published>
    <updated>2020-10-22T14:21:30.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>jaeger又更新新版本了，虽然不是什么大版本，但是还是更新测试环境版本吧。</p><a id="more"></a><h1 id="官方指南和常规方法"><a href="#官方指南和常规方法" class="headerlink" title="官方指南和常规方法"></a>官方指南和常规方法</h1><p>官方文档：<a href="https://www.jaegertracing.io/docs/1.15/cli/">https://www.jaegertracing.io/docs/1.15/cli/</a><br>看了官方文档，照着去测试环境操作，没有看到自己想看到的效果(jaeger_colletor的help效果如下).说好的elasticsearch、kafka配置呢？<br><img src="https://jxdw.github.io/img/business/trace/jaeger_collector_use_case.png"></p><h1 id="help与环境变量耦合"><a href="#help与环境变量耦合" class="headerlink" title="help与环境变量耦合"></a>help与环境变量耦合</h1><h2 id="jaeger-collector使用elasticsearch为存储"><a href="#jaeger-collector使用elasticsearch为存储" class="headerlink" title="jaeger-collector使用elasticsearch为存储"></a>jaeger-collector使用elasticsearch为存储</h2><p>大胆的猜测，help命令和环境变量耦合了。输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SPAN_STORAGE_TYPE&#x3D;elasticsearch .&#x2F;jaeger-collector --help</span><br></pre></td></tr></table></figure><p>果然，输出的效果如下，真的是防不甚防啊。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-12-01 22:18:33 maxprocs: Leaving GOMAXPROCS&#x3D;4: CPU quota undefined</span><br><span class="line">Jaeger collector receives traces from Jaeger agents and runs them through a processing pipeline.</span><br><span class="line">Usage:</span><br><span class="line">  jaeger-collector [flags]</span><br><span class="line">  jaeger-collector [command]</span><br><span class="line">Available Commands:</span><br><span class="line">  docs        Generates documentation</span><br><span class="line">  env         Help about environment variables.</span><br><span class="line">  help        Help about any command</span><br><span class="line">  version     Print the version.</span><br><span class="line">Flags:</span><br><span class="line">      --admin-http-port int                                The http port for the admin server, including health check, &#x2F;metrics, etc. (default 14269)</span><br><span class="line">      --collector.grpc-port int                            The gRPC port for the collector service (default 14250)</span><br><span class="line">      --collector.grpc.tls                                 Enable TLS on the server</span><br><span class="line">      --collector.grpc.tls.cert string                     Path to a TLS Certificate file, used to identify this server to clients</span><br><span class="line">      --collector.grpc.tls.client-ca string                Path to a TLS CA (Certification Authority) file used to verify certificates presented by clients (if unset, all clients are permitted)</span><br><span class="line">      --collector.grpc.tls.client.ca string                (deprecated) see --collector.grpc.tls.client-ca</span><br><span class="line">      --collector.grpc.tls.key string                      Path to a TLS Private Key file, used to identify this server to clients</span><br><span class="line">      --collector.http-port int                            The HTTP port for the collector service (default 14268)</span><br><span class="line">      --collector.num-workers int                          The number of workers pulling items from the queue (default 50)</span><br><span class="line">      --collector.port int                                 The TChannel port for the collector service (default 14267)</span><br><span class="line">      --collector.queue-size int                           The queue size of the collector (default 2000)</span><br><span class="line">      --collector.zipkin.allowed-headers string            Comma separated list of allowed headers for the Zipkin collector service, default content-type (default &quot;content-type&quot;)</span><br><span class="line">      --collector.zipkin.allowed-origins string            Comma separated list of allowed origins for the Zipkin collector service, default accepts all (default &quot;*&quot;)</span><br><span class="line">      --collector.zipkin.http-port int                     The HTTP port for the Zipkin collector service e.g. 9411</span><br><span class="line">      --config-file string                                 Configuration file in JSON, TOML, YAML, HCL, or Java properties formats (default none). See spf13&#x2F;viper for precedence.</span><br><span class="line">      --downsampling.hashsalt string                       Salt used when hashing trace id for downsampling.</span><br><span class="line">      --downsampling.ratio float                           Ratio of spans passed to storage after downsampling (between 0 and 1), e.g ratio &#x3D; 0.3 means we are keeping 30% of spans and dropping 70% of spans; ratio &#x3D; 1.0 disables downsampling. (default 1)</span><br><span class="line">      --es-archive.bulk.actions int                        The number of requests that can be enqueued before the bulk processor decides to commit</span><br><span class="line">      --es-archive.bulk.flush-interval duration            A time.Duration after which bulk requests are committed, regardless of other thresholds. Set to zero to disable. By default, this is disabled. (default 0s)</span><br><span class="line">      --es-archive.bulk.size int                           The number of bytes that the bulk requests can take up before the bulk processor decides to commit</span><br><span class="line">      --es-archive.bulk.workers int                        The number of workers that are able to receive bulk requests and eventually commit them to Elasticsearch</span><br><span class="line">      --es-archive.create-index-templates                  Create index templates at application startup. Set to false when templates are installed manually.</span><br><span class="line">      --es-archive.enabled                                 Enable extra storage</span><br><span class="line">      --es-archive.index-prefix string                     Optional prefix of Jaeger indices. For example &quot;production&quot; creates &quot;production-jaeger-*&quot;.</span><br><span class="line">      --es-archive.max-num-spans int                       The maximum number of spans to fetch at a time per query in Elasticsearch</span><br><span class="line">      --es-archive.max-span-age duration                   The maximum lookback for spans in Elasticsearch (default 0s)</span><br><span class="line">      --es-archive.num-replicas int                        The number of replicas per index in Elasticsearch</span><br><span class="line">      --es-archive.num-shards int                          The number of shards per index in Elasticsearch</span><br><span class="line">      --es-archive.password string                         The password required by Elasticsearch</span><br><span class="line">      --es-archive.server-urls string                      The comma-separated list of Elasticsearch servers, must be full url i.e. http:&#x2F;&#x2F;localhost:9200</span><br><span class="line">      --es-archive.sniffer                                 The sniffer config for Elasticsearch; client uses sniffing process to find all nodes automatically, disable if not required</span><br><span class="line">      --es-archive.tags-as-fields.all                      (experimental) Store all span and process tags as object fields. If true .tags-as-fields.config-file is ignored. Binary tags are always stored as nested objects.</span><br><span class="line">      --es-archive.tags-as-fields.config-file string       (experimental) Optional path to a file containing tag keys which will be stored as object fields. Each key should be on a separate line.</span><br><span class="line">      --es-archive.tags-as-fields.dot-replacement string   (experimental) The character used to replace dots (&quot;.&quot;) in tag keys stored as object fields.</span><br><span class="line">      --es-archive.timeout duration                        Timeout used for queries. A Timeout of zero means no timeout (default 0s)</span><br><span class="line">      --es-archive.tls                                     Enable TLS with client certificates.</span><br><span class="line">      --es-archive.tls.ca string                           Path to TLS CA file</span><br><span class="line">      --es-archive.tls.cert string                         Path to TLS certificate file</span><br><span class="line">      --es-archive.tls.key string                          Path to TLS key file</span><br><span class="line">      --es-archive.tls.skip-host-verify                    (insecure) Skip server&#39;s certificate chain and host name verification</span><br><span class="line">      --es-archive.token-file string                       Path to a file containing bearer token. This flag also loads CA if it is specified.</span><br><span class="line">      --es-archive.use-aliases                             (experimental) Use read and write aliases for indices. Use this option with Elasticsearch rollover API. It requires an external component to create aliases before startup and then performing its management. Note that es-archive.max-span-age is not taken into the account and has to be substituted by external component managing read alias.</span><br><span class="line">      --es-archive.username string                         The username required by Elasticsearch. The basic authentication also loads CA if it is specified.</span><br><span class="line">      --es-archive.version uint                            The major Elasticsearch version. If not specified, the value will be auto-detected from Elasticsearch.</span><br><span class="line">      --es.bulk.actions int                                The number of requests that can be enqueued before the bulk processor decides to commit (default 1000)</span><br><span class="line">      --es.bulk.flush-interval duration                    A time.Duration after which bulk requests are committed, regardless of other thresholds. Set to zero to disable. By default, this is disabled. (default 200ms)</span><br><span class="line">      --es.bulk.size int                                   The number of bytes that the bulk requests can take up before the bulk processor decides to commit (default 5000000)</span><br><span class="line">      --es.bulk.workers int                                The number of workers that are able to receive bulk requests and eventually commit them to Elasticsearch (default 1)</span><br><span class="line">      --es.create-index-templates                          Create index templates at application startup. Set to false when templates are installed manually. (default true)</span><br><span class="line">      --es.index-prefix string                             Optional prefix of Jaeger indices. For example &quot;production&quot; creates &quot;production-jaeger-*&quot;.</span><br><span class="line">      --es.max-num-spans int                               The maximum number of spans to fetch at a time per query in Elasticsearch (default 10000)</span><br><span class="line">      --es.max-span-age duration                           The maximum lookback for spans in Elasticsearch (default 72h0m0s)</span><br><span class="line">      --es.num-replicas int                                The number of replicas per index in Elasticsearch (default 1)</span><br><span class="line">      --es.num-shards int                                  The number of shards per index in Elasticsearch (default 5)</span><br><span class="line">      --es.password string                                 The password required by Elasticsearch</span><br><span class="line">      --es.server-urls string                              The comma-separated list of Elasticsearch servers, must be full url i.e. http:&#x2F;&#x2F;localhost:9200 (default &quot;http:&#x2F;&#x2F;127.0.0.1:9200&quot;)</span><br><span class="line">      --es.sniffer                                         The sniffer config for Elasticsearch; client uses sniffing process to find all nodes automatically, disable if not required</span><br><span class="line">      --es.tags-as-fields.all                              (experimental) Store all span and process tags as object fields. If true .tags-as-fields.config-file is ignored. Binary tags are always stored as nested objects.</span><br><span class="line">      --es.tags-as-fields.config-file string               (experimental) Optional path to a file containing tag keys which will be stored as object fields. Each key should be on a separate line.</span><br><span class="line">      --es.tags-as-fields.dot-replacement string           (experimental) The character used to replace dots (&quot;.&quot;) in tag keys stored as object fields. (default &quot;@&quot;)</span><br><span class="line">      --es.timeout duration                                Timeout used for queries. A Timeout of zero means no timeout (default 0s)</span><br><span class="line">      --es.tls                                             Enable TLS with client certificates.</span><br><span class="line">      --es.tls.ca string                                   Path to TLS CA file</span><br><span class="line">      --es.tls.cert string                                 Path to TLS certificate file</span><br><span class="line">      --es.tls.key string                                  Path to TLS key file</span><br><span class="line">      --es.tls.skip-host-verify                            (insecure) Skip server&#39;s certificate chain and host name verification</span><br><span class="line">      --es.token-file string                               Path to a file containing bearer token. This flag also loads CA if it is specified.</span><br><span class="line">      --es.use-aliases                                     (experimental) Use read and write aliases for indices. Use this option with Elasticsearch rollover API. It requires an external component to create aliases before startup and then performing its management. Note that es.max-span-age is not taken into the account and has to be substituted by external component managing read alias.</span><br><span class="line">      --es.username string                                 The username required by Elasticsearch. The basic authentication also loads CA if it is specified.</span><br><span class="line">      --es.version uint                                    The major Elasticsearch version. If not specified, the value will be auto-detected from Elasticsearch.</span><br><span class="line">      --health-check-http-port int                         (deprecated) see --admin-http-port</span><br><span class="line">  -h, --help                                               help for jaeger-collector</span><br><span class="line">      --log-level string                                   Minimal allowed log Level. For more levels see https:&#x2F;&#x2F;github.com&#x2F;uber-go&#x2F;zap (default &quot;info&quot;)</span><br><span class="line">      --metrics-backend string                             Defines which metrics backend to use for metrics reporting: expvar, prometheus, none (default &quot;prometheus&quot;)</span><br><span class="line">      --metrics-http-route string                          Defines the route of HTTP endpoint for metrics backends that support scraping (default &quot;&#x2F;metrics&quot;)</span><br><span class="line">      --sampling.strategies-file string                    The path for the sampling strategies file in JSON format. See sampling documentation to see format of the file</span><br><span class="line">      --span-storage.type string                           (deprecated) please use SPAN_STORAGE_TYPE environment variable. Run this binary with the &#39;env&#39; command for help.</span><br><span class="line">Use &quot;jaeger-collector [command] --help&quot; for more information about a command.</span><br></pre></td></tr></table></figure><h2 id="jaeger-collector使用kafka为存储"><a href="#jaeger-collector使用kafka为存储" class="headerlink" title="jaeger-collector使用kafka为存储"></a>jaeger-collector使用kafka为存储</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SPAN_STORAGE_TYPE&#x3D;kafka .&#x2F;jaeger-collector --help</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019&#x2F;12&#x2F;01 22:31:21 maxprocs: Leaving GOMAXPROCS&#x3D;4: CPU quota undefined</span><br><span class="line">Jaeger collector receives traces from Jaeger agents and runs them through a processing pipeline.</span><br><span class="line">Usage:</span><br><span class="line">  jaeger-collector [flags]</span><br><span class="line">  jaeger-collector [command]</span><br><span class="line">Available Commands:</span><br><span class="line">  docs        Generates documentation</span><br><span class="line">  env         Help about environment variables.</span><br><span class="line">  help        Help about any command</span><br><span class="line">  version     Print the version.</span><br><span class="line">Flags:</span><br><span class="line">      --admin-http-port int                           The http port for the admin server, including health check, &#x2F;metrics, etc. (default 14269)</span><br><span class="line">      --collector.grpc-port int                       The gRPC port for the collector service (default 14250)</span><br><span class="line">      --collector.grpc.tls                            Enable TLS on the server</span><br><span class="line">      --collector.grpc.tls.cert string                Path to a TLS Certificate file, used to identify this server to clients</span><br><span class="line">      --collector.grpc.tls.client-ca string           Path to a TLS CA (Certification Authority) file used to verify certificates presented by clients (if unset, all clients are permitted)</span><br><span class="line">      --collector.grpc.tls.client.ca string           (deprecated) see --collector.grpc.tls.client-ca</span><br><span class="line">      --collector.grpc.tls.key string                 Path to a TLS Private Key file, used to identify this server to clients</span><br><span class="line">      --collector.http-port int                       The HTTP port for the collector service (default 14268)</span><br><span class="line">      --collector.num-workers int                     The number of workers pulling items from the queue (default 50)</span><br><span class="line">      --collector.port int                            The TChannel port for the collector service (default 14267)</span><br><span class="line">      --collector.queue-size int                      The queue size of the collector (default 2000)</span><br><span class="line">      --collector.zipkin.allowed-headers string       Comma separated list of allowed headers for the Zipkin collector service, default content-type (default &quot;content-type&quot;)</span><br><span class="line">      --collector.zipkin.allowed-origins string       Comma separated list of allowed origins for the Zipkin collector service, default accepts all (default &quot;*&quot;)</span><br><span class="line">      --collector.zipkin.http-port int                The HTTP port for the Zipkin collector service e.g. 9411</span><br><span class="line">      --config-file string                            Configuration file in JSON, TOML, YAML, HCL, or Java properties formats (default none). See spf13&#x2F;viper for precedence.</span><br><span class="line">      --downsampling.hashsalt string                  Salt used when hashing trace id for downsampling.</span><br><span class="line">      --downsampling.ratio float                      Ratio of spans passed to storage after downsampling (between 0 and 1), e.g ratio &#x3D; 0.3 means we are keeping 30% of spans and dropping 70% of spans; ratio &#x3D; 1.0 disables downsampling. (default 1)</span><br><span class="line">      --health-check-http-port int                    (deprecated) see --admin-http-port</span><br><span class="line">  -h, --help                                          help for jaeger-collector</span><br><span class="line">      --kafka.producer.authentication string          Authentication type used to authenticate with kafka cluster. e.g. none, kerberos, tls (default &quot;none&quot;)</span><br><span class="line">      --kafka.producer.brokers string                 The comma-separated list of kafka brokers. i.e. &#39;127.0.0.1:9092,0.0.0:1234&#39; (default &quot;127.0.0.1:9092&quot;)</span><br><span class="line">      --kafka.producer.compression string             (experimental) Type of compression (none, gzip, snappy, lz4, zstd) to use on messages (default &quot;none&quot;)</span><br><span class="line">      --kafka.producer.compression-level int          (experimental) compression level to use on messages. gzip &#x3D; 1-9 (default &#x3D; 6), snappy &#x3D; none, lz4 &#x3D; 1-17 (default &#x3D; 9), zstd &#x3D; -131072 - 22 (default &#x3D; 3)</span><br><span class="line">      --kafka.producer.encoding string                Encoding of spans (&quot;json&quot; or &quot;protobuf&quot;) sent to kafka. (default &quot;protobuf&quot;)</span><br><span class="line">      --kafka.producer.kerberos.config-file string    Path to Kerberos configuration. i.e &#x2F;etc&#x2F;krb5.conf (default &quot;&#x2F;etc&#x2F;krb5.conf&quot;)</span><br><span class="line">      --kafka.producer.kerberos.keytab-file string    Path to keytab file. i.e &#x2F;etc&#x2F;security&#x2F;kafka.keytab (default &quot;&#x2F;etc&#x2F;security&#x2F;kafka.keytab&quot;)</span><br><span class="line">      --kafka.producer.kerberos.password string       The Kerberos password used for authenticate with KDC</span><br><span class="line">      --kafka.producer.kerberos.realm string          Kerberos realm</span><br><span class="line">      --kafka.producer.kerberos.service-name string   Kerberos service name (default &quot;kafka&quot;)</span><br><span class="line">      --kafka.producer.kerberos.use-keytab            Use of keytab instead of password, if this is true, keytab file will be used instead of password</span><br><span class="line">      --kafka.producer.kerberos.username string       The Kerberos username used for authenticate with KDC</span><br><span class="line">      --kafka.producer.protocol-version string        Kafka protocol version - must be supported by kafka server</span><br><span class="line">      --kafka.producer.required-acks string           (experimental) Required kafka broker acknowledgement. i.e. noack, local, all (default &quot;local&quot;)</span><br><span class="line">      --kafka.producer.tls.ca string                  Path to the TLS CA for the Kafka connection</span><br><span class="line">      --kafka.producer.tls.cert string                Path to the TLS Certificate for the Kafka connection</span><br><span class="line">      --kafka.producer.tls.key string                 Path to the TLS Key for the Kafka connection</span><br><span class="line">      --kafka.producer.topic string                   The name of the kafka topic (default &quot;jaeger-spans&quot;)</span><br><span class="line">      --log-level string                              Minimal allowed log Level. For more levels see https:&#x2F;&#x2F;github.com&#x2F;uber-go&#x2F;zap (default &quot;info&quot;)</span><br><span class="line">      --metrics-backend string                        Defines which metrics backend to use for metrics reporting: expvar, prometheus, none (default &quot;prometheus&quot;)</span><br><span class="line">      --metrics-http-route string                     Defines the route of HTTP endpoint for metrics backends that support scraping (default &quot;&#x2F;metrics&quot;)</span><br><span class="line">      --sampling.strategies-file string               The path for the sampling strategies file in JSON format. See sampling documentation to see format of the file</span><br><span class="line">      --span-storage.type string                      (deprecated) please use SPAN_STORAGE_TYPE environment variable. Run this binary with the &#39;env&#39; command for help.</span><br><span class="line">Use &quot;jaeger-collector [command] --help&quot; for more information about a command.</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;jaeger又更新新版本了，虽然不是什么大版本，但是还是更新测试环境版本吧。&lt;/p&gt;</summary>
    
    
    
    <category term="zipkin/jaeger知识体系" scheme="https://jxdw.github.io/categories/zipkin-jaeger%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
    
    <category term="业务开发所需中间件" scheme="https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>【prometheus使用系列】Prometheus监控rabbitmq3.8.0</title>
    <link href="https://jxdw.github.io/2019/10/07/prometheus_monitor_rabbitmq/"/>
    <id>https://jxdw.github.io/2019/10/07/prometheus_monitor_rabbitmq/</id>
    <published>2019-10-07T04:46:48.000Z</published>
    <updated>2020-10-22T14:33:18.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="官方介绍"><a href="#官方介绍" class="headerlink" title="官方介绍"></a>官方介绍</h2><p>链接: <a href="https://www.rabbitmq.com/prometheus.html#overview-prometheus">https://www.rabbitmq.com/prometheus.html#overview-prometheus</a></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">As of 3.8.0, RabbitMQ ships with built-in Prometheus &amp; Grafana support.</span><br><span class="line">Support for Prometheus metric collector ships in the rabbitmq_prometheus plugin. The plugin exposes all RabbitMQ metrics on a dedicated TCP port, in Prometheus text format.</span><br><span class="line">These metrics provide a deep insights into the state of RabbitMQ nodes and the runtime. They make reasoning about the behaviour of RabbitMQ, applications that use it and various infrastructure elements a lot more informed.</span><br></pre></td></tr></table></figure><h2 id="版本依赖"><a href="#版本依赖" class="headerlink" title="版本依赖"></a>版本依赖</h2><p><img src="https://jxdw.github.io/img/business/rabbitmq/rabbitmq_3.8.0_changelog.png"></p><p><img src="https://jxdw.github.io/img/business/rabbitmq/rabbitmq_3.8.0_required_erlang_version.png"></p><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><h2 id="安装erlang"><a href="#安装erlang" class="headerlink" title="安装erlang"></a>安装erlang</h2><p>vim /etc/yum.repos.d/rabbitmq-erlang.repo</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[rabbitmq-erlang]</span><br><span class="line">name&#x3D;rabbitmq-erlang</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;dl.bintray.com&#x2F;rabbitmq-erlang&#x2F;rpm&#x2F;erlang&#x2F;22&#x2F;el&#x2F;7</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;dl.bintray.com&#x2F;rabbitmq&#x2F;Keys&#x2F;rabbitmq-release-signing-key.asc</span><br><span class="line">repo_gpgcheck&#x3D;0</span><br><span class="line">enabled&#x3D;1</span><br></pre></td></tr></table></figure><p>输入 命令，安装erlang。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -import https:&#x2F;&#x2F;dl.bintray.com&#x2F;rabbitmq&#x2F;Keys&#x2F;rabbitmq-release-signing-key.asc</span><br><span class="line">yum install  erlang</span><br><span class="line">yum install rabbitmq-server</span><br></pre></td></tr></table></figure><h2 id="安装rabbitmq-server"><a href="#安装rabbitmq-server" class="headerlink" title="安装rabbitmq-server"></a>安装rabbitmq-server</h2><p>vim /etc/yum.repos.d/rabbitmq.repo</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[bintray-rabbitmq-server]</span><br><span class="line">name&#x3D;bintray-rabbitmq-rpm</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;dl.bintray.com&#x2F;rabbitmq&#x2F;rpm&#x2F;rabbitmq-server&#x2F;v3.8.x&#x2F;el&#x2F;7&#x2F;</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">repo_gpgcheck&#x3D;0</span><br><span class="line">enabled&#x3D;1</span><br></pre></td></tr></table></figure><h2 id="修改配置，并授权"><a href="#修改配置，并授权" class="headerlink" title="修改配置，并授权"></a>修改配置，并授权</h2><p>vim /etc/rabbitmq/rabbitmq.conf</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#log.dir &#x3D; &#x2F;data&#x2F;rabbitmq&#x2F;log</span><br><span class="line">log.file &#x3D; rabbit.log</span><br><span class="line"></span><br><span class="line">log.file.rotation.date&#x3D;$D0</span><br><span class="line">log.file.rotation.size&#x3D;0</span><br></pre></td></tr></table></figure><p>vim /etc/rabbitmq/rabbitmq-env.conf</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RABBITMQ_MNESIA_BASE&#x3D;&#x2F;data&#x2F;rabbitmq&#x2F;mnesia</span><br><span class="line">RABBITMQ_LOG_BASE&#x3D;&#x2F;data&#x2F;rabbitmq&#x2F;log</span><br></pre></td></tr></table></figure><p>授权给rabbitmq用户。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown -R rabbitmq:rabbitmq &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;</span><br><span class="line">mkdir -p data&#x2F;rabbitmq&#x2F;log</span><br><span class="line">mkdir -p &#x2F;data&#x2F;rabbitmq&#x2F;mnesia</span><br><span class="line">chown -R rabbitmq:rabbitmq &#x2F;data&#x2F;rabbitmq&#x2F;</span><br></pre></td></tr></table></figure><h2 id="启动服务，并启动插件"><a href="#启动服务，并启动插件" class="headerlink" title="启动服务，并启动插件"></a>启动服务，并启动插件</h2><p>1.启动rabbitmq-server服务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start rabbitmq-server</span><br><span class="line">systemctl status rabbitmq-server</span><br></pre></td></tr></table></figure><p>2.启动management插件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><p>3.admin用户授权</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqctl add_user admin admin</span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br><span class="line">rabbitmqctl set_permissions -p &#x2F; admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line">rabbitmqctl status</span><br></pre></td></tr></table></figure><p>4.查看插件<br>输入命令:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins list</span><br></pre></td></tr></table></figure><p><img src="https://jxdw.github.io/img/business/rabbitmq/rabbitmq_3.8.0_plugin_list.png"></p><p>5.启动rabbitmq_prometheus插件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_prometheus</span><br></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><h2 id="命令行输入rabbitmqctl-status"><a href="#命令行输入rabbitmqctl-status" class="headerlink" title="命令行输入rabbitmqctl status"></a>命令行输入rabbitmqctl status</h2><p><img src="https://jxdw.github.io/img/monitor/prometheus_monitor_rabbitmq_1.png"></p><p><img src="https://jxdw.github.io/img/monitor/prometheus_monitor_rabbitmq_2.png"></p><h2 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h2><p><img src="https://jxdw.github.io/img/monitor/prometheus_monitor_rabbitmq_3.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;h2 id=&quot;官方介绍&quot;&gt;&lt;a href=&quot;#官方介绍&quot; class=&quot;headerlink&quot; title=&quot;官方介绍&quot;&gt;&lt;/a&gt;官方介绍&lt;/h2&gt;&lt;p&gt;链接: &lt;a href=&quot;https://www.rabbitmq.com/prometheus.html#overview-prometheus&quot;&gt;https://www.rabbitmq.com/prometheus.html#overview-prometheus&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="prometheus知识体系" scheme="https://jxdw.github.io/categories/prometheus%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
    
    <category term="业务开发所需中间件" scheme="https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>【zipkin/jaeger使用系列】jaeger v1.14.0安装、配置</title>
    <link href="https://jxdw.github.io/2019/10/01/trace-jaeger-1140-install/"/>
    <id>https://jxdw.github.io/2019/10/01/trace-jaeger-1140-install/</id>
    <published>2019-10-01T11:00:00.000Z</published>
    <updated>2020-10-22T14:21:25.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jaeger项目背景和整体架构"><a href="#Jaeger项目背景和整体架构" class="headerlink" title="Jaeger项目背景和整体架构"></a>Jaeger项目背景和整体架构</h1><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>Jaeger项目是一套受到Dapper与OpenZipkin启发构建而成的分布式跟踪平台，由Uber公司最初以开源方式公布，随后加入了云原生计算基金会。该项目主要用于:监控并诊断基于微服务架构的分布式系统，具体涵盖：</p><ul><li>分布式上下文传播</li><li>分布式事务监控</li><li>根本原因分析</li><li>服务依赖关系分析</li><li>性能/延迟优化</li></ul><a id="more"></a><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p><img src="https://jxdw.github.io/img/business/trace/jaeger-architecture.png"></p><h1 id="下载安装和配置"><a href="#下载安装和配置" class="headerlink" title="下载安装和配置"></a>下载安装和配置</h1><h2 id="安装前置条件"><a href="#安装前置条件" class="headerlink" title="安装前置条件"></a>安装前置条件</h2><ul><li>已经安装elasticsearch集群</li><li>安装好prometheus监控</li></ul><h2 id="从github下载二进制包"><a href="#从github下载二进制包" class="headerlink" title="从github下载二进制包"></a>从github下载二进制包</h2><p>下载地址：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;jaegertracing&#x2F;jaeger&#x2F;releases&#x2F;download&#x2F;v1.14.0&#x2F;jaeger-1.14.0-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><h2 id="解压和配置"><a href="#解压和配置" class="headerlink" title="解压和配置"></a>解压和配置</h2><h3 id="编写collector启动脚本start-colloector-sh"><a href="#编写collector启动脚本start-colloector-sh" class="headerlink" title="编写collector启动脚本start-colloector.sh"></a>编写collector启动脚本start-colloector.sh</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export SPAN_STORAGE_TYPE&#x3D;elasticsearch</span><br><span class="line">nohup .&#x2F;jaeger-collector  --es.server-urls http:&#x2F;&#x2F;elasticsearch节点1的ip和端口&#x2F;,http:&#x2F;&#x2F;elasticsearch节点2的ip和端口&#x2F;,http&#x3D;:&#x2F;&#x2F;elasticsearch节点3的ip和端口&#x2F;  --log-level&#x3D;debug &gt; collector.log  2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="编写query启动脚本start-query-sh"><a href="#编写query启动脚本start-query-sh" class="headerlink" title="编写query启动脚本start-query.sh"></a>编写query启动脚本start-query.sh</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export SPAN_STORAGE_TYPE&#x3D;elasticsearch</span><br><span class="line">nohup .&#x2F;jaeger-query --span-storage.type&#x3D;elasticsearch --es.server-urls&#x3D;http:&#x2F;&#x2F;elasticsearch节点1的ip和端口&#x2F;,http:&#x2F;&#x2F;elasticsearch节点2的ip和端口&#x2F;,http&#x3D;:&#x2F;&#x2F;elasticsearch节点3的ip和端口&#x2F;   &gt; query.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="编写agent启动脚本start-agent-sh"><a href="#编写agent启动脚本start-agent-sh" class="headerlink" title="编写agent启动脚本start-agent.sh"></a>编写agent启动脚本start-agent.sh</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export SPAN_STORAGE_TYPE&#x3D;elasticsearch</span><br><span class="line">nohup  .&#x2F;jaeger-agent  --collector.host-port&#x3D;192.168.172.9:14267 --discovery.min-peers&#x3D;1 --log-level&#x3D;debug &gt; agent.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="配置prometheus"><a href="#配置prometheus" class="headerlink" title="配置prometheus"></a>配置prometheus</h3><p>配置监听14269端口</p><h1 id="启动效果"><a href="#启动效果" class="headerlink" title="启动效果"></a>启动效果</h1><p><img src="https://jxdw.github.io/img/business/trace/jaeger-ui.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Jaeger项目背景和整体架构&quot;&gt;&lt;a href=&quot;#Jaeger项目背景和整体架构&quot; class=&quot;headerlink&quot; title=&quot;Jaeger项目背景和整体架构&quot;&gt;&lt;/a&gt;Jaeger项目背景和整体架构&lt;/h1&gt;&lt;h2 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot; title=&quot;项目背景&quot;&gt;&lt;/a&gt;项目背景&lt;/h2&gt;&lt;p&gt;Jaeger项目是一套受到Dapper与OpenZipkin启发构建而成的分布式跟踪平台，由Uber公司最初以开源方式公布，随后加入了云原生计算基金会。该项目主要用于:监控并诊断基于微服务架构的分布式系统，具体涵盖：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式上下文传播&lt;/li&gt;
&lt;li&gt;分布式事务监控&lt;/li&gt;
&lt;li&gt;根本原因分析&lt;/li&gt;
&lt;li&gt;服务依赖关系分析&lt;/li&gt;
&lt;li&gt;性能/延迟优化&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="zipkin/jaeger知识体系" scheme="https://jxdw.github.io/categories/zipkin-jaeger%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
    
    <category term="业务开发所需中间件" scheme="https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>【go底层实现系列】go语言运行时的工作过程</title>
    <link href="https://jxdw.github.io/2019/08/21/go_run_principle/"/>
    <id>https://jxdw.github.io/2019/08/21/go_run_principle/</id>
    <published>2019-08-21T10:41:34.000Z</published>
    <updated>2020-10-22T14:29:10.350Z</updated>
    
    <content type="html"><![CDATA[<p>上截图。</p><a id="more"></a><p><img src="https://jxdw.github.io/img/program/go/how_main_run.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上截图。&lt;/p&gt;</summary>
    
    
    
    <category term="go知识体系" scheme="https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
    
    <category term="编程语言" scheme="https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【redis使用系列】redis的go client写入百万个测试数据</title>
    <link href="https://jxdw.github.io/2019/08/21/redis_golang_client_insert_billion_data/"/>
    <id>https://jxdw.github.io/2019/08/21/redis_golang_client_insert_billion_data/</id>
    <published>2019-08-21T09:02:30.000Z</published>
    <updated>2020-10-22T14:34:58.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近为了做实验，需要redis中有百万的数据。于是乎，想到用redis的go client。</p><a id="more"></a><h2 id="直接使用string"><a href="#直接使用string" class="headerlink" title="直接使用string"></a>直接使用string</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;github.com&#x2F;go-redis&#x2F;redis&quot;</span><br><span class="line">&quot;strconv&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line">var redisClient *redis.Client</span><br><span class="line">func init()  &#123;</span><br><span class="line">var err error</span><br><span class="line">redisClient&#x3D;redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr:&quot;192.168.172.14:6379&quot;,</span><br><span class="line">Password:&quot;&quot;,</span><br><span class="line">DB:0,</span><br><span class="line">PoolSize: 100,</span><br><span class="line">&#x2F;&#x2F;这个参数必须配置，否则会报超时的错</span><br><span class="line">WriteTimeout: 300*time.Second,</span><br><span class="line">ReadTimeout: 300*time.Second,</span><br><span class="line">&#125;)</span><br><span class="line">pong,err:&#x3D;redisClient.Ping().Result()</span><br><span class="line">if err!&#x3D;nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;connect result:&quot;,pong,err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main()&#123;</span><br><span class="line">fmt.Println(time.Now().Format(&quot;2006-01-02 15:04:00.000&quot;))</span><br><span class="line">pipe:&#x3D;redisClient.Pipeline()</span><br><span class="line">for i:&#x3D;0;i&lt;1000000;i++ &#123;</span><br><span class="line">pipe.Set(&quot;test_&quot;+strconv.Itoa(i),&quot;value_&quot;+strconv.Itoa(i),time.Hour)</span><br><span class="line">&#125;</span><br><span class="line">_, err :&#x3D; pipe.Exec()</span><br><span class="line">if err!&#x3D;nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(time.Now().Format(&quot;2006-01-02 15:04:00.000&quot;))</span><br><span class="line">fmt.Println(redisClient.Dbsize().Val())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用set集合"><a href="#用set集合" class="headerlink" title="用set集合"></a>用set集合</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;github.com&#x2F;go-redis&#x2F;redis&quot;</span><br><span class="line">&quot;strconv&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line">var redisClient *redis.Client</span><br><span class="line">func init()  &#123;</span><br><span class="line">var err error</span><br><span class="line">redisClient&#x3D;redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr:&quot;127.0.0.1:6379&quot;,</span><br><span class="line">Password:&quot;&quot;,</span><br><span class="line">DB:0,</span><br><span class="line">PoolSize: 100,</span><br><span class="line">WriteTimeout: 300*time.Second,</span><br><span class="line">ReadTimeout: 300*time.Second,</span><br><span class="line">&#125;)</span><br><span class="line">pong,err:&#x3D;redisClient.Ping().Result()</span><br><span class="line">if err!&#x3D;nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;connect result:&quot;,pong,err)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main()&#123;</span><br><span class="line">fmt.Println(time.Now().Format(&quot;2006-01-02 15:04:00.000&quot;))</span><br><span class="line">pipe:&#x3D;redisClient.Pipeline()</span><br><span class="line">for i:&#x3D;0;i&lt;2000000;i++ &#123;</span><br><span class="line">pipe.SAdd(&quot;test&quot;,&quot;value_&quot;+strconv.Itoa(i))</span><br><span class="line">&#125;</span><br><span class="line">_, err :&#x3D; pipe.Exec()</span><br><span class="line">if err!&#x3D;nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(time.Now().Format(&quot;2006-01-02 15:04:00.000&quot;))</span><br><span class="line">fmt.Println(redisClient.SCard(&quot;test&quot;).Val())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;最近为了做实验，需要redis中有百万的数据。于是乎，想到用redis的go client。&lt;/p&gt;</summary>
    
    
    
    <category term="redis知识体系" scheme="https://jxdw.github.io/categories/redis%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
    
    <category term="业务开发所需中间件" scheme="https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>【zipkin/jaeger使用系列】dubbo v2.7.3使用zipkin进行链路监控</title>
    <link href="https://jxdw.github.io/2019/08/11/apache_dubbo_zipkin_merge/"/>
    <id>https://jxdw.github.io/2019/08/11/apache_dubbo_zipkin_merge/</id>
    <published>2019-08-11T03:02:34.000Z</published>
    <updated>2020-10-22T14:21:05.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本文背景"><a href="#本文背景" class="headerlink" title="本文背景"></a>本文背景</h1><p>因为:<br>1.dubbo已经从apache毕业，而zipkin官方的brave-instrumentation-dubbo-rpc的5.6版本支持的dubbo版本是2.6.6版本、且对2.7.3版本支持不太友好(2.6.6这个版本是未毕业前的版本，不太喜欢），只能把brave-instrumentation-dubbo-rpc抠出来，用以支撑2.7.3版本。<br><br>2.dubbo官方提供的例子还是xml配置版本，现在都9102年了，谁还用XML配置版本。<br><br>因为以上两点，有了此文。</p><a id="more"></a><h1 id="provider方工程代码"><a href="#provider方工程代码" class="headerlink" title="provider方工程代码"></a>provider方工程代码</h1><h2 id="添加pom依赖"><a href="#添加pom依赖" class="headerlink" title="添加pom依赖"></a>添加pom依赖</h2><p>1.brave对dubbo的集成:brave-instrumentation-dubbo-rpc<br>2.brave的spring bean支持:brave-spring-beans<br>3.在SLF4J的MDC(Mapped Diagnostic Context) 中支持 traceId 和 spanId<br>4.使用okhttp3作为 reporter:zipkin-sender-okhttp3<br>当然，最好是同时添加bom，做好版本控制。<br><img src="https://jxdw.github.io/img/devops/zipkin_pom.png"></p><h2 id="将TracingFilter扣出来进行改造"><a href="#将TracingFilter扣出来进行改造" class="headerlink" title="将TracingFilter扣出来进行改造"></a>将TracingFilter扣出来进行改造</h2><p>将brave-instrumentation-dubbo-rpc的5.6.6版本的TracingFilter抠出来进行改造，即实现org.apache.dubbo.rpc.Fiter的invoke方法。<br>brave-instrumentation-dubbo-rpc的5.6.6版本的TracingFilter实现的是com.alibaba.dubbo.rpc.Fiter。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.youxia.userinfo.config;</span><br><span class="line"></span><br><span class="line">import brave.Span;</span><br><span class="line">import brave.Tracer;</span><br><span class="line">import brave.Tracing;</span><br><span class="line">import brave.internal.Platform;</span><br><span class="line">import brave.propagation.Propagation;</span><br><span class="line">import brave.propagation.TraceContext;</span><br><span class="line">import brave.propagation.TraceContextOrSamplingFlags;</span><br><span class="line"></span><br><span class="line">import com.alibaba.dubbo.common.Constants;</span><br><span class="line">import com.alibaba.dubbo.remoting.exchange.ResponseCallback;</span><br><span class="line">import com.alibaba.dubbo.rpc.protocol.dubbo.FutureAdapter;</span><br><span class="line">import org.apache.dubbo.common.extension.Activate;</span><br><span class="line">import org.apache.dubbo.rpc.*;</span><br><span class="line"></span><br><span class="line">import org.apache.dubbo.rpc.support.RpcUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line">@Activate(group &#x3D; &#123;Constants.PROVIDER, Constants.CONSUMER&#125;, value &#x3D; &quot;tracing&quot;)</span><br><span class="line">public final class TracingFilter implements Filter &#123;</span><br><span class="line"></span><br><span class="line">    Tracer tracer;</span><br><span class="line">    TraceContext.Extractor&lt;Map&lt;String, String&gt;&gt; extractor;</span><br><span class="line">    TraceContext.Injector&lt;Map&lt;String, String&gt;&gt; injector;</span><br><span class="line">    volatile boolean isInit &#x3D; false;</span><br><span class="line"></span><br><span class="line">    public void setTracing(Tracing tracing) &#123;</span><br><span class="line">        tracer &#x3D; tracing.tracer();</span><br><span class="line">        extractor &#x3D; tracing.propagation().extractor(GETTER);</span><br><span class="line">        injector &#x3D; tracing.propagation().injector(SETTER);</span><br><span class="line">        isInit &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    static void parseRemoteAddress(RpcContext rpcContext, Span span) &#123;</span><br><span class="line">        InetSocketAddress remoteAddress &#x3D; rpcContext.getRemoteAddress();</span><br><span class="line">        if (remoteAddress &#x3D;&#x3D; null) return;</span><br><span class="line">        span.remoteIpAndPort(Platform.get().getHostString(remoteAddress), remoteAddress.getPort());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static void onError(Throwable error, Span span) &#123;</span><br><span class="line">        span.error(error);</span><br><span class="line">        if (error instanceof RpcException) &#123;</span><br><span class="line">            span.tag(&quot;userinfo.error_code&quot;, Integer.toString(((RpcException) error).getCode()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static final Propagation.Getter&lt;Map&lt;String, String&gt;, String&gt; GETTER &#x3D;</span><br><span class="line">            new Propagation.Getter&lt;Map&lt;String, String&gt;, String&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public String get(Map&lt;String, String&gt; carrier, String key) &#123;</span><br><span class="line">                    return carrier.get(key);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public String toString() &#123;</span><br><span class="line">                    return &quot;Map::get&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">    static final Propagation.Setter&lt;Map&lt;String, String&gt;, String&gt; SETTER &#x3D;</span><br><span class="line">            new Propagation.Setter&lt;Map&lt;String, String&gt;, String&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void put(Map&lt;String, String&gt; carrier, String key, String value) &#123;</span><br><span class="line">                    carrier.put(key, value);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public String toString() &#123;</span><br><span class="line">                    return &quot;Map::set&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Result invoke(Invoker&lt;?&gt; invoker, Invocation invocation) throws RpcException &#123;</span><br><span class="line">        if (isInit &#x3D;&#x3D; false) return invoker.invoke(invocation);</span><br><span class="line"></span><br><span class="line">        RpcContext rpcContext &#x3D; RpcContext.getContext();</span><br><span class="line">        Span.Kind kind &#x3D; rpcContext.isProviderSide() ? Span.Kind.SERVER : Span.Kind.CLIENT;</span><br><span class="line">        final Span span;</span><br><span class="line">        if (kind.equals(Span.Kind.CLIENT)) &#123;</span><br><span class="line">            span &#x3D; tracer.nextSpan();</span><br><span class="line">            injector.inject(span.context(), invocation.getAttachments());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            TraceContextOrSamplingFlags extracted &#x3D; extractor.extract(invocation.getAttachments());</span><br><span class="line">            span &#x3D; extracted.context() !&#x3D; null</span><br><span class="line">                    ? tracer.joinSpan(extracted.context())</span><br><span class="line">                    : tracer.nextSpan(extracted);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!span.isNoop()) &#123;</span><br><span class="line">            span.kind(kind);</span><br><span class="line">            String service &#x3D; invoker.getInterface().getSimpleName();</span><br><span class="line">            String method &#x3D;RpcUtils.getMethodName(invocation);</span><br><span class="line">            span.name(service + &quot;&#x2F;&quot; + method);</span><br><span class="line">            parseRemoteAddress(rpcContext, span);</span><br><span class="line">            span.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        boolean isOneway &#x3D; false, deferFinish &#x3D; false;</span><br><span class="line">        try (Tracer.SpanInScope scope &#x3D; tracer.withSpanInScope(span)) &#123;</span><br><span class="line">            Result result &#x3D; invoker.invoke(invocation);</span><br><span class="line">            if (result.hasException()) &#123;</span><br><span class="line">                onError(result.getException(), span);</span><br><span class="line">            &#125;</span><br><span class="line">            isOneway &#x3D; RpcUtils.isOneway(invoker.getUrl(), invocation);</span><br><span class="line">            Future&lt;Object&gt; future &#x3D; rpcContext.getFuture(); &#x2F;&#x2F; the case on async client invocation</span><br><span class="line">            if (future instanceof FutureAdapter) &#123;</span><br><span class="line">                deferFinish &#x3D; true;</span><br><span class="line">                ((FutureAdapter) future).getFuture().setCallback(new TracingFilter.FinishSpanCallback(span));</span><br><span class="line">            &#125;</span><br><span class="line">            return result;</span><br><span class="line">        &#125; catch (Error | RuntimeException e) &#123;</span><br><span class="line">            onError(e, span);</span><br><span class="line">            throw e;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (isOneway) &#123;</span><br><span class="line">                span.flush();</span><br><span class="line">            &#125; else if (!deferFinish) &#123;</span><br><span class="line">                span.finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static final class FinishSpanCallback implements ResponseCallback &#123;</span><br><span class="line">        final Span span;</span><br><span class="line"></span><br><span class="line">        FinishSpanCallback(Span span) &#123;</span><br><span class="line">            this.span &#x3D; span;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override public void done(Object response) &#123;</span><br><span class="line">            span.finish();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override public void caught(Throwable exception) &#123;</span><br><span class="line">            onError(exception, span);</span><br><span class="line">            span.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在resource目录增加-META-INF-dubbo-org-apache-dubbo-rpc-Filter文件"><a href="#在resource目录增加-META-INF-dubbo-org-apache-dubbo-rpc-Filter文件" class="headerlink" title="在resource目录增加/META-INF/dubbo/org.apache.dubbo.rpc.Filter文件"></a>在resource目录增加/META-INF/dubbo/org.apache.dubbo.rpc.Filter文件</h2><p>org.apache.dubbo.rpc.Filter文件的内容如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tracing&#x3D;com.youxia.userinfo.config.TracingFilter</span><br></pre></td></tr></table></figure><h2 id="配置zipkin客户端"><a href="#配置zipkin客户端" class="headerlink" title="配置zipkin客户端"></a>配置zipkin客户端</h2><p>ZipkinConfig内容如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.youxia.userinfo.config;</span><br><span class="line"></span><br><span class="line">import brave.context.slf4j.MDCScopeDecorator;</span><br><span class="line">import brave.propagation.CurrentTraceContext;</span><br><span class="line">import brave.spring.beans.CurrentTraceContextFactoryBean;</span><br><span class="line">import brave.spring.beans.TracingFactoryBean;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import zipkin2.codec.SpanBytesEncoder;</span><br><span class="line">import zipkin2.reporter.AsyncReporter;</span><br><span class="line">import zipkin2.reporter.Sender;</span><br><span class="line">import zipkin2.reporter.beans.AsyncReporterFactoryBean;</span><br><span class="line">import zipkin2.reporter.okhttp3.OkHttpSender;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class ZipkinConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;zipkin.server.url&#125;&quot;)</span><br><span class="line">    private String ZipkinServerUrl;</span><br><span class="line"></span><br><span class="line">    @Bean(&quot;okHttpSender&quot;)</span><br><span class="line">    public Sender okHttpSender() &#123;</span><br><span class="line">        Sender sender&#x3D; OkHttpSender.create(ZipkinServerUrl);</span><br><span class="line">        return sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(&quot;reporter&quot;)</span><br><span class="line">    public AsyncReporter getAsyncReporter()&#123;</span><br><span class="line">        AsyncReporter asyncReporter&#x3D;AsyncReporter.builder(okHttpSender()).closeTimeout(50000, TimeUnit.MILLISECONDS).build(SpanBytesEncoder.JSON_V2);</span><br><span class="line">        return asyncReporter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public AsyncReporterFactoryBean reporter(@Qualifier(&quot;okHttpSender&quot;)OkHttpSender sender)&#123;</span><br><span class="line">        AsyncReporterFactoryBean asyncReporterFactoryBean &#x3D; new AsyncReporterFactoryBean();</span><br><span class="line">        asyncReporterFactoryBean.setSender(sender);</span><br><span class="line">        asyncReporterFactoryBean.setCloseTimeout(3000);</span><br><span class="line">        return asyncReporterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public TracingFactoryBean getTracingBean(@Qualifier(&quot;reporter&quot;) AsyncReporter reporter)&#123;</span><br><span class="line">        TracingFactoryBean tracingFactoryBean&#x3D;new TracingFactoryBean();</span><br><span class="line">        tracingFactoryBean.setLocalServiceName(&quot;userinfo-service&quot;);</span><br><span class="line">        CurrentTraceContextFactoryBean currentTraceContextFactoryBean &#x3D; new CurrentTraceContextFactoryBean();</span><br><span class="line">        CurrentTraceContext.ScopeDecorator scopeDecorator &#x3D; MDCScopeDecorator.create();</span><br><span class="line">        currentTraceContextFactoryBean.setScopeDecorators(Arrays.asList(scopeDecorator));</span><br><span class="line">        tracingFactoryBean.setCurrentTraceContext(currentTraceContextFactoryBean.getObject());</span><br><span class="line">        tracingFactoryBean.setSpanReporter(reporter);</span><br><span class="line">        return tracingFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dubbo注解文件添加filter"><a href="#dubbo注解文件添加filter" class="headerlink" title="dubbo注解文件添加filter"></a>dubbo注解文件添加filter</h2><p>业务实现类添加filter：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.youxia.userinfo.service.impl;</span><br><span class="line"></span><br><span class="line">import com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line">import com.youxia.userinfo.domain.User;</span><br><span class="line">import com.youxia.userinfo.service.UserService;</span><br><span class="line"></span><br><span class="line">@Service(filter &#x3D; &#123;&quot;tracing&quot;&#125;)</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public User saveUser(User user) &#123;</span><br><span class="line">        user.setUserId(1);</span><br><span class="line">        user.setUserName(user.getUserName());</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">        return  user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="provider配置文件"><a href="#provider配置文件" class="headerlink" title="provider配置文件"></a>provider配置文件</h2><p>完整的application.properties:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.application.name&#x3D;UserInfoService</span><br><span class="line">server.address&#x3D;10.3.20.57</span><br><span class="line">server.port&#x3D;28081</span><br><span class="line"></span><br><span class="line">dubbo.registry.address&#x3D;redis:&#x2F;&#x2F;192.168.172.4:6380</span><br><span class="line">dubbo.protocol.name&#x3D;dubbo</span><br><span class="line">dubbo.protocol.port&#x3D;28080</span><br><span class="line">dubbo.scan.base-packages&#x3D;com.youxia.userinfo.service</span><br><span class="line">dubbo.application.qos.enable&#x3D;true</span><br><span class="line"></span><br><span class="line">zipkin.server.url&#x3D;http:&#x2F;&#x2F;192.168.172.6:9411&#x2F;api&#x2F;v2&#x2F;spans</span><br></pre></td></tr></table></figure><h1 id="consumer工程代码"><a href="#consumer工程代码" class="headerlink" title="consumer工程代码"></a>consumer工程代码</h1><h2 id="业务逻辑处理类代码"><a href="#业务逻辑处理类代码" class="headerlink" title="业务逻辑处理类代码"></a>业务逻辑处理类代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.youxia.service.user;</span><br><span class="line"></span><br><span class="line">import com.youxia.userinfo.domain.User;</span><br><span class="line">import com.youxia.userinfo.service.UserService;</span><br><span class="line">import org.apache.dubbo.config.annotation.Reference;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class UserServiceImpl &#123;</span><br><span class="line">    private static final Logger LOGGER &#x3D; LoggerFactory.getLogger(UserServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    @Reference</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    public User sayHello(User user) &#123;</span><br><span class="line">        return userService.saveUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="application-properties文件内容"><a href="#application-properties文件内容" class="headerlink" title="application.properties文件内容"></a>application.properties文件内容</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.port&#x3D;28082</span><br><span class="line">server.address&#x3D;10.3.20.57</span><br><span class="line">dubbo.registry.protocol&#x3D;redis</span><br><span class="line">dubbo.registry.address&#x3D;redis:&#x2F;&#x2F;192.168.172.4:6380</span><br><span class="line">dubbo.application.name&#x3D;dubbo-demo-service</span><br><span class="line">dubbo.scan.base-packages&#x3D;com.youxia.service.user</span><br></pre></td></tr></table></figure><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><img src="https://jxdw.github.io/img/cloudnative/devops/dubbo_user_info_zipkin.png"></p><h1 id="完整代码地址"><a href="#完整代码地址" class="headerlink" title="完整代码地址"></a>完整代码地址</h1><p><a href="https://github.com/youxia999/spring_boot_service/apache_dubbo_zipkin_project.git">https://github.com/youxia999/spring_boot_service/apache_dubbo_zipkin_project.git</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;本文背景&quot;&gt;&lt;a href=&quot;#本文背景&quot; class=&quot;headerlink&quot; title=&quot;本文背景&quot;&gt;&lt;/a&gt;本文背景&lt;/h1&gt;&lt;p&gt;因为:&lt;br&gt;1.dubbo已经从apache毕业，而zipkin官方的brave-instrumentation-dubbo-rpc的5.6版本支持的dubbo版本是2.6.6版本、且对2.7.3版本支持不太友好(2.6.6这个版本是未毕业前的版本，不太喜欢），只能把brave-instrumentation-dubbo-rpc抠出来，用以支撑2.7.3版本。&lt;br&gt;&lt;br&gt;2.dubbo官方提供的例子还是xml配置版本，现在都9102年了，谁还用XML配置版本。&lt;br&gt;&lt;br&gt;因为以上两点，有了此文。&lt;/p&gt;</summary>
    
    
    
    <category term="zipkin/jaeger知识体系" scheme="https://jxdw.github.io/categories/zipkin-jaeger%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
    
    <category term="业务开发所需中间件" scheme="https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>【go框架系列】viper框架的使用</title>
    <link href="https://jxdw.github.io/2019/07/02/golang_viper_config_use/"/>
    <id>https://jxdw.github.io/2019/07/02/golang_viper_config_use/</id>
    <published>2019-07-01T16:08:05.000Z</published>
    <updated>2020-10-22T14:28:51.174Z</updated>
    
    <content type="html"><![CDATA[<p>viper，”毒蛇”(国外程序员取框架名，真奇怪),是配置读取框架中比较受欢迎的一个。</p><a id="more"></a><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;github.com&#x2F;spf13&#x2F;pflag&quot;</span><br><span class="line">&quot;github.com&#x2F;spf13&#x2F;viper&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">pflag.String(&quot;ip&quot;, &quot;127.0.0.1&quot;, &quot;Server running address&quot;)</span><br><span class="line">pflag.Int64(&quot;port&quot;, 8080, &quot;Server running port&quot;)</span><br><span class="line">pflag.Parse()</span><br><span class="line"></span><br><span class="line">viper.BindPFlags(pflag.CommandLine)</span><br><span class="line">fmt.Printf(&quot;ip :%s , port:%s&quot;, viper.GetString(&quot;ip&quot;), viper.GetString(&quot;port&quot;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go run main.go --ip&#x3D;127.0.0.1 --port&#x3D;8090</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip :127.0.0.1 , port:8080</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;viper，”毒蛇”(国外程序员取框架名，真奇怪),是配置读取框架中比较受欢迎的一个。&lt;/p&gt;</summary>
    
    
    
    <category term="go知识体系" scheme="https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
    
    <category term="编程语言" scheme="https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
</feed>
