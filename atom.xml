<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技术学习笔记</title>
  
  <subtitle>接口-服务-系统-平台</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://youxia999.github.io/"/>
  <updated>2019-12-03T02:15:30.069Z</updated>
  <id>https://youxia999.github.io/</id>
  
  <author>
    <name>游侠</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Prometheus监控rabbitmq3.8.0</title>
    <link href="https://youxia999.github.io/2019/10/07/prometheus_monitor_rabbitmq/"/>
    <id>https://youxia999.github.io/2019/10/07/prometheus_monitor_rabbitmq/</id>
    <published>2019-10-07T04:46:48.000Z</published>
    <updated>2019-12-03T02:15:30.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="官方介绍"><a href="#官方介绍" class="headerlink" title="官方介绍"></a>官方介绍</h2><p>链接: <a href="https://www.rabbitmq.com/prometheus.html#overview-prometheus" target="_blank" rel="noopener">https://www.rabbitmq.com/prometheus.html#overview-prometheus</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">As of 3.8.0, RabbitMQ ships with built-in Prometheus &amp; Grafana support.</span><br><span class="line">Support for Prometheus metric collector ships in the rabbitmq_prometheus plugin. The plugin exposes all RabbitMQ metrics on a dedicated TCP port, in Prometheus text format.</span><br><span class="line">These metrics provide a deep insights into the state of RabbitMQ nodes and the runtime. They make reasoning about the behaviour of RabbitMQ, applications that use it and various infrastructure elements a lot more informed.</span><br></pre></td></tr></table></figure></p><h2 id="版本依赖"><a href="#版本依赖" class="headerlink" title="版本依赖"></a>版本依赖</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/rabbitmq/rabbitmq_3.8.0_changelog.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/rabbitmq/rabbitmq_3.8.0_required_erlang_version.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><h2 id="安装erlang"><a href="#安装erlang" class="headerlink" title="安装erlang"></a>安装erlang</h2><p>vim /etc/yum.repos.d/rabbitmq-erlang.repo<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[rabbitmq-erlang]</span><br><span class="line">name=rabbitmq-erlang</span><br><span class="line">baseurl=https://dl.bintray.com/rabbitmq-erlang/rpm/erlang/22/el/7</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></p><p>输入 命令，安装erlang。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -import https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc</span><br><span class="line">yum install  erlang</span><br><span class="line">yum install rabbitmq-server</span><br></pre></td></tr></table></figure></p><h2 id="安装rabbitmq-server"><a href="#安装rabbitmq-server" class="headerlink" title="安装rabbitmq-server"></a>安装rabbitmq-server</h2><p>vim /etc/yum.repos.d/rabbitmq.repo<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[bintray-rabbitmq-server]</span><br><span class="line">name=bintray-rabbitmq-rpm</span><br><span class="line">baseurl=https://dl.bintray.com/rabbitmq/rpm/rabbitmq-server/v3.8.x/el/7/</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></p><h2 id="修改配置，并授权"><a href="#修改配置，并授权" class="headerlink" title="修改配置，并授权"></a>修改配置，并授权</h2><p>vim /etc/rabbitmq/rabbitmq.conf<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#log.dir = /data/rabbitmq/log</span><br><span class="line">log.file = rabbit.log</span><br><span class="line"></span><br><span class="line">log.file.rotation.date=$D0</span><br><span class="line">log.file.rotation.size=0</span><br></pre></td></tr></table></figure></p><p>vim /etc/rabbitmq/rabbitmq-env.conf<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RABBITMQ_MNESIA_BASE=/data/rabbitmq/mnesia</span><br><span class="line">RABBITMQ_LOG_BASE=/data/rabbitmq/log</span><br></pre></td></tr></table></figure></p><p>授权给rabbitmq用户。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown -R rabbitmq:rabbitmq /var/lib/rabbitmq/</span><br><span class="line">mkdir -p data/rabbitmq/log</span><br><span class="line">mkdir -p /data/rabbitmq/mnesia</span><br><span class="line">chown -R rabbitmq:rabbitmq /data/rabbitmq/</span><br></pre></td></tr></table></figure></p><h2 id="启动服务，并启动插件"><a href="#启动服务，并启动插件" class="headerlink" title="启动服务，并启动插件"></a>启动服务，并启动插件</h2><p>1.启动rabbitmq-server服务<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start rabbitmq-server</span><br><span class="line">systemctl status rabbitmq-server</span><br></pre></td></tr></table></figure></p><p>2.启动management插件。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure></p><p>3.admin用户授权<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqctl add_user admin admin</span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br><span class="line">rabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line">rabbitmqctl status</span><br></pre></td></tr></table></figure></p><p>4.查看插件<br>输入命令:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins list</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/rabbitmq/rabbitmq_3.8.0_plugin_list.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>5.启动rabbitmq_prometheus插件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_prometheus</span><br></pre></td></tr></table></figure></p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><h2 id="命令行输入rabbitmqctl-status"><a href="#命令行输入rabbitmqctl-status" class="headerlink" title="命令行输入rabbitmqctl status"></a>命令行输入rabbitmqctl status</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/metrics/prometheus_monitor_rabbitmq_1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/metrics/prometheus_monitor_rabbitmq_2.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/metrics/prometheus_monitor_rabbitmq_3.png" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;h2 id=&quot;官方介绍&quot;&gt;&lt;a href=&quot;#官方介绍&quot; class=&quot;headerlink&quot; title=&quot;官方介绍&quot;&gt;&lt;/a&gt;官方介绍&lt;/h
      
    
    </summary>
    
    
      <category term="监控技术" scheme="https://youxia999.github.io/tags/%E7%9B%91%E6%8E%A7%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>apache dubbo 2.7.3版本与zipkin结合进行接口监控</title>
    <link href="https://youxia999.github.io/2019/08/11/apache_dubbo_zipkin_merge/"/>
    <id>https://youxia999.github.io/2019/08/11/apache_dubbo_zipkin_merge/</id>
    <published>2019-08-11T03:02:34.000Z</published>
    <updated>2019-12-03T06:12:25.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本文背景"><a href="#本文背景" class="headerlink" title="本文背景"></a>本文背景</h1><p>因为:<br>1.dubbo已经从apache毕业，而zipkin官方的brave-instrumentation-dubbo-rpc的5.6版本支持的dubbo版本是2.6.6版本、且对2.7.3版本支持不太友好(2.6.6这个版本是未毕业前的版本，不太喜欢），只能把brave-instrumentation-dubbo-rpc抠出来，用以支撑2.7.3版本。<br><br>2.dubbo官方提供的例子还是xml配置版本，现在都9102年了，谁还用XML配置版本。<br><br>因为以上两点，有了此文。</p><h1 id="provider方工程代码"><a href="#provider方工程代码" class="headerlink" title="provider方工程代码"></a>provider方工程代码</h1><h2 id="添加pom依赖"><a href="#添加pom依赖" class="headerlink" title="添加pom依赖"></a>添加pom依赖</h2><p>1.brave对dubbo的集成:brave-instrumentation-dubbo-rpc<br>2.brave的spring bean支持:brave-spring-beans<br>3.在SLF4J的MDC(Mapped Diagnostic Context) 中支持 traceId 和 spanId<br>4.使用okhttp3作为 reporter:zipkin-sender-okhttp3<br>当然，最好是同时添加bom，做好版本控制。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/zipkin/zipkin_pom.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h2 id="将TracingFilter扣出来进行改造"><a href="#将TracingFilter扣出来进行改造" class="headerlink" title="将TracingFilter扣出来进行改造"></a>将TracingFilter扣出来进行改造</h2><p>将brave-instrumentation-dubbo-rpc的5.6.6版本的TracingFilter抠出来进行改造，即实现org.apache.dubbo.rpc.Fiter的invoke方法。<br>brave-instrumentation-dubbo-rpc的5.6.6版本的TracingFilter实现的是com.alibaba.dubbo.rpc.Fiter。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.youxia.userinfo.config;</span><br><span class="line"></span><br><span class="line">import brave.Span;</span><br><span class="line">import brave.Tracer;</span><br><span class="line">import brave.Tracing;</span><br><span class="line">import brave.internal.Platform;</span><br><span class="line">import brave.propagation.Propagation;</span><br><span class="line">import brave.propagation.TraceContext;</span><br><span class="line">import brave.propagation.TraceContextOrSamplingFlags;</span><br><span class="line"></span><br><span class="line">import com.alibaba.dubbo.common.Constants;</span><br><span class="line">import com.alibaba.dubbo.remoting.exchange.ResponseCallback;</span><br><span class="line">import com.alibaba.dubbo.rpc.protocol.dubbo.FutureAdapter;</span><br><span class="line">import org.apache.dubbo.common.extension.Activate;</span><br><span class="line">import org.apache.dubbo.rpc.*;</span><br><span class="line"></span><br><span class="line">import org.apache.dubbo.rpc.support.RpcUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line">@Activate(group = &#123;Constants.PROVIDER, Constants.CONSUMER&#125;, value = &quot;tracing&quot;)</span><br><span class="line">public final class TracingFilter implements Filter &#123;</span><br><span class="line"></span><br><span class="line">    Tracer tracer;</span><br><span class="line">    TraceContext.Extractor&lt;Map&lt;String, String&gt;&gt; extractor;</span><br><span class="line">    TraceContext.Injector&lt;Map&lt;String, String&gt;&gt; injector;</span><br><span class="line">    volatile boolean isInit = false;</span><br><span class="line"></span><br><span class="line">    public void setTracing(Tracing tracing) &#123;</span><br><span class="line">        tracer = tracing.tracer();</span><br><span class="line">        extractor = tracing.propagation().extractor(GETTER);</span><br><span class="line">        injector = tracing.propagation().injector(SETTER);</span><br><span class="line">        isInit = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    static void parseRemoteAddress(RpcContext rpcContext, Span span) &#123;</span><br><span class="line">        InetSocketAddress remoteAddress = rpcContext.getRemoteAddress();</span><br><span class="line">        if (remoteAddress == null) return;</span><br><span class="line">        span.remoteIpAndPort(Platform.get().getHostString(remoteAddress), remoteAddress.getPort());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static void onError(Throwable error, Span span) &#123;</span><br><span class="line">        span.error(error);</span><br><span class="line">        if (error instanceof RpcException) &#123;</span><br><span class="line">            span.tag(&quot;userinfo.error_code&quot;, Integer.toString(((RpcException) error).getCode()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static final Propagation.Getter&lt;Map&lt;String, String&gt;, String&gt; GETTER =</span><br><span class="line">            new Propagation.Getter&lt;Map&lt;String, String&gt;, String&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public String get(Map&lt;String, String&gt; carrier, String key) &#123;</span><br><span class="line">                    return carrier.get(key);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public String toString() &#123;</span><br><span class="line">                    return &quot;Map::get&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">    static final Propagation.Setter&lt;Map&lt;String, String&gt;, String&gt; SETTER =</span><br><span class="line">            new Propagation.Setter&lt;Map&lt;String, String&gt;, String&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void put(Map&lt;String, String&gt; carrier, String key, String value) &#123;</span><br><span class="line">                    carrier.put(key, value);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public String toString() &#123;</span><br><span class="line">                    return &quot;Map::set&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Result invoke(Invoker&lt;?&gt; invoker, Invocation invocation) throws RpcException &#123;</span><br><span class="line">        if (isInit == false) return invoker.invoke(invocation);</span><br><span class="line"></span><br><span class="line">        RpcContext rpcContext = RpcContext.getContext();</span><br><span class="line">        Span.Kind kind = rpcContext.isProviderSide() ? Span.Kind.SERVER : Span.Kind.CLIENT;</span><br><span class="line">        final Span span;</span><br><span class="line">        if (kind.equals(Span.Kind.CLIENT)) &#123;</span><br><span class="line">            span = tracer.nextSpan();</span><br><span class="line">            injector.inject(span.context(), invocation.getAttachments());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            TraceContextOrSamplingFlags extracted = extractor.extract(invocation.getAttachments());</span><br><span class="line">            span = extracted.context() != null</span><br><span class="line">                    ? tracer.joinSpan(extracted.context())</span><br><span class="line">                    : tracer.nextSpan(extracted);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!span.isNoop()) &#123;</span><br><span class="line">            span.kind(kind);</span><br><span class="line">            String service = invoker.getInterface().getSimpleName();</span><br><span class="line">            String method =RpcUtils.getMethodName(invocation);</span><br><span class="line">            span.name(service + &quot;/&quot; + method);</span><br><span class="line">            parseRemoteAddress(rpcContext, span);</span><br><span class="line">            span.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        boolean isOneway = false, deferFinish = false;</span><br><span class="line">        try (Tracer.SpanInScope scope = tracer.withSpanInScope(span)) &#123;</span><br><span class="line">            Result result = invoker.invoke(invocation);</span><br><span class="line">            if (result.hasException()) &#123;</span><br><span class="line">                onError(result.getException(), span);</span><br><span class="line">            &#125;</span><br><span class="line">            isOneway = RpcUtils.isOneway(invoker.getUrl(), invocation);</span><br><span class="line">            Future&lt;Object&gt; future = rpcContext.getFuture(); // the case on async client invocation</span><br><span class="line">            if (future instanceof FutureAdapter) &#123;</span><br><span class="line">                deferFinish = true;</span><br><span class="line">                ((FutureAdapter) future).getFuture().setCallback(new TracingFilter.FinishSpanCallback(span));</span><br><span class="line">            &#125;</span><br><span class="line">            return result;</span><br><span class="line">        &#125; catch (Error | RuntimeException e) &#123;</span><br><span class="line">            onError(e, span);</span><br><span class="line">            throw e;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (isOneway) &#123;</span><br><span class="line">                span.flush();</span><br><span class="line">            &#125; else if (!deferFinish) &#123;</span><br><span class="line">                span.finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static final class FinishSpanCallback implements ResponseCallback &#123;</span><br><span class="line">        final Span span;</span><br><span class="line"></span><br><span class="line">        FinishSpanCallback(Span span) &#123;</span><br><span class="line">            this.span = span;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override public void done(Object response) &#123;</span><br><span class="line">            span.finish();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override public void caught(Throwable exception) &#123;</span><br><span class="line">            onError(exception, span);</span><br><span class="line">            span.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="在resource目录增加-META-INF-dubbo-org-apache-dubbo-rpc-Filter文件"><a href="#在resource目录增加-META-INF-dubbo-org-apache-dubbo-rpc-Filter文件" class="headerlink" title="在resource目录增加/META-INF/dubbo/org.apache.dubbo.rpc.Filter文件"></a>在resource目录增加/META-INF/dubbo/org.apache.dubbo.rpc.Filter文件</h2><p>org.apache.dubbo.rpc.Filter文件的内容如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tracing=com.youxia.userinfo.config.TracingFilter</span><br></pre></td></tr></table></figure></p><h2 id="配置zipkin客户端"><a href="#配置zipkin客户端" class="headerlink" title="配置zipkin客户端"></a>配置zipkin客户端</h2><p>ZipkinConfig内容如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.youxia.userinfo.config;</span><br><span class="line"></span><br><span class="line">import brave.context.slf4j.MDCScopeDecorator;</span><br><span class="line">import brave.propagation.CurrentTraceContext;</span><br><span class="line">import brave.spring.beans.CurrentTraceContextFactoryBean;</span><br><span class="line">import brave.spring.beans.TracingFactoryBean;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import zipkin2.codec.SpanBytesEncoder;</span><br><span class="line">import zipkin2.reporter.AsyncReporter;</span><br><span class="line">import zipkin2.reporter.Sender;</span><br><span class="line">import zipkin2.reporter.beans.AsyncReporterFactoryBean;</span><br><span class="line">import zipkin2.reporter.okhttp3.OkHttpSender;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class ZipkinConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;zipkin.server.url&#125;&quot;)</span><br><span class="line">    private String ZipkinServerUrl;</span><br><span class="line"></span><br><span class="line">    @Bean(&quot;okHttpSender&quot;)</span><br><span class="line">    public Sender okHttpSender() &#123;</span><br><span class="line">        Sender sender= OkHttpSender.create(ZipkinServerUrl);</span><br><span class="line">        return sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(&quot;reporter&quot;)</span><br><span class="line">    public AsyncReporter getAsyncReporter()&#123;</span><br><span class="line">        AsyncReporter asyncReporter=AsyncReporter.builder(okHttpSender()).closeTimeout(50000, TimeUnit.MILLISECONDS).build(SpanBytesEncoder.JSON_V2);</span><br><span class="line">        return asyncReporter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public AsyncReporterFactoryBean reporter(@Qualifier(&quot;okHttpSender&quot;)OkHttpSender sender)&#123;</span><br><span class="line">        AsyncReporterFactoryBean asyncReporterFactoryBean = new AsyncReporterFactoryBean();</span><br><span class="line">        asyncReporterFactoryBean.setSender(sender);</span><br><span class="line">        asyncReporterFactoryBean.setCloseTimeout(3000);</span><br><span class="line">        return asyncReporterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public TracingFactoryBean getTracingBean(@Qualifier(&quot;reporter&quot;) AsyncReporter reporter)&#123;</span><br><span class="line">        TracingFactoryBean tracingFactoryBean=new TracingFactoryBean();</span><br><span class="line">        tracingFactoryBean.setLocalServiceName(&quot;userinfo-service&quot;);</span><br><span class="line">        CurrentTraceContextFactoryBean currentTraceContextFactoryBean = new CurrentTraceContextFactoryBean();</span><br><span class="line">        CurrentTraceContext.ScopeDecorator scopeDecorator = MDCScopeDecorator.create();</span><br><span class="line">        currentTraceContextFactoryBean.setScopeDecorators(Arrays.asList(scopeDecorator));</span><br><span class="line">        tracingFactoryBean.setCurrentTraceContext(currentTraceContextFactoryBean.getObject());</span><br><span class="line">        tracingFactoryBean.setSpanReporter(reporter);</span><br><span class="line">        return tracingFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="dubbo注解文件添加filter"><a href="#dubbo注解文件添加filter" class="headerlink" title="dubbo注解文件添加filter"></a>dubbo注解文件添加filter</h2><p>业务实现类添加filter：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.youxia.userinfo.service.impl;</span><br><span class="line"></span><br><span class="line">import com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line">import com.youxia.userinfo.domain.User;</span><br><span class="line">import com.youxia.userinfo.service.UserService;</span><br><span class="line"></span><br><span class="line">@Service(filter = &#123;&quot;tracing&quot;&#125;)</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public User saveUser(User user) &#123;</span><br><span class="line">        user.setUserId(1);</span><br><span class="line">        user.setUserName(user.getUserName());</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">        return  user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="provider配置文件"><a href="#provider配置文件" class="headerlink" title="provider配置文件"></a>provider配置文件</h2><p>完整的application.properties:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.application.name=UserInfoService</span><br><span class="line">server.address=10.3.20.57</span><br><span class="line">server.port=28081</span><br><span class="line"></span><br><span class="line">dubbo.registry.address=redis://192.168.172.4:6380</span><br><span class="line">dubbo.protocol.name=dubbo</span><br><span class="line">dubbo.protocol.port=28080</span><br><span class="line">dubbo.scan.base-packages=com.youxia.userinfo.service</span><br><span class="line">dubbo.application.qos.enable=true</span><br><span class="line"></span><br><span class="line">zipkin.server.url=http://192.168.172.6:9411/api/v2/spans</span><br></pre></td></tr></table></figure></p><h1 id="consumer工程代码"><a href="#consumer工程代码" class="headerlink" title="consumer工程代码"></a>consumer工程代码</h1><h2 id="业务逻辑处理类代码"><a href="#业务逻辑处理类代码" class="headerlink" title="业务逻辑处理类代码"></a>业务逻辑处理类代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.youxia.service.user;</span><br><span class="line"></span><br><span class="line">import com.youxia.userinfo.domain.User;</span><br><span class="line">import com.youxia.userinfo.service.UserService;</span><br><span class="line">import org.apache.dubbo.config.annotation.Reference;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class UserServiceImpl &#123;</span><br><span class="line">    private static final Logger LOGGER = LoggerFactory.getLogger(UserServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    @Reference</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    public User sayHello(User user) &#123;</span><br><span class="line">        return userService.saveUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="application-properties文件内容"><a href="#application-properties文件内容" class="headerlink" title="application.properties文件内容"></a>application.properties文件内容</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.port=28082</span><br><span class="line">server.address=10.3.20.57</span><br><span class="line">dubbo.registry.protocol=redis</span><br><span class="line">dubbo.registry.address=redis://192.168.172.4:6380</span><br><span class="line">dubbo.application.name=dubbo-demo-service</span><br><span class="line">dubbo.scan.base-packages=com.youxia.service.user</span><br></pre></td></tr></table></figure><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/zipkin/dubbo_user_info_zipkin.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h1 id="完整代码地址"><a href="#完整代码地址" class="headerlink" title="完整代码地址"></a>完整代码地址</h1><p><a href="https://github.com/youxia999/spring_boot_service/apache_dubbo_zipkin_project.git" target="_blank" rel="noopener">https://github.com/youxia999/spring_boot_service/apache_dubbo_zipkin_project.git</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;本文背景&quot;&gt;&lt;a href=&quot;#本文背景&quot; class=&quot;headerlink&quot; title=&quot;本文背景&quot;&gt;&lt;/a&gt;本文背景&lt;/h1&gt;&lt;p&gt;因为:&lt;br&gt;1.dubbo已经从apache毕业，而zipkin官方的brave-instrumentation-dubb
      
    
    </summary>
    
    
      <category term="监控技术" scheme="https://youxia999.github.io/tags/%E7%9B%91%E6%8E%A7%E6%8A%80%E6%9C%AF/"/>
    
      <category term="zipkin" scheme="https://youxia999.github.io/tags/zipkin/"/>
    
  </entry>
  
  <entry>
    <title>【转载】TCP通信转UDP通信并加速</title>
    <link href="https://youxia999.github.io/2019/06/01/centos7-share-a-photo/"/>
    <id>https://youxia999.github.io/2019/06/01/centos7-share-a-photo/</id>
    <published>2019-06-01T13:46:40.000Z</published>
    <updated>2019-11-14T02:39:06.806Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/centos7/12402.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>附原文</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/centos7/12402_source.png" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
    
      <category term="CentOS操作" scheme="https://youxia999.github.io/tags/CentOS%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>redis5.0的sentinel模式体验</title>
    <link href="https://youxia999.github.io/2019/05/19/redis-sentinel-install/"/>
    <id>https://youxia999.github.io/2019/05/19/redis-sentinel-install/</id>
    <published>2019-05-19T02:43:17.000Z</published>
    <updated>2019-12-03T02:44:39.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://www.cnblogs.com/ibethfy/p/9965902.html</span><br><span class="line">http://redisdoc.com/topic/sentinel.html</span><br></pre></td></tr></table></figure><h1 id="sentinel架构和整体规划"><a href="#sentinel架构和整体规划" class="headerlink" title="sentinel架构和整体规划"></a>sentinel架构和整体规划</h1><h2 id="sentinel模式的整体架构"><a href="#sentinel模式的整体架构" class="headerlink" title="sentinel模式的整体架构"></a>sentinel模式的整体架构</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/redis/redis_sentinel_architectrue.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="部署整体规划"><a href="#部署整体规划" class="headerlink" title="部署整体规划"></a>部署整体规划</h2><h3 id="redis-server节点"><a href="#redis-server节点" class="headerlink" title="redis-server节点"></a>redis-server节点</h3><p>一主两从(生产环境不要部署在一台机器上，从概率学的角度，风险很大):<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">master: 192.168.172.4:7001</span><br><span class="line">slave1: 192.168.172.4:7002</span><br><span class="line">slave2: 192.168.172.4:7003</span><br></pre></td></tr></table></figure></p><h3 id="redis-sentinel节点"><a href="#redis-sentinel节点" class="headerlink" title="redis-sentinel节点"></a>redis-sentinel节点</h3><p>三个节点(生产环境不要部署在一台机器上，从概率学的角度，风险很大):<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node1: 192.168.172.7:27001</span><br><span class="line">node2: 192.168.172.7:27002</span><br><span class="line">mode3: 192.168.172.7:27003</span><br></pre></td></tr></table></figure></p><h1 id="编译、安装、配置和启动"><a href="#编译、安装、配置和启动" class="headerlink" title="编译、安装、配置和启动"></a>编译、安装、配置和启动</h1><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><p>编译安装参考<a href="https://youxia999.github.io/2019/04/19/redis-5-0-install/#%E4%B8%8B%E8%BD%BD%E3%80%81%E8%A7%A3%E5%8E%8B%E3%80%81%E7%BC%96%E8%AF%91">单节点安装redis 5.0集群</a>。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="master节点配置"><a href="#master节点配置" class="headerlink" title="master节点配置"></a>master节点配置</h3><p>cat /data/redis/conf/redis7001.conf<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#redis监听的本地IP地址</span><br><span class="line">bind 192.168.172.4</span><br><span class="line">#监听端口</span><br><span class="line">port 7001</span><br><span class="line">#开启后台运行，no表示运行在前台</span><br><span class="line">daemonize yes</span><br><span class="line">#pid文件，另一个节点改为7002</span><br><span class="line">pidfile /var/run/redis_7001.pid</span><br><span class="line">#开启aof日志，每次写操作都会记录一条日志</span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename &quot;appendonly7001.aof&quot;</span><br><span class="line">#开启集群，把注释去掉</span><br><span class="line">cluster-enabled no</span><br><span class="line">dbfilename dump7001.rdb</span><br></pre></td></tr></table></figure></p><h3 id="slave1节点配置"><a href="#slave1节点配置" class="headerlink" title="slave1节点配置"></a>slave1节点配置</h3><p>cat /data/redis/conf/redis7002.conf<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#redis监听的本地IP地址</span><br><span class="line">bind 192.168.172.4</span><br><span class="line">#监听端口</span><br><span class="line">port 7002</span><br><span class="line">#开启后台运行，no表示运行在前台</span><br><span class="line">daemonize yes</span><br><span class="line">#pid文件，另一个节点改为7002</span><br><span class="line">pidfile /var/run/redis_7002.pid</span><br><span class="line">#开启aof日志，每次写操作都会记录一条日志</span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename &quot;appendonly7002.aof&quot;</span><br><span class="line">#开启集群，把注释去掉</span><br><span class="line">cluster-enabled no</span><br><span class="line">dbfilename dump7002.rdb</span><br><span class="line">replicaof 192.168.172.4 7001</span><br></pre></td></tr></table></figure></p><h3 id="slave2节点配置"><a href="#slave2节点配置" class="headerlink" title="slave2节点配置"></a>slave2节点配置</h3><p>cat /data/redis/conf/redis7003.conf<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#redis监听的本地IP地址</span><br><span class="line">bind 192.168.172.4</span><br><span class="line">#监听端口</span><br><span class="line">port 7003</span><br><span class="line">#开启后台运行，no表示运行在前台</span><br><span class="line">daemonize yes</span><br><span class="line">#pid文件，另一个节点改为7002</span><br><span class="line">pidfile /var/run/redis_7003.pid</span><br><span class="line">#开启aof日志，每次写操作都会记录一条日志</span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename &quot;appendonly7003.aof&quot;</span><br><span class="line">#开启集群，把注释去掉</span><br><span class="line">cluster-enabled no</span><br><span class="line">dbfilename dump7003.rdb</span><br><span class="line">replicaof 192.168.172.4 7001</span><br></pre></td></tr></table></figure></p><h3 id="sentinel服务节点1配置"><a href="#sentinel服务节点1配置" class="headerlink" title="sentinel服务节点1配置"></a>sentinel服务节点1配置</h3><p>cat conf/sentinel27001.conf<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected-mode no</span><br><span class="line">port 27001</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile &quot;/data/redis/sentinel27001/sentinel.pid&quot;</span><br><span class="line">logfile &quot;/data/redis/sentinel27001/27001.log&quot;</span><br><span class="line">dir &quot;/data/redis/sentinel27001&quot;</span><br><span class="line">#sentinel auth-pass master7000 ibethfy</span><br><span class="line">sentinel monitor master7001 192.168.172.4 7001 2</span><br><span class="line"># Generated by CONFIG REWRITE</span><br><span class="line">sentinel down-after-milliseconds master7001 5000</span><br><span class="line">sentinel failover-timeout master7001 30000</span><br></pre></td></tr></table></figure></p><h3 id="sentinel服务节点2配置"><a href="#sentinel服务节点2配置" class="headerlink" title="sentinel服务节点2配置"></a>sentinel服务节点2配置</h3><p>cat conf/sentinel27002.conf<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected-mode no</span><br><span class="line">port 27002</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile &quot;/data/redis/sentinel27002/sentinel.pid&quot;</span><br><span class="line">logfile &quot;/data/redis/sentinel27002/27002.log&quot;</span><br><span class="line">dir &quot;/data/redis/sentinel27002&quot;</span><br><span class="line">#sentinel auth-pass master7000 ibethfy</span><br><span class="line">sentinel monitor master7001 192.168.172.4 7001 2</span><br><span class="line"># Generated by CONFIG REWRITE</span><br><span class="line">sentinel down-after-milliseconds master7001 5000</span><br><span class="line">sentinel failover-timeout master7001 30000</span><br></pre></td></tr></table></figure></p><h3 id="sentinel服务节点3配置"><a href="#sentinel服务节点3配置" class="headerlink" title="sentinel服务节点3配置"></a>sentinel服务节点3配置</h3><p>cat conf/sentinel27003.conf<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected-mode no</span><br><span class="line">port 27003</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile &quot;/data/redis/sentinel27003/sentinel.pid&quot;</span><br><span class="line">logfile &quot;/data/redis/sentinel27003/27003.log&quot;</span><br><span class="line">dir &quot;/data/redis/sentinel27003&quot;</span><br><span class="line">#sentinel auth-pass master7001 ibethfy</span><br><span class="line">sentinel monitor master7001 192.168.172.4 7001 2</span><br><span class="line"># Generated by CONFIG REWRITE</span><br><span class="line">sentinel down-after-milliseconds master7001 5000</span><br><span class="line">sentinel failover-timeout master7001 30000</span><br></pre></td></tr></table></figure></p><h3 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h3><p>在没有相互配置地址的时候，三个sentinel节点之间怎么相互发现呢。从官网看下说明：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/redis/redis_sentinel_hello.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>启动master节点：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-server /data/redis/conf/redis7001.conf</span><br></pre></td></tr></table></figure></p><p>启动slave1节点：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-server /data/redis/conf/redis7002.conf</span><br></pre></td></tr></table></figure></p><p>启动slave2节点：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-server /data/redis/conf/redis7003.conf</span><br></pre></td></tr></table></figure></p><p>启动sentinel节点1：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-sentinel /data/redis/conf/sentinel27001.conf</span><br></pre></td></tr></table></figure></p><p>启动sentinel节点2：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-sentinel /data/redis/conf/sentinel27002.conf</span><br></pre></td></tr></table></figure></p><p>启动sentinel节点3：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-sentinel /data/redis/conf/sentinel27003.conf</span><br></pre></td></tr></table></figure></p><h1 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h1><h2 id="redis主从情况"><a href="#redis主从情况" class="headerlink" title="redis主从情况"></a>redis主从情况</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/redis/redis5.0_master_slave_info.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="sentinel服务情况"><a href="#sentinel服务情况" class="headerlink" title="sentinel服务情况"></a>sentinel服务情况</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/redis/redis5.0_sentinel_master_master7001.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="sentinel之间怎么相互发现的"><a href="#sentinel之间怎么相互发现的" class="headerlink" title="sentinel之间怎么相互发现的"></a>sentinel之间怎么相互发现的</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/redis/redis5.0_subcribe_hello.png" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
    
      <category term="中间件技术" scheme="https://youxia999.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
      <category term="redis" scheme="https://youxia999.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>关于java学习的阶段性思考</title>
    <link href="https://youxia999.github.io/2019/05/12/spring-architecture/"/>
    <id>https://youxia999.github.io/2019/05/12/spring-architecture/</id>
    <published>2019-05-12T13:46:07.000Z</published>
    <updated>2019-12-03T02:22:20.349Z</updated>
    
    <content type="html"><![CDATA[<p>最近有学PHP的朋友想转到java（说公司要求用spring boot做项目），问我有没有什么捷径或者经验，给他一个换语言的学习指引。<br>看得出来，他还没有搭建自己的知识体系，我就趁机给他灌输一个观念：先要有完整的知识体系结构（或者通用技术架构），然后编程语言只是工具，是可以被替换的。当然，这不是我的原创，是一些前辈告诉我的（我相信很多高手都会觉得:语言都是工具,架构模式才是关键。用java写的，用go语言、Python也可以，只是效果、代码管理、维护性的差异）。<br>当然，计算机是讲究动手的学科，不能空谈理论，得输出点东西才可信，然后基于本人最近的一些思考（看了几张别人spring全家桶教程的ppt），画了一张整体架构图给朋友。<br>并且告知：java是可以被换成go、python语言实现的，就看技术决策者熟悉哪门语言、以及要实现什么样的系统（其实是废话：单讲语言生态，目前java确实是生态最好的语言，尤其是在spring的助攻下。呵呵）<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/architectrue/spring_architecture.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近有学PHP的朋友想转到java（说公司要求用spring boot做项目），问我有没有什么捷径或者经验，给他一个换语言的学习指引。&lt;br&gt;看得出来，他还没有搭建自己的知识体系，我就趁机给他灌输一个观念：先要有完整的知识体系结构（或者通用技术架构），然后编程语言只是工具，
      
    
    </summary>
    
    
      <category term="java" scheme="https://youxia999.github.io/tags/java/"/>
    
      <category term="编程框架与中间件客户端" scheme="https://youxia999.github.io/tags/%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>RHEL8发布，坐等centos8</title>
    <link href="https://youxia999.github.io/2019/05/12/centos8-base-rhel8-release/"/>
    <id>https://youxia999.github.io/2019/05/12/centos8-base-rhel8-release/</id>
    <published>2019-05-12T05:24:41.000Z</published>
    <updated>2019-11-14T02:39:12.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景和参考资料"><a href="#背景和参考资料" class="headerlink" title="背景和参考资料"></a>背景和参考资料</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/8.0_release_notes/index</span><br><span class="line">https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/8/html-single/8.0_release_notes/index(机器翻译版)</span><br><span class="line">https://blog.51cto.com/vanehsuan/2392207</span><br><span class="line">https://www.itzgeek.com/how-tos/linux/centos-how-tos/how-to-install-mysql-8-0-on-rhel-8.html</span><br></pre></td></tr></table></figure><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>正文上面的参考资料所说，5月7号，红帽子公司发布了REDHAT ENTERPRISE LINUX 8(简称RHEL8)。<br>于是乎，想先体验一把新特性和原有功能，为后面的centos8做技术储备。</p><h2 id="rhel8的release-note"><a href="#rhel8的release-note" class="headerlink" title="rhel8的release note"></a>rhel8的release note</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/centos7/rhel8_release_notes.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h1 id="虚拟机安装RHEL8"><a href="#虚拟机安装RHEL8" class="headerlink" title="虚拟机安装RHEL8"></a>虚拟机安装RHEL8</h1><h2 id="下载RHEL8镜像"><a href="#下载RHEL8镜像" class="headerlink" title="下载RHEL8镜像"></a>下载RHEL8镜像</h2><p>注册一个redhat的账号，从官网下载RHEL8</p><h2 id="虚拟机安装RHEL8-1"><a href="#虚拟机安装RHEL8-1" class="headerlink" title="虚拟机安装RHEL8"></a>虚拟机安装RHEL8</h2><p>参考<a href="https://blog.51cto.com/vanehsuan/2392207做下版本的选择，磁盘的选择，整个过程还是比较顺畅。" target="_blank" rel="noopener">https://blog.51cto.com/vanehsuan/2392207做下版本的选择，磁盘的选择，整个过程还是比较顺畅。</a></p><p>#安装后的初步体验</p><h2 id="内核版本"><a href="#内核版本" class="headerlink" title="内核版本"></a>内核版本</h2><p>采用的之前beta版本用的4.18版本（内核社区好像没有提供本版本的长期支持版）<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/centos7/rhel8_uname.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h2 id="注册账号订阅仓库"><a href="#注册账号订阅仓库" class="headerlink" title="注册账号订阅仓库"></a>注册账号订阅仓库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">subscription-manager register --username 红帽子账号 --password 密码 --auto-attach</span><br><span class="line">subscription-manager repos --list-enabled</span><br></pre></td></tr></table></figure><h2 id="安装mysql8-0"><a href="#安装mysql8-0" class="headerlink" title="安装mysql8.0"></a>安装mysql8.0</h2><p>简单安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dnf clean packages</span><br><span class="line">yum -y install @mysql</span><br><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/centos7/rhel8_mysql.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>查看日志<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-05-12T12:45:20.890020Z 0 [System] [MY-013169] [Server] /usr/libexec/mysqld (mysqld 8.0.13) initializing of server in progress as process 40113</span><br><span class="line">2019-05-12T12:45:23.643786Z 5 [Warning] [MY-010453] [Server] root@localhost is created with an empty password ! Please consider switching off the --initialize-insecure option.</span><br><span class="line">2019-05-12T12:45:26.199807Z 0 [System] [MY-013170] [Server] /usr/libexec/mysqld (mysqld 8.0.13) initializing of server has completed</span><br><span class="line">2019-05-12T12:45:28.821217Z 0 [System] [MY-010116] [Server] /usr/libexec/mysqld (mysqld 8.0.13) starting as process 40159</span><br><span class="line">2019-05-12T12:45:29.877569Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.</span><br><span class="line">2019-05-12T12:45:29.987015Z 0 [System] [MY-010931] [Server] /usr/libexec/mysqld: ready for connections. Version: &apos;8.0.13&apos;  socket: &apos;/var/lib/mysql/mysql.sock&apos;  port: 3306  Source distribution.</span><br><span class="line">2019-05-12T12:45:30.206112Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Socket: &apos;/var/lib/mysql/mysqlx.sock&apos; bind-address: &apos;::&apos; port: 33060</span><br></pre></td></tr></table></figure></p><p>知道mysql8的root账号密码为空，所以需要登录后，初始化密码。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter user &apos;root&apos;@&apos;localhost&apos; identified with mysql_native_password by &apos;123456&apos;;</span><br><span class="line">update user set host=&apos;%&apos; where user=&apos;root&apos;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></p><h1 id="初步结论"><a href="#初步结论" class="headerlink" title="初步结论"></a>初步结论</h1><p> 软件安装这块，除了增加appstream的概念，已经源的控制，和centos7没有太大的差别。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景和参考资料&quot;&gt;&lt;a href=&quot;#背景和参考资料&quot; class=&quot;headerlink&quot; title=&quot;背景和参考资料&quot;&gt;&lt;/a&gt;背景和参考资料&lt;/h1&gt;&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="CentOS操作" scheme="https://youxia999.github.io/tags/CentOS%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>单节点安装redis 5.0集群</title>
    <link href="https://youxia999.github.io/2019/04/19/redis-5-0-install/"/>
    <id>https://youxia999.github.io/2019/04/19/redis-5-0-install/</id>
    <published>2019-04-19T08:46:12.000Z</published>
    <updated>2019-12-03T02:44:06.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><h2 id="主要参考资料"><a href="#主要参考资料" class="headerlink" title="主要参考资料"></a>主要参考资料</h2><p><a href="https://blog.51cto.com/andyxu/2319767" target="_blank" rel="noopener">https://blog.51cto.com/andyxu/2319767</a><br><a href="https://www.oschina.net/news/100931/redis-5-0-released" target="_blank" rel="noopener">https://www.oschina.net/news/100931/redis-5-0-released</a></p><h2 id="redis-5-0主要的特性"><a href="#redis-5-0主要的特性" class="headerlink" title="redis 5.0主要的特性"></a>redis 5.0主要的特性</h2><p>最吸引我的可能就是第二点。要知道基于ruby的集群方案，真的比较让人酸爽。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/redis/redis5.0_feature.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><h2 id="下载、解压、编译"><a href="#下载、解压、编译" class="headerlink" title="下载、解压、编译"></a>下载、解压、编译</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install make gcc gcc-c++ wget</span><br><span class="line">wget http://download.redis.io/releases/redis-5.0.0.tar.gz</span><br><span class="line">tar zxvf redis-5.0.0.tar.gz</span><br><span class="line">cd redis-5.0.0/</span><br><span class="line">make &amp;&amp; make install PREFIX=/data/redis</span><br><span class="line">echo &quot;export PATH=$PATH:/data/redis/bin&quot; &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="redis客户端命令"><a href="#redis客户端命令" class="headerlink" title="redis客户端命令"></a>redis客户端命令</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/redis/redis5.0_rediscli_command.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h1 id="redis集群配置"><a href="#redis集群配置" class="headerlink" title="redis集群配置"></a>redis集群配置</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="7001端口"><a href="#7001端口" class="headerlink" title="7001端口"></a>7001端口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#redis监听的本地IP地址</span><br><span class="line">bind 192.168.128.54</span><br><span class="line"></span><br><span class="line">#监听端口</span><br><span class="line">port 7001</span><br><span class="line"></span><br><span class="line">#开启后台运行，no表示运行在前台</span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line">#pid文件，另一个节点改为7002</span><br><span class="line">pidfile /var/run/redis_7001.pid</span><br><span class="line"></span><br><span class="line">#开启aof日志，每次写操作都会记录一条日志</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line">appendfilename &quot;appendonly7001.aof&quot;</span><br><span class="line"></span><br><span class="line">#开启集群，把注释去掉</span><br><span class="line">cluster-enabled yes</span><br><span class="line"></span><br><span class="line">dbfilename dump7001.rdb</span><br><span class="line"></span><br><span class="line">#集群的配置文件，首次启动会自动创建</span><br><span class="line">cluster-config-file nodes-7001.conf   </span><br><span class="line"></span><br><span class="line">#集群节点连接超时时间，15秒</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure><h3 id="7002端口"><a href="#7002端口" class="headerlink" title="7002端口"></a>7002端口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#redis监听的本地IP地址</span><br><span class="line">bind 192.168.128.54</span><br><span class="line"></span><br><span class="line">#监听端口</span><br><span class="line">port 7002</span><br><span class="line"></span><br><span class="line">#开启后台运行，no表示运行在前台</span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line">#pid文件</span><br><span class="line">pidfile /var/run/redis_7002.pid</span><br><span class="line"></span><br><span class="line">#开启aof日志，每次写操作都会记录一条日志</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line">appendfilename &quot;appendonly7002.aof&quot;</span><br><span class="line"></span><br><span class="line">dbfilename dump7002.rdb</span><br><span class="line"></span><br><span class="line">#开启集群，把注释#去掉</span><br><span class="line">cluster-enabled yes</span><br><span class="line"></span><br><span class="line">#集群的配置文件，首次启动会自动创建</span><br><span class="line">cluster-config-file nodes-7002.conf</span><br><span class="line"></span><br><span class="line">#集群节点连接超时时间，15秒</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure><h3 id="7003端口"><a href="#7003端口" class="headerlink" title="7003端口"></a>7003端口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#redis监听的本地IP地址</span><br><span class="line">bind 192.168.128.54</span><br><span class="line"></span><br><span class="line">#监听端口</span><br><span class="line">port 7003</span><br><span class="line"></span><br><span class="line">#开启后台运行，no表示运行在前台</span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line">#pid文件，另一个节点改为7002</span><br><span class="line">pidfile /var/run/redis_7003.pid</span><br><span class="line"></span><br><span class="line">#开启aof日志，每次写操作都会记录一条日志</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line">appendfilename &quot;appendonly7003.aof&quot;</span><br><span class="line"></span><br><span class="line">dbfilename dump7003.rdb</span><br><span class="line"></span><br><span class="line">#开启集群，把注释#去掉</span><br><span class="line">cluster-enabled yes</span><br><span class="line"></span><br><span class="line">#集群的配置文件，首次启动会自动创建</span><br><span class="line">cluster-config-file nodes-7003.conf</span><br><span class="line"></span><br><span class="line">#集群节点连接超时时间，15秒</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure><h3 id="7004端口"><a href="#7004端口" class="headerlink" title="7004端口"></a>7004端口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#redis监听的本地IP地址</span><br><span class="line">bind 192.168.128.54</span><br><span class="line"></span><br><span class="line">#监听端口</span><br><span class="line">port 7004</span><br><span class="line"></span><br><span class="line">#开启后台运行，no表示运行在前台</span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line">#pid文件，另一个节点改为7002</span><br><span class="line">pidfile /var/run/redis_7004.pid</span><br><span class="line"></span><br><span class="line">#开启aof日志，每次写操作都会记录一条日志</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line">appendfilename &quot;appendonly7004.aof&quot;</span><br><span class="line"></span><br><span class="line">dbfilename dump7004.rdb</span><br><span class="line"></span><br><span class="line">#开启集群，把注释#去掉</span><br><span class="line">cluster-enabled yes</span><br><span class="line"></span><br><span class="line">#集群的配置文件，首次启动会自动创建</span><br><span class="line">cluster-config-file nodes-7004.conf</span><br><span class="line"></span><br><span class="line">#集群节点连接超时时间，15秒</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure><h3 id="7005端口"><a href="#7005端口" class="headerlink" title="7005端口"></a>7005端口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#redis监听的本地IP地址</span><br><span class="line">bind 192.168.128.54</span><br><span class="line"></span><br><span class="line">#监听端口</span><br><span class="line">port 7005</span><br><span class="line"></span><br><span class="line">#开启后台运行，no表示运行在前台</span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line">#pid文件</span><br><span class="line">pidfile /var/run/redis_7005.pid</span><br><span class="line"></span><br><span class="line">#开启aof日志，每次写操作都会记录一条日志</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line">appendfilename &quot;appendonly7005.aof&quot;</span><br><span class="line"></span><br><span class="line">dbfilename dump7005.rdb</span><br><span class="line"></span><br><span class="line">#开启集群，把注释#去掉</span><br><span class="line">cluster-enabled yes</span><br><span class="line"></span><br><span class="line">#集群的配置文件，首次启动会自动创建</span><br><span class="line">cluster-config-file nodes-7005.conf</span><br><span class="line"></span><br><span class="line">#集群节点连接超时时间，15秒</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure><h3 id="7006端口"><a href="#7006端口" class="headerlink" title="7006端口"></a>7006端口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#redis监听的本地IP地址</span><br><span class="line">bind 192.168.128.54</span><br><span class="line"></span><br><span class="line">#监听端口</span><br><span class="line">port 7006</span><br><span class="line"></span><br><span class="line">#开启后台运行,no表示运行在前台</span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line">#pid文件</span><br><span class="line">pidfile /var/run/redis_7006.pid</span><br><span class="line"></span><br><span class="line">#开启aof日志，每次写操作都会记录一条日志</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line">appendfilename &quot;appendonly7006.aof&quot;</span><br><span class="line"></span><br><span class="line">dbfilename dump7006.rdb</span><br><span class="line"></span><br><span class="line">#开启集群，把注释去掉</span><br><span class="line">cluster-enabled yes   </span><br><span class="line"></span><br><span class="line">#集群的配置文件，首次启动会自动创建</span><br><span class="line">cluster-config-file nodes-7006.conf</span><br><span class="line"></span><br><span class="line">#集群节点连接超时时间，15</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure><h2 id="节点启动脚本redis-all-sh"><a href="#节点启动脚本redis-all-sh" class="headerlink" title="节点启动脚本redis-all.sh"></a>节点启动脚本redis-all.sh</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">/data/redis/bin/redis-server /data/redis/conf/redis7001.conf</span><br><span class="line">/data/redis/bin/redis-server /data/redis/conf/redis7002.conf</span><br><span class="line">/data/redis/bin/redis-server /data/redis/conf/redis7003.conf</span><br><span class="line">/data/redis/bin/redis-server /data/redis/conf/redis7004.conf</span><br><span class="line">/data/redis/bin/redis-server /data/redis/conf/redis7005.conf</span><br><span class="line">/data/redis/bin/redis-server /data/redis/conf/redis7006.conf</span><br></pre></td></tr></table></figure><h2 id="集群创建脚本redis-cluster-sh"><a href="#集群创建脚本redis-cluster-sh" class="headerlink" title="集群创建脚本redis-cluster.sh"></a>集群创建脚本redis-cluster.sh</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">/data/redis/bin/redis-cli --cluster create 192.168.128.54:7001  192.168.128.54:7002 192.168.128.54:7003 192.168.128.54:7004 192.168.128.54:7005 192.168.128.54:7006 --cluster-replicas 1</span><br></pre></td></tr></table></figure><h2 id="启动后的文件信息"><a href="#启动后的文件信息" class="headerlink" title="启动后的文件信息"></a>启动后的文件信息</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/redis/redis5.0_file.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h1 id="体验redis集群"><a href="#体验redis集群" class="headerlink" title="体验redis集群"></a>体验redis集群</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/redis/redis5.0_infocommand.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/redis/redis5.0_clusterinfo.png" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;h2 id=&quot;主要参考资料&quot;&gt;&lt;a href=&quot;#主要参考资料&quot; class=&quot;headerlink&quot; title=&quot;主要参考资
      
    
    </summary>
    
    
      <category term="中间件技术" scheme="https://youxia999.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
      <category term="redis" scheme="https://youxia999.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>percona-xtrabackup 8.0安装和初步使用</title>
    <link href="https://youxia999.github.io/2019/04/13/percona-xtrabackup-for-mysql-8-0/"/>
    <id>https://youxia999.github.io/2019/04/13/percona-xtrabackup-for-mysql-8-0/</id>
    <published>2019-04-13T04:58:32.000Z</published>
    <updated>2019-12-03T02:43:26.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/wfs1994/article/details/80396604</span><br></pre></td></tr></table></figure><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://www.percona.com/doc/percona-xtrabackup/8.0/index.html</span><br><span class="line">https://www.percona.com/doc/percona-xtrabackup/8.0/installation.html#installing-percona-xtrabackup-from-repositories</span><br><span class="line">https://www.percona.com/doc/percona-xtrabackup/8.0/installation/yum_repo.html</span><br><span class="line">https://www.percona.com/doc/percona-xtrabackup/8.0/using_xtrabackup/privileges.html</span><br><span class="line">https://www.percona.com/doc/percona-xtrabackup/8.0/backup_scenarios/full_backup.html</span><br></pre></td></tr></table></figure><h1 id="xtrabackup简介与安装"><a href="#xtrabackup简介与安装" class="headerlink" title="xtrabackup简介与安装"></a>xtrabackup简介与安装</h1><h2 id="xtrabackup简介"><a href="#xtrabackup简介" class="headerlink" title="xtrabackup简介"></a>xtrabackup简介</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/mysql/8.0_xtrabackup_introduce.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-8.0.4/binary/redhat/7/x86_64/percona-xtrabackup-80-8.0.4-1.el7.x86_64.rpm</span><br><span class="line">yum localinstall percona-xtrabackup-80-8.0.4-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h1 id="授权和备份操作"><a href="#授权和备份操作" class="headerlink" title="授权和备份操作"></a>授权和备份操作</h1><h2 id="授权操作"><a href="#授权操作" class="headerlink" title="授权操作"></a>授权操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE USER &apos;backupuser&apos;@&apos;%&apos; IDENTIFIED with mysql_native_password BY &apos;123456&apos;;</span><br><span class="line">GRANT BACKUP_ADMIN, PROCESS, RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO &apos;backupuser&apos;@&apos;%&apos;;</span><br><span class="line">GRANT SELECT ON performance_schema.log_status TO &apos;backupuser&apos;@&apos;%&apos;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h2 id="备份操作"><a href="#备份操作" class="headerlink" title="备份操作"></a>备份操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xtrabackup --host=192.168.128.54 --port=3306 --user=backupuser --password=123456 --backup --target-dir=/data/backup/percona8.0</span><br></pre></td></tr></table></figure><h2 id="查看备份结果"><a href="#查看备份结果" class="headerlink" title="查看备份结果"></a>查看备份结果</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/mysql/8.0_xtrabackup.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">percona xtrabackup 8.0适合mysql/percona 8.0版本，如果是mysql 5.6/5.7版本，请参考官方的xtrabackup 2.4版本。</span><br></pre></td></tr></table></figure><p>未完待续。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h
      
    
    </summary>
    
    
      <category term="中间件技术" scheme="https://youxia999.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
      <category term="mysql" scheme="https://youxia999.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>centos7内核升级</title>
    <link href="https://youxia999.github.io/2019/04/01/centos7-kernel-upgrade/"/>
    <id>https://youxia999.github.io/2019/04/01/centos7-kernel-upgrade/</id>
    <published>2019-04-01T13:12:52.000Z</published>
    <updated>2019-11-14T02:38:44.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://linux.cn/article-8310-1.html</span><br></pre></td></tr></table></figure><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>基于以下三点，让我有种升级内核的冲动：<br>1.docker容器近期暴露的漏洞，问了”专家”说是都是内核的问题。<br>2.centos7还是用的3.10，centos8（RHEL用的是4.18版本）发布时间表还不知道。<br>3.linux的内核稳定版本已经到5.0.X。</p><h1 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h1><h2 id="检查已安装版本"><a href="#检查已安装版本" class="headerlink" title="检查已安装版本"></a>检查已安装版本</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/centos7/centos7_uname.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>修改下hostname先。</p><h2 id="升级内核"><a href="#升级内核" class="headerlink" title="升级内核"></a>升级内核</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/centos7/kernel-ml-x86_64.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/centos7/install_kernel_ml.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/centos7/grub.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>然后reboot。</p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/centos7/v5_uname.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><p>在新操作系统安装好以后，就先yum update、然后升级内核。<br>再安装其他的数据库、中间件、(java、go、python、ruby、erlang)语言runtime。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
    
      <category term="CentOS操作" scheme="https://youxia999.github.io/tags/CentOS%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>rhel8 beta尝鲜</title>
    <link href="https://youxia999.github.io/2019/03/31/rhel8-beta-experience/"/>
    <id>https://youxia999.github.io/2019/03/31/rhel8-beta-experience/</id>
    <published>2019-03-31T14:54:07.000Z</published>
    <updated>2019-12-03T02:15:54.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://zocodev.com/red-hat-enterprise-linux-8-beta.html</span><br><span class="line">https://zhuanlan.zhihu.com/p/56892392</span><br><span class="line">http://www.sohu.com/a/294442178_194621</span><br><span class="line">https://ywnz.com/linuxjc/3705.html</span><br><span class="line">https://www.kclouder.cn/rhel8-beta-experience/</span><br></pre></td></tr></table></figure><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><h2 id="安装过程概述"><a href="#安装过程概述" class="headerlink" title="安装过程概述"></a>安装过程概述</h2><ul><li>下载iso文件，准备安装</li><li>安装VMware 15.0 pro，并修改配置文件</li><li>初步安装完成后体验，发现网络没有配置，要配置网络</li><li>初步安装完成后体验，发现没有界面，要安装Workstation，而要安装Workstation，就需要先有注册帐号</li></ul><h2 id="下载iso文件，准备安装"><a href="#下载iso文件，准备安装" class="headerlink" title="下载iso文件，准备安装"></a>下载iso文件，准备安装</h2><p>本人从 <a href="https://access.cdn.redhat.com/content/origin/files/sha256/06/06bec9e7de3ebfcdb879804be8c452b69ba3e046daedac3731e1ccd169cfd316/rhel-8.0-beta-1-x86_64-dvd.iso?_auth_=1556668800_f465a37d228dfb88281c7cf7e9f8446f" target="_blank" rel="noopener">https://access.cdn.redhat.com/content/origin/files/sha256/06/06bec9e7de3ebfcdb879804be8c452b69ba3e046daedac3731e1ccd169cfd316/rhel-8.0-beta-1-x86_64-dvd.iso?_auth_=1556668800_f465a37d228dfb88281c7cf7e9f8446f</a> 下载的iso文件。</p><h2 id="安装VMware15-0，并修改配置文件"><a href="#安装VMware15-0，并修改配置文件" class="headerlink" title="安装VMware15.0，并修改配置文件"></a>安装VMware15.0，并修改配置文件</h2><p>安装VMware15.0，并加载iso文件，安装rhel8beta。会发现找不到本地磁盘，需要参考 <a href="https://ywnz.com/linuxjc/3705.html" target="_blank" rel="noopener">https://ywnz.com/linuxjc/3705.html</a> 修改配置文件，并继续安装。</p><h2 id="根据虚拟机的nat配置，配置网络"><a href="#根据虚拟机的nat配置，配置网络" class="headerlink" title="根据虚拟机的nat配置，配置网络"></a>根据虚拟机的nat配置，配置网络</h2><p>安装完成后，进入虚拟机体验，会发现ifconfig用不了，只能用ip a。<br>而网卡下没有ip。也就是在vmware之外，无法连接rhel服务，进行操作。<br>这时候只能参考知乎专栏进行相应的操作。<br>ip段可以看vmware的nat网络设置。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmcli c add type ethernet con-name ethX ifname ethX ipv4.addr 192.168.197.128 ipv4.gateway 192.168.197.1 ipv4.method manual</span><br><span class="line">nmcli c up ethX</span><br></pre></td></tr></table></figure></p><p>这时候，可以用mobaxterm等终端进行远程操作了。</p><h2 id="下载yum源"><a href="#下载yum源" class="headerlink" title="下载yum源"></a>下载yum源</h2><p>看了/etc/yum.repo.d/下面，基本就是空的，所以得想办法找一个yum源。谷歌一番，发现，只能用redhat官方的yum源。只能参考 <a href="http://www.sohu.com/a/294442178_194621" target="_blank" rel="noopener">http://www.sohu.com/a/294442178_194621</a> 去清华大学的镜像服务器上下载并上传到对应的目录。（注意不需要修改里面的内容）<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/centos7/centos8_yumrepo.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h2 id="执行一个yum命令，就会提示订阅"><a href="#执行一个yum命令，就会提示订阅" class="headerlink" title="执行一个yum命令，就会提示订阅"></a>执行一个yum命令，就会提示订阅</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/centos7/rhel8_subscription.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="执行命令订阅"><a href="#执行命令订阅" class="headerlink" title="执行命令订阅"></a>执行命令订阅</h2><p>查找一番，只能去redhat官网注册帐号，并订阅。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/centos7/rhel8_subscription2.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">subscription-manager register --username 帐号 --password &apos;密码&apos; --auto-attach</span><br></pre></td></tr></table></figure></p><h2 id="安装图形界面"><a href="#安装图形界面" class="headerlink" title="安装图形界面"></a>安装图形界面</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum groupinstall Workstation</span><br><span class="line">systemctl set-default graphical#默认启用</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/centos7/centos8_desktop.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h1 id="体验感受"><a href="#体验感受" class="headerlink" title="体验感受"></a>体验感受</h1><ul><li>yum被替换成dnf</li><li>ifconfig被替换成了nmcli，有点小难受</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
    
      <category term="CentOS操作" scheme="https://youxia999.github.io/tags/CentOS%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>gin源码分析第一版</title>
    <link href="https://youxia999.github.io/2019/03/24/golang-gin-source-code-v1/"/>
    <id>https://youxia999.github.io/2019/03/24/golang-gin-source-code-v1/</id>
    <published>2019-03-24T04:48:30.000Z</published>
    <updated>2019-12-03T02:22:00.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="demo源码"><a href="#demo源码" class="headerlink" title="demo源码"></a>demo源码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;encoding/json&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type User struct &#123;</span><br><span class="line">Id int</span><br><span class="line">Name string</span><br><span class="line">Age int</span><br><span class="line">&#125;</span><br><span class="line">func main()  &#123;</span><br><span class="line">defaultServer:=gin.New();</span><br><span class="line">defaultServer.RouterGroup.GET(&quot;/&quot;,defaultHandeler)</span><br><span class="line">v1 := defaultServer.Group(&quot;/v1&quot;)</span><br><span class="line">v1.GET(&quot;/ping&quot;,v1pingHandeler)</span><br><span class="line"></span><br><span class="line">defaultServer.Run(&quot;:8083&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func defaultHandeler(ctx *gin.Context)  &#123;</span><br><span class="line">ctx.JSON(200,gin.H&#123;</span><br><span class="line">&quot;status&quot;:200,</span><br><span class="line">&quot;success&quot;:true,</span><br><span class="line">&quot;data&quot;:&quot;&#123;&#125;&quot;,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">func v1pingHandeler(context *gin.Context) &#123;</span><br><span class="line">user:=User&#123;1,&quot;golang&quot;,20&#125;</span><br><span class="line">data,_:=json.Marshal(user)</span><br><span class="line">fmt.Println(user,data)</span><br><span class="line">context.JSON(200,gin.H&#123;</span><br><span class="line">&quot;status&quot;:200,</span><br><span class="line">&quot;success&quot;:true,</span><br><span class="line">&quot;data&quot;:string(data),</span><br><span class="line">&#125;)</span><br><span class="line">//context.Redirect(http.StatusMovedPermanently,&quot;https://github.com/gin-goinc/gin&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/go/ginsourcev1.png" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;demo源码&quot;&gt;&lt;a href=&quot;#demo源码&quot; class=&quot;headerlink&quot; title=&quot;demo源码&quot;&gt;&lt;/a&gt;demo源码&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;cod
      
    
    </summary>
    
    
      <category term="golang" scheme="https://youxia999.github.io/tags/golang/"/>
    
      <category term="编程框架与中间件客户端" scheme="https://youxia999.github.io/tags/%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Percona Server8.0安装和初步使用</title>
    <link href="https://youxia999.github.io/2019/03/04/percona-server-for-mysql-8-0-install/"/>
    <id>https://youxia999.github.io/2019/03/04/percona-server-for-mysql-8-0-install/</id>
    <published>2019-03-04T02:43:32.000Z</published>
    <updated>2019-12-03T02:43:18.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本文参考资料"><a href="#本文参考资料" class="headerlink" title="本文参考资料"></a>本文参考资料</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/vkingnew/article/details/85220187</span><br><span class="line">https://www.mayi888.com/archives/59253</span><br><span class="line">https://www.percona.com/doc/percona-server/LATEST/installation/yum_repo.html</span><br><span class="line">https://blog.csdn.net/myNameIssls/article/details/84031426</span><br></pre></td></tr></table></figure><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><p>参考 <a href="https://youxia999.github.io/2016/12/21/mysql5-7-install/">https://youxia999.github.io/2016/12/21/mysql5-7-install/</a> ，安装软件。</p><h2 id="安装需要的软件"><a href="#安装需要的软件" class="headerlink" title="安装需要的软件"></a>安装需要的软件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://repo.percona.com/release/7Server/RPMS/x86_64/jemalloc-3.6.0-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh jemalloc-3.6.0-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="删除废弃的软件包"><a href="#删除废弃的软件包" class="headerlink" title="删除废弃的软件包"></a>删除废弃的软件包</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps  mariadb-libs</span><br></pre></td></tr></table></figure><h2 id="按照需要的软件："><a href="#按照需要的软件：" class="headerlink" title="按照需要的软件："></a>按照需要的软件：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install net-tools libaio perl openssl openssl-devel perl-Data-Dumper  perl-JSON</span><br><span class="line">wget https://www.percona.com/downloads/Percona-Server-8.0/Percona-Server-8.0.13-3/binary/redhat/7/x86_64/Percona-Server-8.0.13-3-ra920dd6-el7-x86_64-bundle.tar</span><br></pre></td></tr></table></figure><h2 id="解压，查看软件包列表："><a href="#解压，查看软件包列表：" class="headerlink" title="解压，查看软件包列表："></a>解压，查看软件包列表：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ll percona*.rpm</span><br></pre></td></tr></table></figure><h2 id="安装过程："><a href="#安装过程：" class="headerlink" title="安装过程："></a>安装过程：</h2><p>rpm -ivh percona-*.rpm</p><h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/mysql/&#123;log,binlogs,run,data&#125;</span><br><span class="line">touch /data/mysql/run/mysqld.pid</span><br><span class="line">chown -R mysql:mysql /data/mysql</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --initialize-insecure --user=mysql --basedir=/data/mysql --datadir=/data/mysql/data</span><br></pre></td></tr></table></figure><h2 id="配置文件-etc-my-cnf"><a href="#配置文件-etc-my-cnf" class="headerlink" title="配置文件/etc/my.cnf"></a>配置文件/etc/my.cnf</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Percona Server template configuration</span><br><span class="line">#</span><br><span class="line"># For advice on how to change settings please see</span><br><span class="line"># http://dev.mysql.com/doc/refman/8.0/en/server-configuration-defaults.html</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">#</span><br><span class="line"># Remove leading # and set to the amount of RAM for the most important data</span><br><span class="line"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class="line"># innodb_buffer_pool_size = 128M</span><br><span class="line">#</span><br><span class="line"># Remove the leading &quot;# &quot; to disable binary logging</span><br><span class="line"># Binary logging captures changes between backups and is enabled by</span><br><span class="line"># default. It&apos;s default setting is log_bin=binlog</span><br><span class="line"># disable_log_bin</span><br><span class="line">#</span><br><span class="line"># Remove leading # to set options mainly useful for reporting servers.</span><br><span class="line"># The server defaults are faster for transactions and fast SELECTs.</span><br><span class="line"># Adjust sizes as needed, experiment to find the optimal values.</span><br><span class="line"># join_buffer_size = 128M</span><br><span class="line"># sort_buffer_size = 2M</span><br><span class="line"># read_rnd_buffer_size = 2M</span><br><span class="line">#</span><br><span class="line"># Remove leading # to revert to previous value for default_authentication_plugin,</span><br><span class="line"># this will increase compatibility with older clients. For background, see:</span><br><span class="line"># https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_default_authentication_plugin</span><br><span class="line"># default-authentication-plugin=mysql_native_password</span><br><span class="line">port = 3306</span><br><span class="line">#basedir = /data/mysql这里注释掉，如果不注释掉，percona会报错：</span><br><span class="line">datadir = /data/mysql/data</span><br><span class="line">socket = /data/mysql/mysql.sock</span><br><span class="line">log-error = /data/mysql/log/mysqld.log</span><br><span class="line">pid-file = /data/mysql/run/mysqld.pid</span><br><span class="line">log-bin = /data/mysql/binlogs/mysql-bin</span><br><span class="line">slow_query_log = 1</span><br><span class="line">slow_query_log_file = /data/mysql/log/mysql_slow_query.log</span><br><span class="line">long_query_time = 5</span><br><span class="line">symbolic-links=0</span><br><span class="line">character_set_server=utf8mb4</span><br><span class="line">collation_server=utf8mb4_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">innodb_undo_log_truncate=off</span><br><span class="line">#允许时间字段为&quot;0000-00-00 00:00:00&quot;</span><br><span class="line">sql_mode=&apos;STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&apos;</span><br><span class="line">#打开函数功能</span><br><span class="line">log_bin_trust_function_creators=1</span><br><span class="line"># general</span><br><span class="line">table_open_cache = 200000</span><br><span class="line">table_open_cache_instances=64</span><br><span class="line">back_log=3500</span><br><span class="line">max_connections=110000</span><br><span class="line"># files</span><br><span class="line">innodb_file_per_table</span><br><span class="line">innodb_log_file_size=1G</span><br><span class="line">innodb_log_files_in_group=2</span><br><span class="line">innodb_open_files=4000</span><br><span class="line"># buffers</span><br><span class="line">innodb_buffer_pool_size= 2G</span><br><span class="line">innodb_buffer_pool_instances=8</span><br><span class="line">innodb_log_buffer_size=256M</span><br><span class="line"># tune</span><br><span class="line">innodb_doublewrite= 1</span><br><span class="line">innodb_thread_concurrency=0</span><br><span class="line">innodb_flush_log_at_trx_commit= 0</span><br><span class="line">innodb_flush_method=O_DIRECT_NO_FSYNC</span><br><span class="line">innodb_max_dirty_pages_pct=90</span><br><span class="line">innodb_max_dirty_pages_pct_lwm=10</span><br><span class="line">innodb_lru_scan_depth=2048</span><br><span class="line">innodb_page_cleaners=4</span><br><span class="line">join_buffer_size=256K</span><br><span class="line">sort_buffer_size=256K</span><br><span class="line">innodb_use_native_aio=1</span><br><span class="line">innodb_stats_persistent = 1</span><br><span class="line">innodb_spin_wait_delay=96</span><br><span class="line">innodb_adaptive_flushing = 1</span><br><span class="line">innodb_flush_neighbors = 0</span><br><span class="line">innodb_read_io_threads = 16</span><br><span class="line">innodb_write_io_threads = 16</span><br><span class="line">innodb_io_capacity=1500</span><br><span class="line">innodb_io_capacity_max=2500</span><br><span class="line">innodb_purge_threads=4</span><br><span class="line">innodb_adaptive_hash_index=0</span><br><span class="line">max_prepared_stmt_count=1000000</span><br><span class="line">innodb_monitor_enable = ‘%’</span><br><span class="line">performance_schema = ON</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>systemctl start mysqld.service<br>systemctl status mysqld.service</p><h2 id="初始化密码和权限"><a href="#初始化密码和权限" class="headerlink" title="初始化密码和权限"></a>初始化密码和权限</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -h 127.0.0.1 -u root</span><br><span class="line">alter user &apos;root&apos;@&apos;localhost&apos; identified with mysql_native_password by &apos;123456&apos;; --查询了资料，percona 8.0的密码插件已变成caching_sha2_password</span><br><span class="line">UPDATE user SET Host = &apos;%&apos; WHERE User = &apos;root&apos;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h1 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/mysql/percona.png" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;本文参考资料&quot;&gt;&lt;a href=&quot;#本文参考资料&quot; class=&quot;headerlink&quot; title=&quot;本文参考资料&quot;&gt;&lt;/a&gt;本文参考资料&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;cod
      
    
    </summary>
    
    
      <category term="中间件技术" scheme="https://youxia999.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
      <category term="mysql" scheme="https://youxia999.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>golang 1.12初步体验</title>
    <link href="https://youxia999.github.io/2019/02/26/golang-1-12-experience/"/>
    <id>https://youxia999.github.io/2019/02/26/golang-1-12-experience/</id>
    <published>2019-02-26T11:10:08.000Z</published>
    <updated>2019-12-03T02:21:48.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>golang 1.12于2月25号发布了，迫不及待的体验了一把。<br>除了下载golang1.12，goland也更下2018.3.4。</p><h1 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h1><p>把之前的项目（1.11版本开发）的mod更新了，设置了把代理（不设置代理，就要用replace）。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/go/go_mod_settings.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br>然后体验了一把go list -m -json all。贼快了。有点激动哈。<br>重温下go mod相关的命令。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/go/go_mod_command.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;golang 1.12于2月25号发布了，迫不及待的体验了一把。&lt;br&gt;除了下载golang1.12，goland也更下2018.3.4。&lt;
      
    
    </summary>
    
    
      <category term="golang" scheme="https://youxia999.github.io/tags/golang/"/>
    
      <category term="编程框架与中间件客户端" scheme="https://youxia999.github.io/tags/%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>spring框架系列之spring cloud sleuth</title>
    <link href="https://youxia999.github.io/2019/02/09/spring-cloud-2x-cloud-sleuth/"/>
    <id>https://youxia999.github.io/2019/02/09/spring-cloud-2x-cloud-sleuth/</id>
    <published>2019-02-09T09:15:36.000Z</published>
    <updated>2019-12-03T03:13:00.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于spring-cloud-2-X系列"><a href="#关于spring-cloud-2-X系列" class="headerlink" title="关于spring cloud 2.X系列"></a>关于spring cloud 2.X系列</h1><p>spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。<br>Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。<br>通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring data redis client、spring web service、prometheus client，进而集大成。<br>Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。<br>从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于spring-cloud-2-X系列&quot;&gt;&lt;a href=&quot;#关于spring-cloud-2-X系列&quot; class=&quot;headerlink&quot; title=&quot;关于spring cloud 2.X系列&quot;&gt;&lt;/a&gt;关于spring cloud 2.X系列&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="java" scheme="https://youxia999.github.io/tags/java/"/>
    
      <category term="编程框架与中间件客户端" scheme="https://youxia999.github.io/tags/%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>spring框架系列之spring-cloud-stream</title>
    <link href="https://youxia999.github.io/2019/02/02/spring-cloud-2x-cloud-stream/"/>
    <id>https://youxia999.github.io/2019/02/02/spring-cloud-2x-cloud-stream/</id>
    <published>2019-02-02T09:44:15.000Z</published>
    <updated>2019-12-03T03:13:00.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于spring-cloud-2-X系列"><a href="#关于spring-cloud-2-X系列" class="headerlink" title="关于spring cloud 2.X系列"></a>关于spring cloud 2.X系列</h1><p>spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。<br>Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。<br>通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring dat redis client、spring web service、prometheus client，进而集大成。<br>Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。<br>从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client。</p><h1 id="个人研判"><a href="#个人研判" class="headerlink" title="个人研判"></a>个人研判</h1><p>此module不具备商用要求。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于spring-cloud-2-X系列&quot;&gt;&lt;a href=&quot;#关于spring-cloud-2-X系列&quot; class=&quot;headerlink&quot; title=&quot;关于spring cloud 2.X系列&quot;&gt;&lt;/a&gt;关于spring cloud 2.X系列&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="java" scheme="https://youxia999.github.io/tags/java/"/>
    
      <category term="编程框架与中间件客户端" scheme="https://youxia999.github.io/tags/%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>2018年度的技术总结</title>
    <link href="https://youxia999.github.io/2019/01/01/jishuzongjie-2018/"/>
    <id>https://youxia999.github.io/2019/01/01/jishuzongjie-2018/</id>
    <published>2019-01-01T02:35:47.000Z</published>
    <updated>2019-12-03T04:19:41.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>新年了，按惯例，要盘盘肚子里面的“存货”了.</p><h1 id="2018年度已掌握的技术学习"><a href="#2018年度已掌握的技术学习" class="headerlink" title="2018年度已掌握的技术学习"></a>2018年度已掌握的技术学习</h1><p>已初步掌握的技术的进展，即具体技术流水账：</p><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><p>代码写的有点少，spring boot2.0、spring cloud2.X没有过多的深入和落地。</p><h2 id="go语言"><a href="#go语言" class="headerlink" title="go语言"></a>go语言</h2><p>没有很深入的学，就学了gin、go-kit的皮毛、了解协程的调度。</p><h2 id="中间件技术"><a href="#中间件技术" class="headerlink" title="中间件技术"></a>中间件技术</h2><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>还是有点云里雾里，还是没有彻底搞清楚线程模型，线程调度</p><h3 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h3><p>还是有点云里雾里，还是没有彻底掌握</p><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p>新学了一个codis的方案，这个方案有点重，有些命令用不了，比如keys *（没有从group做聚合）</p><h3 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h3><p>还是保留在会用的阶段。</p><h3 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h3><p>还是保留在会用的阶段。</p><h3 id="elastic-job-lite"><a href="#elastic-job-lite" class="headerlink" title="elastic-job-lite"></a>elastic-job-lite</h3><p>elastic-job-lite整个流程，看了一遍源码。</p><h3 id="keepalived高可用技术"><a href="#keepalived高可用技术" class="headerlink" title="keepalived高可用技术"></a>keepalived高可用技术</h3><p>这一年没有什么进展。</p><h2 id="系统工具-centos技术"><a href="#系统工具-centos技术" class="headerlink" title="系统工具-centos技术"></a>系统工具-centos技术</h2><p>这一年没有什么进展。</p><h2 id="中间件技术-1"><a href="#中间件技术-1" class="headerlink" title="中间件技术"></a>中间件技术</h2><h3 id="注册中心和配置中心"><a href="#注册中心和配置中心" class="headerlink" title="注册中心和配置中心"></a>注册中心和配置中心</h3><p>还是eureka，配置中心还是用的携程的apollo，至于阿里云的nacos，继续跟进吧。</p><h3 id="docker和kubernetes"><a href="#docker和kubernetes" class="headerlink" title="docker和kubernetes"></a>docker和kubernetes</h3><p>这一年，开始捣鼓portainer和kubernetes。下半年的时候，花了一些时间捣鼓了一下kubernetes,并结合之前的技术方案，捣鼓了一套基于apollo+kubernetes方案（后面发现社区有公司也是采用类似的方案）:见本文附录。<br>总的感觉，kubernetes是个好东西。如果要推动，需要自上而下的推动。现在这个产品驱动开发的公司，技术老大的重心由偏向于产品层面，所以，只能在线下玩一玩。<br>如果要推动，需要自上而下的推动。现在这个产品驱动开发的公司，技术老大的重心由偏向于产品层面，所以，只能在线下玩一玩。运维做的有点多了。</p><h1 id="监控技术"><a href="#监控技术" class="headerlink" title="监控技术"></a>监控技术</h1><h3 id="容器监控技术"><a href="#容器监控技术" class="headerlink" title="容器监控技术"></a>容器监控技术</h3><p>还是比较熟悉prometheus。也了解了cadvisord技术和influxdb技术。</p><h3 id="zipkin"><a href="#zipkin" class="headerlink" title="zipkin"></a>zipkin</h3><p>链路监控还是比较熟悉。</p><h3 id="应用监控和中间件监控"><a href="#应用监控和中间件监控" class="headerlink" title="应用监控和中间件监控"></a>应用监控和中间件监控</h3><p>还是比较熟悉prometheus。</p><h2 id="技术架构方面的收获"><a href="#技术架构方面的收获" class="headerlink" title="技术架构方面的收获"></a>技术架构方面的收获</h2><h3 id="架构方面的书籍"><a href="#架构方面的书籍" class="headerlink" title="架构方面的书籍"></a>架构方面的书籍</h3><p>本人工作伊始，到现在一直都有接触各种“架构”模式：SOA、分层、服务化、微服务、云原生。相关的词汇陈出不穷。<br>所以，今年花了比较多的时间在理解云原生与微服务的区别（后面发现其实没啥本质区别，就是升级版）。并读了一本质量还行的书《云原生架构下的微服务最佳实践》。</p><h4 id="综合评价"><a href="#综合评价" class="headerlink" title="综合评价"></a>综合评价</h4><p>先说综合评价，这本书还是有点货的，里面的很多技术是可以引入到项目的技术体系。<br>如果让我推荐，我会推荐读。然后，根据组织结构，去各个技术的官方站点，看官方文档，仔细的撸一遍代码和命令。</p><h4 id="这本书的组织架构"><a href="#这本书的组织架构" class="headerlink" title="这本书的组织架构"></a>这本书的组织架构</h4><p>从这本书的组织结构，可以看出，这是位有“货”的架构师。从传统架构谈到了:</p><ul><li>架构模式（云原生、微服务）</li><li>公有或者私有云(一笔带过)</li><li>云上技术基础设施（数据库、缓存、消息中间件、任务调度中间件、自动化、持续集成、监控、框架、分布式ID）</li><li>分布式系统面临的一致性</li><li>分布式系统面临的可用性</li><li>分布式系统面临的扩展性</li><li>分布式系统面临的性能</li><li>未来值得关注的方向</li><li>研发流程、组织结构、研发文化</li></ul><h4 id="这本书的槽点"><a href="#这本书的槽点" class="headerlink" title="这本书的槽点"></a>这本书的槽点</h4><p>下面本人将按组织结构的顺序进行点评。</p><h4 id="架构模式"><a href="#架构模式" class="headerlink" title="架构模式"></a>架构模式</h4><p>本书花了6页的篇幅，探讨云原生的概念。个人认为还是比较浅，还可以深入点。后面又花了40多页的篇幅探讨为什么要引入微服务架构、微服务设计原则、实施的先决条件（很重要的一个点）、服务划分模式、接口设计、接口可视化（对于团队开发很重要）。基本算是合格。</p><h4 id="公有-私有云"><a href="#公有-私有云" class="headerlink" title="公有/私有云"></a>公有/私有云</h4><p>有点遗憾，这块基本上是一笔带过。<br>其实还是可以提一下GCP、AWS、IBM、Azure（毕竟公有云现在如日中天）、基于openstack或者kvm组成的私有云，以及基于这些云上的容器云技术kubernetes。</p><h4 id="云上技术基础设施"><a href="#云上技术基础设施" class="headerlink" title="云上技术基础设施"></a>云上技术基础设施</h4><p>云上技术基础设施：数据库、缓存、消息中间件、任务调度中间件、自动化、持续集成、监控、框架、分布式ID。<br>这些技术分成了第二章的后半章、第三章整章来说，个人认为，从篇幅上是很不够的。应该是每个技术安排一章。<br>不过也理解，纸质书籍有其局限性，还要出版社方面的考虑。<br>因为纸质书籍的局限性，给了博客一些机会，本人的博客，也细化了这些技术。<br></p><h4 id="分布式系统面临的可用性"><a href="#分布式系统面临的可用性" class="headerlink" title="分布式系统面临的可用性"></a>分布式系统面临的可用性</h4><p>谈到了几点：可用性的几板斧-重试、流控、熔断、容量预估、隔离。<br>至于服务端入口处的高可用，没有谈论到。</p><h4 id="分布式系统面临的可扩展性"><a href="#分布式系统面临的可扩展性" class="headerlink" title="分布式系统面临的可扩展性"></a>分布式系统面临的可扩展性</h4><p>谈到了一点：AKF。<br>没有记错的话，架构即未来也谈到了这个方法论。</p><h4 id="分布式系统面临的性能"><a href="#分布式系统面临的性能" class="headerlink" title="分布式系统面临的性能"></a>分布式系统面临的性能</h4><p>性能这块，其实就几板斧：同步变异步、缓存、数据库分库分表、消息队列。</p><h4 id="分布式系统面临的一致性"><a href="#分布式系统面临的一致性" class="headerlink" title="分布式系统面临的一致性"></a>分布式系统面临的一致性</h4><p>本书从传统的定义引入分布式系统的一致性，然后做了分类（数据为中心的一致性、用户为中心的一致性）。然后讲了两阶段提交的局限性、三阶段提交的局限性。以及业界常用的几种解决方案：<br><br>重试机制、本地记录日志、可靠事件机制、TCC事务模型。另外还提到了分布式锁。其实分布式锁、分布式id、可以单独起一章讨论。</p><h4 id="后续值得关注的技术、组织文化、研发流程"><a href="#后续值得关注的技术、组织文化、研发流程" class="headerlink" title="后续值得关注的技术、组织文化、研发流程"></a>后续值得关注的技术、组织文化、研发流程</h4><p>至于这块，当小说看了。尤其是组织、研发流程变化，最好是自上而下的推动，而不是自下而上。</p><h3 id="形成自己的通用技术架构图"><a href="#形成自己的通用技术架构图" class="headerlink" title="形成自己的通用技术架构图"></a>形成自己的通用技术架构图</h3><p>形成自己的业务平台通用技术架构图:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/architectrue/tech_architectrue_shuiyin.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;新年了，按惯例，要盘盘肚子里面的“存货”了.&lt;/p&gt;
&lt;h1 id=&quot;2018年度已掌握的技术学习&quot;&gt;&lt;a href=&quot;#2018年度已掌握
      
    
    </summary>
    
    
      <category term="杂项" scheme="https://youxia999.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>玩转kubernetes之kubernetes阶段性成果</title>
    <link href="https://youxia999.github.io/2018/12/30/container-kubernetes-jieduanxing-zongjie/"/>
    <id>https://youxia999.github.io/2018/12/30/container-kubernetes-jieduanxing-zongjie/</id>
    <published>2018-12-30T02:38:44.000Z</published>
    <updated>2019-11-14T02:09:28.242Z</updated>
    
    <content type="html"><![CDATA[<p>这两天到搭建好的kubernetes集群上，把公司的一个项目放到了集群上。最终的架构如下。</p><h1 id="未在线上环境校验的方案"><a href="#未在线上环境校验的方案" class="headerlink" title="未在线上环境校验的方案"></a>未在线上环境校验的方案</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/architectrue/kubernetes_architecture.png" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这两天到搭建好的kubernetes集群上，把公司的一个项目放到了集群上。最终的架构如下。&lt;/p&gt;
&lt;h1 id=&quot;未在线上环境校验的方案&quot;&gt;&lt;a href=&quot;#未在线上环境校验的方案&quot; class=&quot;headerlink&quot; title=&quot;未在线上环境校验的方案&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="容器技术" scheme="https://youxia999.github.io/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>玩转kubernetes之kubernetes1.8安装</title>
    <link href="https://youxia999.github.io/2018/12/28/container-kubernetes-1-8-install/"/>
    <id>https://youxia999.github.io/2018/12/28/container-kubernetes-1-8-install/</id>
    <published>2018-12-28T06:04:49.000Z</published>
    <updated>2019-11-14T02:09:28.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景资料"><a href="#背景资料" class="headerlink" title="背景资料"></a>背景资料</h1><h2 id="本文主要参考资料-建议收藏"><a href="#本文主要参考资料-建议收藏" class="headerlink" title="本文主要参考资料(建议收藏)"></a>本文主要参考资料(建议收藏)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://jimmysong.io/kubernetes-handbook/</span><br><span class="line">https://anjia0532.github.io/2017/11/15/gcr-io-image-mirror/</span><br></pre></td></tr></table></figure><h2 id="本文的收获"><a href="#本文的收获" class="headerlink" title="本文的收获"></a>本文的收获</h2><p>实践“纸上读来终觉浅，绝知此事要躬行”，上手操作<kubernetes handbook>第5章</kubernetes></p><h1 id="安装之前三件事"><a href="#安装之前三件事" class="headerlink" title="安装之前三件事"></a>安装之前三件事</h1><h2 id="熟悉kubernetes基本架构和工作原理"><a href="#熟悉kubernetes基本架构和工作原理" class="headerlink" title="熟悉kubernetes基本架构和工作原理"></a>熟悉kubernetes基本架构和工作原理</h2><p>建议好好看《Kubernetes Handbook》1-4章或者《kubernetes in action》(中文版已经出版).了解整体架构、以及基本概念模型：</p><ul><li>cluster与node</li><li>rabc：</li><li>pod：简单的理解就是一组容器，基础容器是</li><li>deployment(pod升级版)：</li><li>service：</li><li>configmap：</li></ul><h2 id="本文使用版本"><a href="#本文使用版本" class="headerlink" title="本文使用版本"></a>本文使用版本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">centos:CentOS Linux release 7.3.1611 (Core) </span><br><span class="line">kubernetes:1.8.5</span><br><span class="line">flannel:0.7.1</span><br><span class="line">docker:1.12.6</span><br><span class="line">harbor:1.5.4(依赖的docker为1.12.6、docker-compose为1.12.0)</span><br><span class="line">etcd:3.3.5</span><br><span class="line">cfssl_linux-amd64</span><br><span class="line">cfssljson_linux-amd64</span><br><span class="line">cfssl-certinfo_linux-amd64</span><br></pre></td></tr></table></figure><h2 id="ip和服务部署规划"><a href="#ip和服务部署规划" class="headerlink" title="ip和服务部署规划"></a>ip和服务部署规划</h2><p>因为测试环境资源有限，尽量的合理利用资源。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10.2.1.30(centos7): harbor0.5(docker1.10.3、 docker-compose1.10)、etcd3.3.5</span><br><span class="line">10.2.1.33(centos7): etcd3.3.5</span><br><span class="line">10.2.1.31(centos7): etcd3.3.5</span><br><span class="line">10.2.1.37(centos7): docker1.12.6、flanneld0.7.1、kubernetes master(kube-apiserver 1.8.5、kube-scheduler1.8.5、kube-controller-manager1.8.5)、kubernetes node(kubelet1.8.5、kube-proxy1.8.5)</span><br><span class="line">10.2.1.38(centos7): docker1.12.6、flanneld0.7.1、kubernetes node(kubelet1.8.5、kube-proxy1.8.5)</span><br><span class="line">10.2.1.39(centos7): docker1.12.6、flanneld0.7.1、kubernetes node(kubelet1.8.5、kube-proxy1.8.5)</span><br></pre></td></tr></table></figure></p><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="安装etcd集群"><a href="#安装etcd集群" class="headerlink" title="安装etcd集群"></a>安装etcd集群</h2><p>可以安装一个etcd集群，也可以用一个已有集群。<font color="red">本文安装的etcd没有采用Kubernetes Handbook的证书，觉得麻烦</font><br>并创建key-value。</p><h2 id="启动harbor服务"><a href="#启动harbor服务" class="headerlink" title="启动harbor服务"></a>启动harbor服务</h2><p>安装和启动harbor服务。并将一些镜像从anjia0532上pull下来，push到私有仓库。供后续步骤使用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">k8s-dns-kube-dns-amd64:1.14.1</span><br><span class="line">k8s-dns-dnsmasq-nanny-amd64:1.14.1</span><br><span class="line">k8s-dns-sidecar-amd64:1.14.1</span><br><span class="line"></span><br><span class="line">heapster-amd64:v1.3.0</span><br><span class="line">heapster-grafana-amd64:v4.0.2</span><br><span class="line">heapster-influxdb-amd64:v1.1.1</span><br><span class="line">fluentd-elasticsearch:1.22</span><br><span class="line">kibana:4.6.1</span><br><span class="line"></span><br><span class="line">kubernetes-dashboard-amd64:v1.6.3</span><br></pre></td></tr></table></figure></p><h2 id="安装docker1-12-6"><a href="#安装docker1-12-6" class="headerlink" title="安装docker1.12.6"></a>安装docker1.12.6</h2><p>可以参考之前的文章，不再赘述，记得要配置私有仓库，否则，很多功能不好实现。</p><h2 id="安装flanneld0-7-1"><a href="#安装flanneld0-7-1" class="headerlink" title="安装flanneld0.7.1"></a>安装flanneld0.7.1</h2><p>参考 <a href="https://jimmysong.io/kubernetes-handbook/practice/flannel-installation.html" target="_blank" rel="noopener">https://jimmysong.io/kubernetes-handbook/practice/flannel-installation.html</a> 安装flanneld。</p><p><font color="red">注意：/etc/sysconfig/flanneld配置文件</font><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Flanneld configuration options  </span><br><span class="line"></span><br><span class="line"># etcd url location.  Point this to the server where etcd runs</span><br><span class="line">FLANNEL_ETCD_ENDPOINTS=&quot;http://10.2.1.30:2379,http://10.2.1.31:2379,http://10.2.1.33:2379&quot;</span><br><span class="line"></span><br><span class="line"># etcd config key.  This is the configuration key that flannel queries</span><br><span class="line"># For address range assignment</span><br><span class="line">FLANNEL_ETCD_PREFIX=&quot;/kube-centos/network&quot;</span><br><span class="line"></span><br><span class="line"># Any additional options that you want to pass</span><br><span class="line">FLANNEL_OPTIONS=&quot;--iface=ens192&quot;</span><br></pre></td></tr></table></figure></p><p>并在etcd创建kubernetes集群的flanneld网络config<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/docker/falnneldconfig.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h2 id="准备证书"><a href="#准备证书" class="headerlink" title="准备证书"></a>准备证书</h2><h3 id="安装CSL文件"><a href="#安装CSL文件" class="headerlink" title="安装CSL文件"></a>安装CSL文件</h3><h3 id="创建CA证书"><a href="#创建CA证书" class="headerlink" title="创建CA证书"></a>创建CA证书</h3><p>参考 <a href="https://jimmysong.io/kubernetes-handbook/practice/create-tls-and-secret-key.html" target="_blank" rel="noopener">https://jimmysong.io/kubernetes-handbook/practice/create-tls-and-secret-key.html</a> 创建证书，并分发到所有kubernetes node。</p><h2 id="安装kubernetes-master"><a href="#安装kubernetes-master" class="headerlink" title="安装kubernetes master"></a>安装kubernetes master</h2><h3 id="准备-etc-kubernetes-config配置文件"><a href="#准备-etc-kubernetes-config配置文件" class="headerlink" title="准备/etc/kubernetes/config配置文件"></a>准备/etc/kubernetes/config配置文件</h3><p><font color="red">该配置文件同时被kube-apiserver、kube-controller-manager、kube-scheduler、kubelet、kube-proxy使用。</font><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">###</span><br><span class="line"># kubernetes system config</span><br><span class="line">#</span><br><span class="line"># The following values are used to configure various aspects of all</span><br><span class="line"># kubernetes services, including</span><br><span class="line">#</span><br><span class="line">#   kube-apiserver.service</span><br><span class="line">#   kube-controller-manager.service</span><br><span class="line">#   kube-scheduler.service</span><br><span class="line">#   kubelet.service</span><br><span class="line">#   kube-proxy.service</span><br><span class="line"># logging to stderr means we get it in the systemd journal</span><br><span class="line">KUBE_LOGTOSTDERR=&quot;--logtostderr=true&quot;</span><br><span class="line"></span><br><span class="line"># journal message level, 0 is debug</span><br><span class="line">KUBE_LOG_LEVEL=&quot;--v=0&quot;</span><br><span class="line"></span><br><span class="line"># Should this cluster be allowed to run privileged docker containers</span><br><span class="line">KUBE_ALLOW_PRIV=&quot;--allow-privileged=false&quot;</span><br><span class="line"></span><br><span class="line"># How the controller-manager, scheduler, and proxy find the apiserver</span><br><span class="line">KUBE_MASTER=&quot;--master=http://10.2.1.37:8080&quot;</span><br></pre></td></tr></table></figure></p><h3 id="准备-etc-kubernetes-apiserver文件"><a href="#准备-etc-kubernetes-apiserver文件" class="headerlink" title="准备/etc/kubernetes/apiserver文件"></a>准备/etc/kubernetes/apiserver文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">###</span><br><span class="line">## kubernetes system config</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">## The following values are used to configure the kube-apiserver</span><br><span class="line">## The address on the local server to listen to.</span><br><span class="line">#KUBE_API_ADDRESS=&quot;--address=bc.authorization.k8s.io/v10.2.1.30&quot;</span><br><span class="line">KUBE_API_ADDRESS=&quot;--advertise-address=10.2.1.37 --bind-address=10.2.1.37 --insecure-bind-address=10.2.1.37&quot;</span><br><span class="line"></span><br><span class="line">## The port on the local server to listen on.</span><br><span class="line">KUBE_API_PORT=&quot;--port=8080&quot;</span><br><span class="line"></span><br><span class="line">## Port minions listen on</span><br><span class="line">KUBELET_PORT=&quot;--kubelet-port=10250&quot;</span><br><span class="line"></span><br><span class="line">## Comma separated list of nodes in the etcd cluster</span><br><span class="line">KUBE_ETCD_SERVERS=&quot;--etcd-servers=http://10.2.1.30:2379,http://10.2.1.31:2379,http://10.2.1.33:2379&quot;</span><br><span class="line"></span><br><span class="line">## Address range to use for services</span><br><span class="line">#KUBE_SERVICE_ADDREKUBELET_POD_INFRA_CONTAINERSSES=&quot;--service-cluster-ip-range=172.17.0.0/16&quot;</span><br><span class="line"></span><br><span class="line">#KUBE_ANONYMOUS_AUTH=&quot;--anonymous-auth=false&quot;</span><br><span class="line">KUBE_SERVICE_ADDRESSES=&quot;--service-cluster-ip-range=172.19.0.0/16&quot;</span><br><span class="line"></span><br><span class="line">## default admission control policies</span><br><span class="line">#KUBE_ADMISSION_CONTROL=&quot;--admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota&quot;</span><br><span class="line">KUBE_ADMISSION_CONTROL=&quot;--admission-control=ServiceAccount,NamespaceLifecycle,NamespaceExists,LimitRanger,ResourceQuota&quot;</span><br><span class="line">KUBE_API_ARGS=&quot;--authorization-mode=RBAC --runtime-config=rbac.authorization.k8s.io/v1beta1 --kubelet-https=true --experimental-bootstrap-token-auth --token-auth-file=/etc/kubernetes/token.csv --service-node-port-range=30000-32767 --tls-cert-file=/etc/kubernetes/ssl/kubernetes.pem --tls-private-key-file=/etc/kubernetes/ssl/kubernetes-key.pem --client-ca-file=/etc/kubernetes/ssl/ca.pem --service-account-key-file=/etc/kubernetes/ssl/ca-key.pem  --enable-swagger-ui=true --apiserver-count=3 --audit-log-maxage=30 --audit-log-maxbackup=3 --audit-log-maxsize=100 --audit-log-path=/var/lib/audit.log --event-ttl=1h&quot;</span><br></pre></td></tr></table></figure><h3 id="配置kube-apiserver的systemd"><a href="#配置kube-apiserver的systemd" class="headerlink" title="配置kube-apiserver的systemd"></a>配置kube-apiserver的systemd</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Service</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line">#After=etcd.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/apiserver</span><br><span class="line">ExecStart=/usr/bin/kube-apiserver \</span><br><span class="line">    $KUBE_LOGTOSTDERR \</span><br><span class="line">    $KUBE_LOG_LEVEL \</span><br><span class="line">    $KUBE_ETCD_SERVERS \</span><br><span class="line">    $KUBE_API_ADDRESS \</span><br><span class="line">    $KUBE_API_PORT \</span><br><span class="line">            $KUBELET_PORT \</span><br><span class="line">    $KUBE_ALLOW_PRIV \</span><br><span class="line">    $KUBE_SERVICE_ADDRESSES \</span><br><span class="line">    $KUBE_ADMISSION_CONTROL \</span><br><span class="line">            $KUBE_ANONYMOUS_AUTH \</span><br><span class="line">    $KUBE_API_ARGS</span><br><span class="line">Restart=on-failure</span><br><span class="line">Type=notify</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="启动kube-apiserver"><a href="#启动kube-apiserver" class="headerlink" title="启动kube-apiserver"></a>启动kube-apiserver</h3><p>systemctl daemon-reload<br>systemctl enable kube-apiserver<br>systemctl start kube-apiserver</p><h3 id="启动kube-controller-manager"><a href="#启动kube-controller-manager" class="headerlink" title="启动kube-controller-manager"></a>启动kube-controller-manager</h3><h3 id="启动kube-scheduler"><a href="#启动kube-scheduler" class="headerlink" title="启动kube-scheduler"></a>启动kube-scheduler</h3><h2 id="安装kubernetes-node"><a href="#安装kubernetes-node" class="headerlink" title="安装kubernetes node"></a>安装kubernetes node</h2><h3 id="启动kube-proxy"><a href="#启动kube-proxy" class="headerlink" title="启动kube-proxy"></a>启动kube-proxy</h3><h3 id="启动kubelet"><a href="#启动kubelet" class="headerlink" title="启动kubelet"></a>启动kubelet</h3><h2 id="安装K8S插件"><a href="#安装K8S插件" class="headerlink" title="安装K8S插件"></a>安装K8S插件</h2><h1 id="最终的效果"><a href="#最终的效果" class="headerlink" title="最终的效果"></a>最终的效果</h1><h2 id="dashboard效果"><a href="#dashboard效果" class="headerlink" title="dashboard效果"></a>dashboard效果</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/docker/kubernetets1.8.5.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="etcd数据库中的数据"><a href="#etcd数据库中的数据" class="headerlink" title="etcd数据库中的数据"></a>etcd数据库中的数据</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/docker/k8s_etcd.png" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景资料&quot;&gt;&lt;a href=&quot;#背景资料&quot; class=&quot;headerlink&quot; title=&quot;背景资料&quot;&gt;&lt;/a&gt;背景资料&lt;/h1&gt;&lt;h2 id=&quot;本文主要参考资料-建议收藏&quot;&gt;&lt;a href=&quot;#本文主要参考资料-建议收藏&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="容器技术" scheme="https://youxia999.github.io/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>docker1.12管理技术之portainer</title>
    <link href="https://youxia999.github.io/2018/12/27/docker-1-12-management/"/>
    <id>https://youxia999.github.io/2018/12/27/docker-1-12-management/</id>
    <published>2018-12-27T04:51:23.000Z</published>
    <updated>2019-11-14T02:09:28.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本文背景"><a href="#本文背景" class="headerlink" title="本文背景"></a>本文背景</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://www.manongjc.com/article/11900.html</span><br></pre></td></tr></table></figure><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>现在docker部署的越来越多，但是还没有上百台，所以kubernete技术用不到(投入和产出不匹配，有时间写写kubernetes）。于是乎，portainer进入我们的视野。</p><h2 id="文章更新历史"><a href="#文章更新历史" class="headerlink" title="文章更新历史"></a>文章更新历史</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-03-06 portainer更新至1.20.2版本</span><br></pre></td></tr></table></figure><h1 id="实操过程"><a href="#实操过程" class="headerlink" title="实操过程"></a>实操过程</h1><h2 id="docker-Daemon配置"><a href="#docker-Daemon配置" class="headerlink" title="docker Daemon配置"></a>docker Daemon配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;insecure-registries&quot;: [</span><br><span class="line">        &quot;10.2.1.30:5000&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;registry-mirror&quot;: [</span><br><span class="line">        &quot;https://csokz3oi.mirror.aliyuncs.com&quot;</span><br><span class="line">    ],</span><br><span class="line">   &quot;graph&quot;:&quot;/data/docker&quot;,</span><br><span class="line">   &quot;hosts&quot;: [&quot;unix:///var/run/docker.sock&quot;,&quot;tcp://192.168.172.1:2375&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="portainer配置"><a href="#portainer配置" class="headerlink" title="portainer配置"></a>portainer配置</h2><p>因为所有服务器的docker daemon进程都开启了2375端口，所以只用在页面配置，即可进行相应管理。截图如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/centos7/portainer_snapshot.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;本文背景&quot;&gt;&lt;a href=&quot;#本文背景&quot; class=&quot;headerlink&quot; title=&quot;本文背景&quot;&gt;&lt;/a&gt;本文背景&lt;/h1&gt;&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="容器技术" scheme="https://youxia999.github.io/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>spring框架系列之清谈spring-cloud 2.1版本的候选版本</title>
    <link href="https://youxia999.github.io/2018/12/23/spring-cloud-2x-talk-about-greenwich/"/>
    <id>https://youxia999.github.io/2018/12/23/spring-cloud-2x-talk-about-greenwich/</id>
    <published>2018-12-23T05:35:44.000Z</published>
    <updated>2019-12-03T03:13:00.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近出来的spring cloud Greenwich版本(2.1版本)候选版本出了一个Spring Cloud Kubernetes 1.0.0。这也说明:spring cloud也全面拥抱kubernetes(私有云选择kubernetes作为容器云平台是个不错的选择)。</p><h2 id="关于spring-cloud-2-X系列"><a href="#关于spring-cloud-2-X系列" class="headerlink" title="关于spring cloud 2.X系列"></a>关于spring cloud 2.X系列</h2><p>spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。<br>Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。<br>通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring dat redis client、spring web service、prometheus client，进而集大成。<br>Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。<br>从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client。</p><h2 id="看下官方的release-note"><a href="#看下官方的release-note" class="headerlink" title="看下官方的release note"></a>看下官方的release note</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/java/Spring_Cloud_Greenwich_Release_Notes.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h2><p>不禁在想，还有哪个云厂商会加入到spring cloud大家庭，这已经涉及技术后面的商业布局了。呵呵。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/java/Spring_cloud_2.X_yitu.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://youxia999.github.io/img/java/chongxinrenshi_springframework.png" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近出
      
    
    </summary>
    
    
      <category term="java" scheme="https://youxia999.github.io/tags/java/"/>
    
      <category term="编程框架与中间件客户端" scheme="https://youxia999.github.io/tags/%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
  </entry>
  
</feed>
