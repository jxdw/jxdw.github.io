{"meta":{"title":"渐学顿悟","subtitle":null,"description":null,"author":"渐学顿悟","url":"https://jxdw.github.io","root":"/"},"pages":[{"title":"关于pages","date":"2017-05-31T02:05:56.000Z","updated":"2020-10-31T15:09:07.666Z","comments":true,"path":"about/index.html","permalink":"https://jxdw.github.io/about/index.html","excerpt":"","text":"因为18样技术，样样稀松。所以主要记录内容 3门编程语言 java go es6 7个中间件 mysql redis rabbitmq/kafka prometheus elastic job jaeger nacos/apollo 8个基础软件的学习过程 centos 网络协议 docker kubernetes harbor jenkins haproxy/nginx 一些常用工具软件 – 比如sonarqube、postman、curl、ab等等 应用软件的架构设计顺编写写应用软件的架构设计，目前还只是业余的“架构”。 附:每一个年度的重要学习目标"},{"title":"分类","date":"2019-02-19T14:25:24.000Z","updated":"2020-10-22T11:27:28.259Z","comments":true,"path":"categories/index.html","permalink":"https://jxdw.github.io/categories/index.html","excerpt":"","text":""},{"title":"全部标签","date":"2017-02-19T14:38:24.000Z","updated":"2020-10-27T11:24:53.801Z","comments":true,"path":"tags/index.html","permalink":"https://jxdw.github.io/tags/index.html","excerpt":"","text":"关于pages的标签"}],"posts":[{"title":"【中间件client系列】go语言服务使用nacos server作为配置中心","slug":"nacos-go-client-config-example","date":"2020-09-25T11:17:59.000Z","updated":"2020-10-22T14:29:22.400Z","comments":true,"path":"2020/09/25/nacos-go-client-config-example/","link":"","permalink":"https://jxdw.github.io/2020/09/25/nacos-go-client-config-example/","excerpt":"话不多说，直接上源码。","text":"话不多说，直接上源码。 package mainimport ( &quot;fmt&quot; &quot;github.com&#x2F;nacos-group&#x2F;nacos-sdk-go&#x2F;clients&quot; &quot;github.com&#x2F;nacos-group&#x2F;nacos-sdk-go&#x2F;clients&#x2F;config_client&quot; &quot;github.com&#x2F;nacos-group&#x2F;nacos-sdk-go&#x2F;common&#x2F;constant&quot; &quot;github.com&#x2F;nacos-group&#x2F;nacos-sdk-go&#x2F;vo&quot; &quot;net&#x2F;http&quot;)&#x2F;&#x2F;创建一个真正的注册中心func init() &#123; serverconfig:&#x3D;[]constant.ServerConfig&#123; &#123; IpAddr: &quot;192.168.172.9&quot;, Port: 8848, &#125;, &#125; clientconfig:&#x3D;constant.ClientConfig&#123; TimeoutMs: 5000, NotLoadCacheAtStart: true, LogDir: &quot;\\\\data\\\\server\\\\nacos\\\\log&quot;, NamespaceId: &quot;0cf7435e-262c-4827-86d2-474408a0dced&quot;, CacheDir: &quot;\\\\data\\\\server\\\\demoservice&quot;, &#x2F;&#x2F;Username: &quot;nacos&quot;, &#x2F;&#x2F;Password: &quot;nacos&quot;, LogLevel: &quot;warn&quot;, &#125; configclient, err :&#x3D; clients.CreateConfigClient(map[string]interface&#123;&#125;&#123; &quot;serverConfigs&quot;: serverconfig, &quot;clientConfig&quot;: clientconfig, &#125;) configFile,err:&#x3D;configclient.GetConfig(vo.ConfigParam&#123; DataId: &quot;test-data&quot;, Group: &quot;test-group&quot;, &#125;) fmt.Println(&quot;config file content is :&quot;+configFile) go listenConfig(configclient) namingClient, err :&#x3D; clients.CreateNamingClient(map[string]interface&#123;&#125;&#123; &quot;serverConfigs&quot;:serverconfig , &quot;clientConfig&quot;: clientconfig, &#125;) if err !&#x3D; nil &#123; panic(err) &#125; var param &#x3D; vo.RegisterInstanceParam&#123; Ip: &quot;10.3.20.215&quot;, Port: 18848, ServiceName: &quot;go_demo_service&quot;, Weight: 10, ClusterName: &quot;zwt&quot;, Enable: true, Healthy: true, Ephemeral: true, Metadata: map[string]string&#123;&quot;preserved.heart.beat.interval&quot;: &quot;100000000000&quot;,&#125;, &#125; success,err:&#x3D;namingClient.RegisterInstance(param) if !success &#123; fmt.Printf(&quot;RegisterServiceInstance,param:%+v,result:%+v \\n\\n&quot;, param, err) return &#125; service,_:&#x3D;namingClient.GetService(vo.GetServiceParam&#123; Clusters: []string&#123; &quot;zwt&quot;, &#125;, ServiceName: &quot;go_demo_service&quot;, &#125;) fmt.Println(&quot;service is &quot;,service)&#125;func listenConfig(client config_client.IConfigClient) &#123; for &#123; err :&#x3D; client.ListenConfig(vo.ConfigParam&#123; DataId: &quot;test-data&quot;, Group: &quot;test-group&quot;, OnChange: func(namespace, group, dataId, data string) &#123; fmt.Println(&quot;config changed group:&quot; + group + &quot;, dataId:&quot; + dataId + &quot;, content:&quot; + data) &#125;, &#125;) if err!&#x3D;nil &#123; fmt.Println(&quot;error is &quot;,err) &#125; &#125;&#125;func main() &#123; http.HandleFunc(&quot;&#x2F;&quot;,HelloworldHander) http.ListenAndServe(&quot;10.3.20.215:18848&quot; ,nil)&#125;func HelloworldHander(writer http.ResponseWriter, request *http.Request) &#123; message:&#x3D;&quot;hello world&quot; writer.Write([]byte(message))&#125;","categories":[{"name":"go知识体系","slug":"go知识体系","permalink":"https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【转载】vue学习之day8","slug":"es6_vue_study_day8","date":"2020-07-14T13:41:16.000Z","updated":"2020-10-22T14:31:18.810Z","comments":true,"path":"2020/07/14/es6_vue_study_day8/","link":"","permalink":"https://jxdw.github.io/2020/07/14/es6_vue_study_day8/","excerpt":"day8学习笔记使用mui的tab-top-webview-main完成分类滑动栏","text":"day8学习笔记使用mui的tab-top-webview-main完成分类滑动栏 兼容问题 和 App.vue 中的 router-link 身上的类名 mui-tab-item 存在兼容性问题，导致tab栏失效，可以把mui-tab-item改名为mui-tab-item1，并复制相关的类样式，来解决这个问题；.mui-bar-tab .mui-tab-item1.mui-active &#123; color: #007aff;&#125;.mui-bar-tab .mui-tab-item1 &#123; display: table-cell; overflow: hidden; width: 1%; height: 50px; text-align: center; vertical-align: middle; white-space: nowrap; text-overflow: ellipsis; color: #929292;&#125;.mui-bar-tab .mui-tab-item1 .mui-icon &#123; top: 3px; width: 24px; height: 24px; padding-top: 0; padding-bottom: 0;&#125;.mui-bar-tab .mui-tab-item1 .mui-icon~.mui-tab-label &#123; font-size: 11px; display: block; overflow: hidden; text-overflow: ellipsis;&#125; tab-top-webview-main组件第一次显示到页面中的时候，无法被滑动的解决方案： 先导入 mui 的JS文件:import mui from &#39;..&#x2F;..&#x2F;..&#x2F;lib&#x2F;mui&#x2F;js&#x2F;mui.min.js&#39; 在 组件的 mounted 事件钩子中，注册 mui 的滚动事件：mounted() &#123; &#x2F;&#x2F; 需要在组件的 mounted 事件钩子中，注册 mui 的 scroll 滚动事件 mui(&#39;.mui-scroll-wrapper&#39;).scroll(&#123; deceleration: 0.0005 &#x2F;&#x2F;flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006 &#125;); &#125; 滑动的时候报警告：Unable to preventDefault inside passive event listener due to target being treated as passive. See https://www.chromestatus.com/features/5093566007214080解决方法，可以加上* &#123; touch-action: pan-y; &#125; 这句样式去掉。 原因：（是chrome为了提高页面的滑动流畅度而新折腾出来的一个东西） http://www.cnblogs.com/pearl07/p/6589114.htmlhttps://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action 移除严格模式babel-plugin-transform-remove-strict-mode vue-preview一个Vue集成PhotoSwipe图片预览插件","categories":[{"name":"es6语言","slug":"es6语言","permalink":"https://jxdw.github.io/categories/es6%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【转载】vue学习之day7","slug":"es6_vue_study_day7","date":"2020-07-13T13:25:16.000Z","updated":"2020-10-22T14:31:13.299Z","comments":true,"path":"2020/07/13/es6_vue_study_day7/","link":"","permalink":"https://jxdw.github.io/2020/07/13/es6_vue_study_day7/","excerpt":"day7使用mui的tab-top-webview-main完成分类滑动栏","text":"day7使用mui的tab-top-webview-main完成分类滑动栏 兼容问题 和 App.vue 中的 router-link 身上的类名 mui-tab-item 存在兼容性问题，导致tab栏失效，可以把mui-tab-item改名为mui-tab-item1，并复制相关的类样式，来解决这个问题；.mui-bar-tab .mui-tab-item1.mui-active &#123; color: #007aff;&#125;.mui-bar-tab .mui-tab-item1 &#123; display: table-cell; overflow: hidden; width: 1%; height: 50px; text-align: center; vertical-align: middle; white-space: nowrap; text-overflow: ellipsis; color: #929292;&#125;.mui-bar-tab .mui-tab-item1 .mui-icon &#123; top: 3px; width: 24px; height: 24px; padding-top: 0; padding-bottom: 0;&#125;.mui-bar-tab .mui-tab-item1 .mui-icon~.mui-tab-label &#123; font-size: 11px; display: block; overflow: hidden; text-overflow: ellipsis;&#125; tab-top-webview-main组件第一次显示到页面中的时候，无法被滑动的解决方案： 先导入 mui 的JS文件:import mui from &#39;..&#x2F;..&#x2F;..&#x2F;lib&#x2F;mui&#x2F;js&#x2F;mui.min.js&#39; 在 组件的 mounted 事件钩子中，注册 mui 的滚动事件：mounted() &#123; &#x2F;&#x2F; 需要在组件的 mounted 事件钩子中，注册 mui 的 scroll 滚动事件 mui(&#39;.mui-scroll-wrapper&#39;).scroll(&#123; deceleration: 0.0005 &#x2F;&#x2F;flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006 &#125;); &#125; 滑动的时候报警告：Unable to preventDefault inside passive event listener due to target being treated as passive. See https://www.chromestatus.com/features/5093566007214080解决方法，可以加上* &#123; touch-action: none; &#125; 这句样式去掉。 原因：（是chrome为了提高页面的滑动流畅度而新折腾出来的一个东西） http://www.cnblogs.com/pearl07/p/6589114.htmlhttps://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action 移除严格模式babel-plugin-transform-remove-strict-mode vue-preview一个Vue集成PhotoSwipe图片预览插件","categories":[{"name":"es6语言","slug":"es6语言","permalink":"https://jxdw.github.io/categories/es6%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【转载】vue学习之day6","slug":"es6_vue_study_day6","date":"2020-07-12T13:21:16.000Z","updated":"2020-10-22T14:31:08.477Z","comments":true,"path":"2020/07/12/es6_vue_study_day6/","link":"","permalink":"https://jxdw.github.io/2020/07/12/es6_vue_study_day6/","excerpt":"Vue.js - day6注意：有时候使用npm i node-sass -D装不上，这时候，就必须使用 cnpm i node-sass -D 在普通页面中使用render函数渲染组件","text":"Vue.js - day6注意：有时候使用npm i node-sass -D装不上，这时候，就必须使用 cnpm i node-sass -D 在普通页面中使用render函数渲染组件 在webpack中配置.vue组件页面的解析 运行cnpm i vue -S将vue安装为运行依赖； 运行cnpm i vue-loader vue-template-compiler -D将解析转换vue的包安装为开发依赖； 运行cnpm i style-loader css-loader -D将解析转换CSS的包安装为开发依赖，因为.vue文件中会写CSS样式； 在webpack.config.js中，添加如下module规则： module: &#123; rules: [ &#123; test: &#x2F;\\.css$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;] &#125;, &#123; test: &#x2F;\\.vue$&#x2F;, use: &#39;vue-loader&#39; &#125; ] &#125; 创建App.js组件页面： &lt;template&gt; &lt;!-- 注意：在 .vue 的组件中，template 中必须有且只有唯一的根元素进行包裹，一般都用 div 当作唯一的根元素 --&gt; &lt;div&gt; &lt;h1&gt;这是APP组件 - &#123;&#123;msg&#125;&#125;&lt;&#x2F;h1&gt; &lt;h3&gt;我是h3&lt;&#x2F;h3&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;&#x2F;&#x2F; 注意：在 .vue 的组件中，通过 script 标签来定义组件的行为，需要使用 ES6 中提供的 export default 方式，导出一个vue实例对象export default &#123; data() &#123; return &#123; msg: &#39;OK&#39; &#125; &#125;&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;h1 &#123; color: red;&#125;&lt;&#x2F;style&gt; 创建main.js入口文件： &#x2F;&#x2F; 导入 Vue 组件import Vue from &#39;vue&#39;&#x2F;&#x2F; 导入 App组件import App from &#39;.&#x2F;components&#x2F;App.vue&#39;&#x2F;&#x2F; 创建一个 Vue 实例，使用 render 函数，渲染指定的组件var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, render: c &#x3D;&gt; c(App)&#125;); 在使用webpack构建的Vue项目中使用模板对象？ 在webpack.config.js中添加resolve属性：resolve: &#123; alias: &#123; &#39;vue$&#39;: &#39;vue&#x2F;dist&#x2F;vue.esm.js&#39; &#125; &#125; ES6中语法使用总结 使用 export default 和 export 导出模块中的成员; 对应ES5中的 module.exports 和 export 使用 import ** from ** 和 import &#39;路径&#39; 还有 import &#123;a, b&#125; from &#39;模块标识&#39; 导入其他模块 使用箭头函数：(a, b)=&gt; &#123; return a-b; &#125; 在vue组件页面中，集成vue-router路由模块vue-router官网 导入路由模块： import VueRouter from &#39;vue-router&#39; 安装路由模块： Vue.use(VueRouter); 导入需要展示的组件: import login from &#39;.&#x2F;components&#x2F;account&#x2F;login.vue&#39;import register from &#39;.&#x2F;components&#x2F;account&#x2F;register.vue&#39; 创建路由对象: var router &#x3D; new VueRouter(&#123; routes: [ &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;login&#39; &#125;, &#123; path: &#39;&#x2F;login&#39;, component: login &#125;, &#123; path: &#39;&#x2F;register&#39;, component: register &#125; ]&#125;); 将路由对象，挂载到 Vue 实例上: var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, &#x2F;&#x2F; render: c &#x3D;&gt; &#123; return c(App) &#125; render(c) &#123; return c(App); &#125;, router &#x2F;&#x2F; 将路由对象，挂载到 Vue 实例上&#125;); 改造App.vue组件，在 template 中，添加router-link和router-view： &lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;&lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;&lt;router-view&gt;&lt;&#x2F;router-view&gt; 组件中的css作用域问题抽离路由为单独的模块使用 饿了么的 MintUI 组件Github 仓储地址 Mint-UI官方文档 导入所有MintUI组件： import MintUI from &#39;mint-ui&#39; 导入样式表： import &#39;mint-ui&#x2F;lib&#x2F;style.css&#39; 在 vue 中使用 MintUI中的Button按钮和Toast弹框提示： Vue.use(MintUI) 使用的例子： &lt;mt-button type&#x3D;&quot;primary&quot; size&#x3D;&quot;large&quot;&gt;primary&lt;&#x2F;mt-button&gt; Mint-UI中按需导入的配置方式使用 MUI 代码片段 注意： MUI 不同于 Mint-UI，MUI只是开发出来的一套好用的代码片段，里面提供了配套的样式、配套的HTML代码段，类似于 Bootstrap； 而 Mint-UI，是真正的组件库，是使用 Vue 技术封装出来的 成套的组件，可以无缝的和 VUE项目进行集成开发；因此，从体验上来说， Mint-UI体验更好，因为这是别人帮我们开发好的现成的Vue组件；从体验上来说， MUI和Bootstrap类似；理论上，任何项目都可以使用 MUI 或 Bootstrap，但是，MInt-UI只适用于Vue项目； 注意： MUI 并不能使用 npm 去下载，需要自己手动从 github 上，下载现成的包，自己解压出来，然后手动拷贝到项目中使用； 官网首页 文档地址 导入 MUI 的样式表： import &#39;..&#x2F;lib&#x2F;mui&#x2F;css&#x2F;mui.min.css&#39; 在webpack.config.js中添加新的loader规则： &#123; test: &#x2F;\\.(png|jpg|gif|ttf)$&#x2F;, use: &#39;url-loader&#39; &#125; 根据官方提供的文档和example，尝试使用相关的组件 将项目源码托管到oschina中 点击头像 -&gt; 修改资料 -&gt; SSH公钥 如何生成SSH公钥 创建自己的空仓储，使用 git config --global user.name &quot;用户名&quot; 和 git config --global user.email ***@**.com 来全局配置提交时用户的名称和邮箱 使用 git init 在本地初始化项目 使用 touch README.md 和 touch .gitignore 来创建项目的说明文件和忽略文件； 使用 git add . 将所有文件托管到 git 中 使用 git commit -m &quot;init project&quot; 将项目进行本地提交 使用 git remote add origin 仓储地址将本地项目和远程仓储连接，并使用origin最为远程仓储的别名 使用 git push -u origin master 将本地代码push到仓储中 App.vue 组件的基本设置 头部的固定导航栏使用 Mint-UI 的 Header 组件； 底部的页签使用 mui 的 tabbar; 购物车的图标，使用 icons-extra 中的 mui-icon-extra mui-icon-extra-cart，同时，应该把其依赖的字体图标文件 mui-icons-extra.ttf，复制到 fonts 目录下！ 将底部的页签，改造成 router-link 来实现单页面的切换； Tab Bar 路由激活时候设置高亮的两种方式： 全局设置样式如下： .router-link-active&#123; color:#007aff !important; &#125; 或者在 new VueRouter 的时候，通过 linkActiveClass 来指定高亮的类： &#x2F;&#x2F; 创建路由对象 var router &#x3D; new VueRouter(&#123; routes: [ &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;home&#39; &#125; ], linkActiveClass: &#39;mui-active&#39; &#125;); 实现 tabbar 页签不同组件页面的切换 将 tabbar 改造成 router-link 形式，并指定每个连接的 to 属性； 在入口文件中导入需要展示的组件，并创建路由对象： &#x2F;&#x2F; 导入需要展示的组件import Home from &#39;.&#x2F;components&#x2F;home&#x2F;home.vue&#39;import Member from &#39;.&#x2F;components&#x2F;member&#x2F;member.vue&#39;import Shopcar from &#39;.&#x2F;components&#x2F;shopcar&#x2F;shopcar.vue&#39;import Search from &#39;.&#x2F;components&#x2F;search&#x2F;search.vue&#39;&#x2F;&#x2F; 创建路由对象var router &#x3D; new VueRouter(&#123; routes: [ &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;home&#39; &#125;, &#123; path: &#39;&#x2F;home&#39;, component: Home &#125;, &#123; path: &#39;&#x2F;member&#39;, component: Member &#125;, &#123; path: &#39;&#x2F;shopcar&#39;, component: Shopcar &#125;, &#123; path: &#39;&#x2F;search&#39;, component: Search &#125; ], linkActiveClass: &#39;mui-active&#39;&#125;); 使用 mt-swipe 轮播图组件 假数据： lunbo: [ &#39;http:&#x2F;&#x2F;www.itcast.cn&#x2F;images&#x2F;slidead&#x2F;BEIJING&#x2F;2017440109442800.jpg&#39;, &#39;http:&#x2F;&#x2F;www.itcast.cn&#x2F;images&#x2F;slidead&#x2F;BEIJING&#x2F;2017511009514700.jpg&#39;, &#39;http:&#x2F;&#x2F;www.itcast.cn&#x2F;images&#x2F;slidead&#x2F;BEIJING&#x2F;2017421414422600.jpg&#39; ] 引入轮播图组件： &lt;!-- Mint-UI 轮播图组件 --&gt; &lt;div class&#x3D;&quot;home-swipe&quot;&gt; &lt;mt-swipe :auto&#x3D;&quot;4000&quot;&gt; &lt;mt-swipe-item v-for&#x3D;&quot;(item, i) in lunbo&quot; :key&#x3D;&quot;i&quot;&gt; &lt;img :src&#x3D;&quot;item&quot; alt&#x3D;&quot;&quot;&gt; &lt;&#x2F;mt-swipe-item&gt; &lt;&#x2F;mt-swipe&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; 在.vue组件中使用vue-resource获取数据 运行cnpm i vue-resource -S安装模块 导入 vue-resource 组件 import VueResource from &#39;vue-resource&#39; 在vue中使用 vue-resource 组件 Vue.use(VueResource);","categories":[{"name":"es6语言","slug":"es6语言","permalink":"https://jxdw.github.io/categories/es6%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【转载】vue学习之day5","slug":"es6_vue_study_day5","date":"2020-07-11T13:20:16.000Z","updated":"2020-10-22T14:31:03.717Z","comments":true,"path":"2020/07/11/es6_vue_study_day5/","link":"","permalink":"https://jxdw.github.io/2020/07/11/es6_vue_study_day5/","excerpt":"Vue.js - Day5 - Webpack在网页中会引用哪些常见的静态资源？ JS .js .jsx .coffee .ts（TypeScript 类 C# 语言） CSS .css .less .sass .scss Images .jpg .png .gif .bmp .svg 字体文件（Fonts） .svg .ttf .eot .woff .woff2 模板文件 .ejs .jade .vue【这是在webpack中定义组件的方式，推荐这么用】 网页中引入的静态资源多了以后有什么问题？？？ 网页加载速度慢， 因为 我们要发起很多的二次请求； 要处理错综复杂的依赖关系","text":"Vue.js - Day5 - Webpack在网页中会引用哪些常见的静态资源？ JS .js .jsx .coffee .ts（TypeScript 类 C# 语言） CSS .css .less .sass .scss Images .jpg .png .gif .bmp .svg 字体文件（Fonts） .svg .ttf .eot .woff .woff2 模板文件 .ejs .jade .vue【这是在webpack中定义组件的方式，推荐这么用】 网页中引入的静态资源多了以后有什么问题？？？ 网页加载速度慢， 因为 我们要发起很多的二次请求； 要处理错综复杂的依赖关系 如何解决上述两个问题 合并、压缩、精灵图、图片的Base64编码 可以使用之前学过的requireJS、也可以使用webpack可以解决各个包之间的复杂依赖关系； 什么是webpack?webpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具； 如何完美实现上述的2种解决方案 使用Gulp， 是基于 task 任务的； 使用Webpack， 是基于整个项目进行构建的； 借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。 根据官网的图片介绍webpack打包的过程 webpack官网 webpack安装的两种方式 运行npm i webpack -g全局安装webpack，这样就能在全局使用webpack的命令 在项目根目录中运行npm i webpack --save-dev安装到项目依赖中 初步使用webpack打包构建列表隔行变色案例 运行npm init初始化项目，使用npm管理项目中的依赖包 创建项目基本的目录结构 使用cnpm i jquery --save安装jquery类库 创建main.js并书写各行变色的代码逻辑：&#x2F;&#x2F; 导入jquery类库 import $ from &#39;jquery&#39; &#x2F;&#x2F; 设置偶数行背景色，索引从0开始，0是偶数 $(&#39;#list li:even&#39;).css(&#39;backgroundColor&#39;,&#39;lightblue&#39;); &#x2F;&#x2F; 设置奇数行背景色 $(&#39;#list li:odd&#39;).css(&#39;backgroundColor&#39;,&#39;pink&#39;); 直接在页面上引用main.js会报错，因为浏览器不认识import这种高级的JS语法，需要使用webpack进行处理，webpack默认会把这种高级的语法转换为低级的浏览器能识别的语法； 运行webpack 入口文件路径 输出文件路径对main.js进行处理：webpack src&#x2F;js&#x2F;main.js dist&#x2F;bundle.js 使用webpack的配置文件简化打包时候的命令 在项目根目录中创建webpack.config.js 由于运行webpack命令的时候，webpack需要指定入口文件和输出文件的路径，所以，我们需要在webpack.config.js中配置这两个路径：&#x2F;&#x2F; 导入处理路径的模块var path &#x3D; require(&#39;path&#39;);&#x2F;&#x2F; 导出一个配置对象，将来webpack在启动的时候，会默认来查找webpack.config.js，并读取这个文件中导出的配置对象，来进行打包处理module.exports &#x3D; &#123; entry: path.resolve(__dirname, &#39;src&#x2F;js&#x2F;main.js&#39;), &#x2F;&#x2F; 项目入口文件 output: &#123; &#x2F;&#x2F; 配置输出选项 path: path.resolve(__dirname, &#39;dist&#39;), &#x2F;&#x2F; 配置输出的路径 filename: &#39;bundle.js&#39; &#x2F;&#x2F; 配置输出的文件名 &#125;&#125; 实现webpack的实时打包构建 由于每次重新修改代码之后，都需要手动运行webpack打包的命令，比较麻烦，所以使用webpack-dev-server来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。 运行cnpm i webpack-dev-server --save-dev安装到开发依赖 安装完成之后，在命令行直接运行webpack-dev-server来进行打包，发现报错，此时需要借助于package.json文件中的指令，来进行运行webpack-dev-server命令，在scripts节点下新增&quot;dev&quot;: &quot;webpack-dev-server&quot;指令，发现可以进行实时打包，但是dist目录下并没有生成bundle.js文件，这是因为webpack-dev-server将打包好的文件放在了内存中 把bundle.js放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快 这个时候访问webpack-dev-server启动的http://localhost:8080/网站，发现是一个文件夹的面板，需要点击到src目录下，才能打开我们的index首页，此时引用不到bundle.js文件，需要修改index.html中script的src属性为:&lt;script src=&quot;../bundle.js&quot;&gt;&lt;/script&gt; 为了能在访问http://localhost:8080/的时候直接访问到index首页，可以使用--contentBase src指令来修改dev指令，指定启动的根目录：&quot;dev&quot;: &quot;webpack-dev-server --contentBase src&quot; 同时修改index页面中script的src属性为&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt; 使用html-webpack-plugin插件配置启动页面由于使用--contentBase指令的过程比较繁琐，需要指定启动的目录，同时还需要修改index.html中script标签的src属性，所以推荐大家使用html-webpack-plugin插件配置启动页面. 运行cnpm i html-webpack-plugin --save-dev安装到开发依赖 修改webpack.config.js配置文件如下：&#x2F;&#x2F; 导入处理路径的模块var path &#x3D; require(&#39;path&#39;);&#x2F;&#x2F; 导入自动生成HTMl文件的插件var htmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);module.exports &#x3D; &#123; entry: path.resolve(__dirname, &#39;src&#x2F;js&#x2F;main.js&#39;), &#x2F;&#x2F; 项目入口文件 output: &#123; &#x2F;&#x2F; 配置输出选项 path: path.resolve(__dirname, &#39;dist&#39;), &#x2F;&#x2F; 配置输出的路径 filename: &#39;bundle.js&#39; &#x2F;&#x2F; 配置输出的文件名 &#125;, plugins:[ &#x2F;&#x2F; 添加plugins节点配置插件 new htmlWebpackPlugin(&#123; template:path.resolve(__dirname, &#39;src&#x2F;index.html&#39;),&#x2F;&#x2F;模板路径 filename:&#39;index.html&#39;&#x2F;&#x2F;自动生成的HTML文件的名称 &#125;) ]&#125; 修改package.json中script节点中的dev指令如下：&quot;dev&quot;: &quot;webpack-dev-server&quot; 将index.html中script标签注释掉，因为html-webpack-plugin插件会自动把bundle.js注入到index.html页面中！ 实现自动打开浏览器、热更新和配置浏览器的默认端口号注意：热更新在JS中表现的不明显，可以从一会儿要讲到的CSS身上进行介绍说明！ 方式1： 修改package.json的script节点如下，其中--open表示自动打开浏览器，--port 4321表示打开的端口号为4321，--hot表示启用浏览器热更新：&quot;dev&quot;: &quot;webpack-dev-server --hot --port 4321 --open&quot; 方式2： 修改webpack.config.js文件，新增devServer节点如下：devServer:&#123; hot:true, open:true, port:4321 &#125; 在头部引入webpack模块：var webpack &#x3D; require(&#39;webpack&#39;); 在plugins节点下新增：new webpack.HotModuleReplacementPlugin() 使用webpack打包css文件 运行cnpm i style-loader css-loader --save-dev 修改webpack.config.js这个配置文件：module: &#123; &#x2F;&#x2F; 用来配置第三方loader模块的 rules: [ &#x2F;&#x2F; 文件的匹配规则 &#123; test: &#x2F;\\.css$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;] &#125;&#x2F;&#x2F;处理css文件的规则 ] &#125; 注意：use表示使用哪些模块来处理test所匹配到的文件；use中相关loader模块的调用顺序是从后向前调用的； 使用webpack打包less文件 运行cnpm i less-loader less -D 修改webpack.config.js这个配置文件：&#123; test: &#x2F;\\.less$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;less-loader&#39;] &#125;, 使用webpack打包sass文件 运行cnpm i sass-loader node-sass --save-dev 在webpack.config.js中添加处理sass文件的loader模块：&#123; test: &#x2F;\\.scss$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;sass-loader&#39;] &#125; 使用webpack处理css中的路径 运行cnpm i url-loader file-loader --save-dev 在webpack.config.js中添加处理url路径的loader模块：&#123; test: &#x2F;\\.(png|jpg|gif)$&#x2F;, use: &#39;url-loader&#39; &#125; 可以通过limit指定进行base64编码的图片大小；只有小于指定字节（byte）的图片才会进行base64编码：&#123; test: &#x2F;\\.(png|jpg|gif)$&#x2F;, use: &#39;url-loader?limit&#x3D;43960&#39; &#125;, 使用babel处理高级JS语法 运行cnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev安装babel的相关loader包 运行cnpm i babel-preset-es2015 babel-preset-stage-0 --save-dev安装babel转换的语法 在webpack.config.js中添加相关loader模块，其中需要注意的是，一定要把node_modules文件夹添加到排除项：&#123; test: &#x2F;\\.js$&#x2F;, use: &#39;babel-loader&#39;, exclude: &#x2F;node_modules&#x2F; &#125; 在项目根目录中添加.babelrc文件，并修改这个配置文件如下：&#123; &quot;presets&quot;:[&quot;es2015&quot;, &quot;stage-0&quot;], &quot;plugins&quot;:[&quot;transform-runtime&quot;]&#125; 注意：语法插件babel-preset-es2015可以更新为babel-preset-env，它包含了所有的ES相关的语法； 相关文章babel-preset-env：你需要的唯一Babel插件Runtime transform 运行时编译es6","categories":[{"name":"es6语言","slug":"es6语言","permalink":"https://jxdw.github.io/categories/es6%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【转载】vue学习之day4","slug":"es6_vue_study_day4","date":"2020-07-10T13:15:16.000Z","updated":"2020-10-22T14:30:57.860Z","comments":true,"path":"2020/07/10/es6_vue_study_day4/","link":"","permalink":"https://jxdw.github.io/2020/07/10/es6_vue_study_day4/","excerpt":"Vue.js - Day4父组件向子组件传值 组件实例定义方式，注意：一定要使用props属性来定义父组件传递过来的数据&lt;script&gt; &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; msg: &#39;这是父组件中的消息&#39; &#125;, components: &#123; son: &#123; template: &#39;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;&#x2F;h1&gt;&#39;, props: [&#39;finfo&#39;] &#125; &#125; &#125;); &lt;&#x2F;script&gt; 使用v-bind或简化指令，将数据传递到子组件中：&lt;div id&#x3D;&quot;app&quot;&gt; &lt;son :finfo&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;son&gt; &lt;&#x2F;div&gt;","text":"Vue.js - Day4父组件向子组件传值 组件实例定义方式，注意：一定要使用props属性来定义父组件传递过来的数据&lt;script&gt; &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; msg: &#39;这是父组件中的消息&#39; &#125;, components: &#123; son: &#123; template: &#39;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;&#x2F;h1&gt;&#39;, props: [&#39;finfo&#39;] &#125; &#125; &#125;); &lt;&#x2F;script&gt; 使用v-bind或简化指令，将数据传递到子组件中：&lt;div id&#x3D;&quot;app&quot;&gt; &lt;son :finfo&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;son&gt; &lt;&#x2F;div&gt; 子组件向父组件传值 原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去； 父组件将方法的引用传递给子组件，其中，getMsg是父组件中methods中定义的方法名称，func是子组件调用传递过来方法时候的方法名称&lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt; 子组件内部通过this.$emit(&#39;方法名&#39;, 要传递的数据)方式，来调用父组件中的方法，同时把数据传递给父组件使用&lt;div id&#x3D;&quot;app&quot;&gt; &lt;!-- 引用父组件 --&gt; &lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt; &lt;!-- 组件模板定义 --&gt; &lt;script type&#x3D;&quot;x-template&quot; id&#x3D;&quot;son&quot;&gt; &lt;div&gt; &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;向父组件传值&quot; @click&#x3D;&quot;sendMsg&quot; &#x2F;&gt; &lt;&#x2F;div&gt; &lt;&#x2F;script&gt; &lt;&#x2F;div&gt; &lt;script&gt; &#x2F;&#x2F; 子组件的定义方式 Vue.component(&#39;son&#39;, &#123; template: &#39;#son&#39;, &#x2F;&#x2F; 组件模板Id methods: &#123; sendMsg() &#123; &#x2F;&#x2F; 按钮的点击事件 this.$emit(&#39;func&#39;, &#39;OK&#39;); &#x2F;&#x2F; 调用父组件传递过来的方法，同时把数据传递出去 &#125; &#125; &#125;); &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123;&#125;, methods: &#123; getMsg(val)&#123; &#x2F;&#x2F; 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义 alert(val); &#125; &#125; &#125;); &lt;&#x2F;script&gt; 组件中data和props的区别评论列表案例目标：主要练习父子组件之间传值 使用 this.$refs 来获取元素和组件&lt;div id&#x3D;&quot;app&quot;&gt; &lt;div&gt; &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;获取元素内容&quot; @click&#x3D;&quot;getElement&quot; &#x2F;&gt; &lt;!-- 使用 ref 获取元素 --&gt; &lt;h1 ref&#x3D;&quot;myh1&quot;&gt;这是一个大大的H1&lt;&#x2F;h1&gt; &lt;hr&gt; &lt;!-- 使用 ref 获取子组件 --&gt; &lt;my-com ref&#x3D;&quot;mycom&quot;&gt;&lt;&#x2F;my-com&gt; &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;script&gt; Vue.component(&#39;my-com&#39;, &#123; template: &#39;&lt;h5&gt;这是一个子组件&lt;&#x2F;h5&gt;&#39;, data() &#123; return &#123; name: &#39;子组件&#39; &#125; &#125; &#125;); &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123;&#125;, methods: &#123; getElement() &#123; &#x2F;&#x2F; 通过 this.$refs 来获取元素 console.log(this.$refs.myh1.innerText); &#x2F;&#x2F; 通过 this.$refs 来获取组件 console.log(this.$refs.mycom.name); &#125; &#125; &#125;);&lt;&#x2F;script&gt; 什么是路由 后端路由：对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源； 前端路由：对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现； 在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）； 在 vue 中使用 vue-router 导入 vue-router 组件类库：&lt;!-- 1. 导入 vue-router 组件类库 --&gt; &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue-router-2.7.0.js&quot;&gt;&lt;&#x2F;script&gt; 使用 router-link 组件来导航&lt;!-- 2. 使用 router-link 组件来导航 --&gt;&lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;&lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt; 使用 router-view 组件来显示匹配到的组件&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;&lt;router-view&gt;&lt;&#x2F;router-view&gt; 创建使用Vue.extend创建组件&#x2F;&#x2F; 4.1 使用 Vue.extend 来创建登录组件var login &#x3D; Vue.extend(&#123; template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;&#125;);&#x2F;&#x2F; 4.2 使用 Vue.extend 来创建注册组件var register &#x3D; Vue.extend(&#123; template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;&#125;); 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则&#x2F;&#x2F; 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则 var router &#x3D; new VueRouter(&#123; routes: [ &#123; path: &#39;&#x2F;login&#39;, component: login &#125;, &#123; path: &#39;&#x2F;register&#39;, component: register &#125; ] &#125;); 使用 router 属性来使用路由规则&#x2F;&#x2F; 6. 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, router: router &#x2F;&#x2F; 使用 router 属性来使用路由规则 &#125;); 使用tag属性指定router-link渲染的标签类型设置路由重定向设置路由高亮设置路由切换动效在路由规则中定义参数 在规则中定义参数：&#123; path: &#39;&#x2F;register&#x2F;:id&#39;, component: register &#125; 通过 this.$route.params来获取路由中的参数：var register &#x3D; Vue.extend(&#123; template: &#39;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;&#x2F;h1&gt;&#39; &#125;); 使用 children 属性实现路由嵌套&lt;div id&#x3D;&quot;app&quot;&gt; &lt;router-link to&#x3D;&quot;&#x2F;account&quot;&gt;Account&lt;&#x2F;router-link&gt; &lt;router-view&gt;&lt;&#x2F;router-view&gt;&lt;&#x2F;div&gt;&lt;script&gt; &#x2F;&#x2F; 父路由中的组件 const account &#x3D; Vue.extend(&#123; template: &#96;&lt;div&gt; 这是account组件 &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;login&quot;&gt;login&lt;&#x2F;router-link&gt; | &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;register&quot;&gt;register&lt;&#x2F;router-link&gt; &lt;router-view&gt;&lt;&#x2F;router-view&gt; &lt;&#x2F;div&gt;&#96; &#125;); &#x2F;&#x2F; 子路由中的 login 组件 const login &#x3D; Vue.extend(&#123; template: &#39;&lt;div&gt;登录组件&lt;&#x2F;div&gt;&#39; &#125;); &#x2F;&#x2F; 子路由中的 register 组件 const register &#x3D; Vue.extend(&#123; template: &#39;&lt;div&gt;注册组件&lt;&#x2F;div&gt;&#39; &#125;); &#x2F;&#x2F; 路由实例 var router &#x3D; new VueRouter(&#123; routes: [ &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;account&#x2F;login&#39; &#125;, &#x2F;&#x2F; 使用 redirect 实现路由重定向 &#123; path: &#39;&#x2F;account&#39;, component: account, children: [ &#x2F;&#x2F; 通过 children 数组属性，来实现路由的嵌套 &#123; path: &#39;login&#39;, component: login &#125;, &#x2F;&#x2F; 注意，子路由的开头位置，不要加 &#x2F; 路径符 &#123; path: &#39;register&#39;, component: register &#125; ] &#125; ] &#125;); &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123;&#125;, methods: &#123;&#125;, components: &#123; account &#125;, router: router &#125;);&lt;&#x2F;script&gt; 命名视图实现经典布局 标签代码结构：&lt;div id&#x3D;&quot;app&quot;&gt; &lt;router-view&gt;&lt;&#x2F;router-view&gt; &lt;div class&#x3D;&quot;content&quot;&gt; &lt;router-view name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;router-view&gt; &lt;router-view name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;router-view&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; JS代码：&lt;script&gt; var header &#x3D; Vue.component(&#39;header&#39;, &#123; template: &#39;&lt;div class&#x3D;&quot;header&quot;&gt;header&lt;&#x2F;div&gt;&#39; &#125;); var sidebar &#x3D; Vue.component(&#39;sidebar&#39;, &#123; template: &#39;&lt;div class&#x3D;&quot;sidebar&quot;&gt;sidebar&lt;&#x2F;div&gt;&#39; &#125;); var mainbox &#x3D; Vue.component(&#39;mainbox&#39;, &#123; template: &#39;&lt;div class&#x3D;&quot;mainbox&quot;&gt;mainbox&lt;&#x2F;div&gt;&#39; &#125;); &#x2F;&#x2F; 创建路由对象 var router &#x3D; new VueRouter(&#123; routes: [ &#123; path: &#39;&#x2F;&#39;, components: &#123; default: header, a: sidebar, b: mainbox &#125; &#125; ] &#125;); &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123;&#125;, methods: &#123;&#125;, router &#125;); &lt;&#x2F;script&gt; CSS 样式：&lt;style&gt; .header &#123; border: 1px solid red; &#125; .content&#123; display: flex; &#125; .sidebar &#123; flex: 2; border: 1px solid green; height: 500px; &#125; .mainbox&#123; flex: 8; border: 1px solid blue; height: 500px; &#125;&lt;&#x2F;style&gt; watch属性的使用考虑一个问题：想要实现 名 和 姓 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？） 监听data中属性的改变：&lt;div id&#x3D;&quot;app&quot;&gt; &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; + &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D; &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt; &lt;&#x2F;div&gt; &lt;script&gt; &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; firstName: &#39;jack&#39;, lastName: &#39;chen&#39;, fullName: &#39;jack - chen&#39; &#125;, methods: &#123;&#125;, watch: &#123; &#39;firstName&#39;: function (newVal, oldVal) &#123; &#x2F;&#x2F; 第一个参数是新数据，第二个参数是旧数据 this.fullName &#x3D; newVal + &#39; - &#39; + this.lastName; &#125;, &#39;lastName&#39;: function (newVal, oldVal) &#123; this.fullName &#x3D; this.firstName + &#39; - &#39; + newVal; &#125; &#125; &#125;); &lt;&#x2F;script&gt; 监听路由对象的改变：&lt;div id&#x3D;&quot;app&quot;&gt; &lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt; &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt; &lt;router-view&gt;&lt;&#x2F;router-view&gt; &lt;&#x2F;div&gt; &lt;script&gt; var login &#x3D; Vue.extend(&#123; template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39; &#125;); var register &#x3D; Vue.extend(&#123; template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39; &#125;); var router &#x3D; new VueRouter(&#123; routes: [ &#123; path: &quot;&#x2F;login&quot;, component: login &#125;, &#123; path: &quot;&#x2F;register&quot;, component: register &#125; ] &#125;); &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123;&#125;, methods: &#123;&#125;, router: router, watch: &#123; &#39;$route&#39;: function (newVal, oldVal) &#123; if (newVal.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123; console.log(&#39;这是登录组件&#39;); &#125; &#125; &#125; &#125;); &lt;&#x2F;script&gt; computed计算属性的使用 默认只有getter的计算属性：&lt;div id&#x3D;&quot;app&quot;&gt; &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; + &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D; &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt; &lt;&#x2F;div&gt; &lt;script&gt; &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; firstName: &#39;jack&#39;, lastName: &#39;chen&#39; &#125;, methods: &#123;&#125;, computed: &#123; &#x2F;&#x2F; 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值 fullName() &#123; return this.firstName + &#39; - &#39; + this.lastName; &#125; &#125; &#125;); &lt;&#x2F;script&gt; 定义有getter和setter的计算属性：&lt;div id&#x3D;&quot;app&quot;&gt; &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt; &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;修改fullName&quot; @click&#x3D;&quot;changeName&quot;&gt; &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt; &lt;&#x2F;div&gt; &lt;script&gt; &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; firstName: &#39;jack&#39;, lastName: &#39;chen&#39; &#125;, methods: &#123; changeName() &#123; this.fullName &#x3D; &#39;TOM - chen2&#39;; &#125; &#125;, computed: &#123; fullName: &#123; get: function () &#123; return this.firstName + &#39; - &#39; + this.lastName; &#125;, set: function (newVal) &#123; var parts &#x3D; newVal.split(&#39; - &#39;); this.firstName &#x3D; parts[0]; this.lastName &#x3D; parts[1]; &#125; &#125; &#125; &#125;); &lt;&#x2F;script&gt; watch、computed和methods之间的对比 computed属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用； methods方法表示一个具体的操作，主要书写业务逻辑； watch一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是computed和methods的结合体； nrm的安装使用作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样； 运行npm i nrm -g全局安装nrm包； 使用nrm ls查看当前所有可用的镜像源地址以及当前所使用的镜像源地址； 使用nrm use npm或nrm use taobao切换不同的镜像源地址； 注意： nrm 只是单纯的提供了几个常用的 下载包的 URL地址，并能够让我们在 这几个 地址之间，很方便的进行切换，但是，我们每次装包的时候，使用的 装包工具，都是 npm 相关文件 URL中的hash（井号）","categories":[{"name":"es6语言","slug":"es6语言","permalink":"https://jxdw.github.io/categories/es6%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【转载】vue学习之day3","slug":"es6_vue_study_day3","date":"2020-07-09T13:13:16.000Z","updated":"2020-10-22T14:31:38.084Z","comments":true,"path":"2020/07/09/es6_vue_study_day3/","link":"","permalink":"https://jxdw.github.io/2020/07/09/es6_vue_study_day3/","excerpt":"Vue.js - Day3定义Vue组件什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；组件化和模块化的不同： 模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一； 组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用","text":"Vue.js - Day3定义Vue组件什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；组件化和模块化的不同： 模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一； 组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用 全局组件定义的三种方式 使用 Vue.extend 配合 Vue.component 方法：var login &#x3D; Vue.extend(&#123; template: &#39;&lt;h1&gt;登录&lt;&#x2F;h1&gt;&#39; &#125;); Vue.component(&#39;login&#39;, login); 直接使用 Vue.component 方法：Vue.component(&#39;register&#39;, &#123; template: &#39;&lt;h1&gt;注册&lt;&#x2F;h1&gt;&#39; &#125;); 将模板字符串，定义到script标签种：&lt;script id&#x3D;&quot;tmpl&quot; type&#x3D;&quot;x-template&quot;&gt; &lt;div&gt;&lt;a href&#x3D;&quot;#&quot;&gt;登录&lt;&#x2F;a&gt; | &lt;a href&#x3D;&quot;#&quot;&gt;注册&lt;&#x2F;a&gt;&lt;&#x2F;div&gt; &lt;&#x2F;script&gt; 同时，需要使用 Vue.component 来定义组件：Vue.component(&#39;account&#39;, &#123; template: &#39;#tmpl&#39; &#125;); 注意： 组件中的DOM结构，有且只能有唯一的根元素（Root Element）来进行包裹！ 组件中展示数据和响应事件 在组件中，data需要被定义为一个方法，例如：Vue.component(&#39;account&#39;, &#123; template: &#39;#tmpl&#39;, data() &#123; return &#123; msg: &#39;大家好！&#39; &#125; &#125;, methods:&#123; login()&#123; alert(&#39;点击了登录按钮&#39;); &#125; &#125; &#125;); 在子组件中，如果将模板字符串，定义到了script标签中，那么，要访问子组件身上的data属性中的值，需要使用this来访问； 【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象 通过计数器案例演示 使用components属性定义局部子组件 组件实例定义方式：&lt;script&gt; &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123;&#125;, methods: &#123;&#125;, components: &#123; &#x2F;&#x2F; 定义子组件 account: &#123; &#x2F;&#x2F; account 组件 template: &#39;&lt;div&gt;&lt;h1&gt;这是Account组件&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;&lt;login&gt;&lt;&#x2F;login&gt;&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; 在这里使用定义的子组件 components: &#123; &#x2F;&#x2F; 定义子组件的子组件 login: &#123; &#x2F;&#x2F; login 组件 template: &quot;&lt;h3&gt;这是登录组件&lt;&#x2F;h3&gt;&quot; &#125; &#125; &#125; &#125; &#125;); &lt;&#x2F;script&gt; 引用组件：&lt;div id&#x3D;&quot;app&quot;&gt; &lt;account&gt;&lt;&#x2F;account&gt; &lt;&#x2F;div&gt; 使用flag标识符结合v-if和v-else切换组件 页面结构：&lt;div id&#x3D;&quot;app&quot;&gt; &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;toggle&quot; @click&#x3D;&quot;flag&#x3D;!flag&quot;&gt; &lt;my-com1 v-if&#x3D;&quot;flag&quot;&gt;&lt;&#x2F;my-com1&gt; &lt;my-com2 v-else&#x3D;&quot;flag&quot;&gt;&lt;&#x2F;my-com2&gt; &lt;&#x2F;div&gt; Vue实例定义：&lt;script&gt; Vue.component(&#39;myCom1&#39;, &#123; template: &#39;&lt;h3&gt;奔波霸&lt;&#x2F;h3&gt;&#39; &#125;) Vue.component(&#39;myCom2&#39;, &#123; template: &#39;&lt;h3&gt;霸波奔&lt;&#x2F;h3&gt;&#39; &#125;) &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; flag: true &#125;, methods: &#123;&#125; &#125;); &lt;&#x2F;script&gt; 使用:is属性来切换不同的子组件,并添加切换动画 组件实例定义方式：&#x2F;&#x2F; 登录组件 const login &#x3D; Vue.extend(&#123; template: &#96;&lt;div&gt; &lt;h3&gt;登录组件&lt;&#x2F;h3&gt; &lt;&#x2F;div&gt;&#96; &#125;); Vue.component(&#39;login&#39;, login); &#x2F;&#x2F; 注册组件 const register &#x3D; Vue.extend(&#123; template: &#96;&lt;div&gt; &lt;h3&gt;注册组件&lt;&#x2F;h3&gt; &lt;&#x2F;div&gt;&#96; &#125;); Vue.component(&#39;register&#39;, register); &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; comName: &#39;login&#39; &#125;, methods: &#123;&#125; &#125;); 使用component标签，来引用组件，并通过:is属性来指定要加载的组件：&lt;div id&#x3D;&quot;app&quot;&gt; &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;login&#39;&quot;&gt;登录&lt;&#x2F;a&gt; &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;register&#39;&quot;&gt;注册&lt;&#x2F;a&gt; &lt;hr&gt; &lt;transition mode&#x3D;&quot;out-in&quot;&gt; &lt;component :is&#x3D;&quot;comName&quot;&gt;&lt;&#x2F;component&gt; &lt;&#x2F;transition&gt;&lt;&#x2F;div&gt; 添加切换样式：&lt;style&gt; .v-enter, .v-leave-to &#123; opacity: 0; transform: translateX(30px); &#125; .v-enter-active, .v-leave-active &#123; position: absolute; transition: all 0.3s ease; &#125; h3&#123; margin: 0; &#125;&lt;&#x2F;style&gt; 父组件向子组件传值 组件实例定义方式，注意：一定要使用props属性来定义父组件传递过来的数据&lt;script&gt; &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; msg: &#39;这是父组件中的消息&#39; &#125;, components: &#123; son: &#123; template: &#39;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;&#x2F;h1&gt;&#39;, props: [&#39;finfo&#39;] &#125; &#125; &#125;); &lt;&#x2F;script&gt; 使用v-bind或简化指令，将数据传递到子组件中：&lt;div id&#x3D;&quot;app&quot;&gt; &lt;son :finfo&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;son&gt; &lt;&#x2F;div&gt; 子组件向父组件传值 原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去； 父组件将方法的引用传递给子组件，其中，getMsg是父组件中methods中定义的方法名称，func是子组件调用传递过来方法时候的方法名称&lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt; 子组件内部通过this.$emit(&#39;方法名&#39;, 要传递的数据)方式，来调用父组件中的方法，同时把数据传递给父组件使用&lt;div id&#x3D;&quot;app&quot;&gt; &lt;!-- 引用父组件 --&gt; &lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt; &lt;!-- 组件模板定义 --&gt; &lt;script type&#x3D;&quot;x-template&quot; id&#x3D;&quot;son&quot;&gt; &lt;div&gt; &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;向父组件传值&quot; @click&#x3D;&quot;sendMsg&quot; &#x2F;&gt; &lt;&#x2F;div&gt; &lt;&#x2F;script&gt; &lt;&#x2F;div&gt; &lt;script&gt; &#x2F;&#x2F; 子组件的定义方式 Vue.component(&#39;son&#39;, &#123; template: &#39;#son&#39;, &#x2F;&#x2F; 组件模板Id methods: &#123; sendMsg() &#123; &#x2F;&#x2F; 按钮的点击事件 this.$emit(&#39;func&#39;, &#39;OK&#39;); &#x2F;&#x2F; 调用父组件传递过来的方法，同时把数据传递出去 &#125; &#125; &#125;); &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123;&#125;, methods: &#123; getMsg(val)&#123; &#x2F;&#x2F; 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义 alert(val); &#125; &#125; &#125;); &lt;&#x2F;script&gt; 评论列表案例目标：主要练习父子组件之间传值 使用 this.$refs 来获取元素和组件&lt;div id&#x3D;&quot;app&quot;&gt; &lt;div&gt; &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;获取元素内容&quot; @click&#x3D;&quot;getElement&quot; &#x2F;&gt; &lt;!-- 使用 ref 获取元素 --&gt; &lt;h1 ref&#x3D;&quot;myh1&quot;&gt;这是一个大大的H1&lt;&#x2F;h1&gt; &lt;hr&gt; &lt;!-- 使用 ref 获取子组件 --&gt; &lt;my-com ref&#x3D;&quot;mycom&quot;&gt;&lt;&#x2F;my-com&gt; &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;script&gt; Vue.component(&#39;my-com&#39;, &#123; template: &#39;&lt;h5&gt;这是一个子组件&lt;&#x2F;h5&gt;&#39;, data() &#123; return &#123; name: &#39;子组件&#39; &#125; &#125; &#125;); &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123;&#125;, methods: &#123; getElement() &#123; &#x2F;&#x2F; 通过 this.$refs 来获取元素 console.log(this.$refs.myh1.innerText); &#x2F;&#x2F; 通过 this.$refs 来获取组件 console.log(this.$refs.mycom.name); &#125; &#125; &#125;);&lt;&#x2F;script&gt; 什么是路由 对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源； 对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现； 在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）； 在 vue 中使用 vue-router 导入 vue-router 组件类库：&lt;!-- 1. 导入 vue-router 组件类库 --&gt; &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue-router-2.7.0.js&quot;&gt;&lt;&#x2F;script&gt; 使用 router-link 组件来导航&lt;!-- 2. 使用 router-link 组件来导航 --&gt;&lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;&lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt; 使用 router-view 组件来显示匹配到的组件&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;&lt;router-view&gt;&lt;&#x2F;router-view&gt; 创建使用Vue.extend创建组件&#x2F;&#x2F; 4.1 使用 Vue.extend 来创建登录组件var login &#x3D; Vue.extend(&#123; template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;&#125;);&#x2F;&#x2F; 4.2 使用 Vue.extend 来创建注册组件var register &#x3D; Vue.extend(&#123; template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;&#125;); 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则&#x2F;&#x2F; 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则 var router &#x3D; new VueRouter(&#123; routes: [ &#123; path: &#39;&#x2F;login&#39;, component: login &#125;, &#123; path: &#39;&#x2F;register&#39;, component: register &#125; ] &#125;); 使用 router 属性来使用路由规则&#x2F;&#x2F; 6. 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, router: router &#x2F;&#x2F; 使用 router 属性来使用路由规则 &#125;); 设置路由高亮设置路由切换动效在路由规则中定义参数 在规则中定义参数：&#123; path: &#39;&#x2F;register&#x2F;:id&#39;, component: register &#125; 通过 this.$route.params来获取路由中的参数：var register &#x3D; Vue.extend(&#123; template: &#39;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;&#x2F;h1&gt;&#39; &#125;); 使用 children 属性实现路由嵌套&lt;div id&#x3D;&quot;app&quot;&gt; &lt;router-link to&#x3D;&quot;&#x2F;account&quot;&gt;Account&lt;&#x2F;router-link&gt; &lt;router-view&gt;&lt;&#x2F;router-view&gt;&lt;&#x2F;div&gt;&lt;script&gt; &#x2F;&#x2F; 父路由中的组件 const account &#x3D; Vue.extend(&#123; template: &#96;&lt;div&gt; 这是account组件 &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;login&quot;&gt;login&lt;&#x2F;router-link&gt; | &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;register&quot;&gt;register&lt;&#x2F;router-link&gt; &lt;router-view&gt;&lt;&#x2F;router-view&gt; &lt;&#x2F;div&gt;&#96; &#125;); &#x2F;&#x2F; 子路由中的 login 组件 const login &#x3D; Vue.extend(&#123; template: &#39;&lt;div&gt;登录组件&lt;&#x2F;div&gt;&#39; &#125;); &#x2F;&#x2F; 子路由中的 register 组件 const register &#x3D; Vue.extend(&#123; template: &#39;&lt;div&gt;注册组件&lt;&#x2F;div&gt;&#39; &#125;); &#x2F;&#x2F; 路由实例 var router &#x3D; new VueRouter(&#123; routes: [ &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;account&#x2F;login&#39; &#125;, &#x2F;&#x2F; 使用 redirect 实现路由重定向 &#123; path: &#39;&#x2F;account&#39;, component: account, children: [ &#x2F;&#x2F; 通过 children 数组属性，来实现路由的嵌套 &#123; path: &#39;login&#39;, component: login &#125;, &#x2F;&#x2F; 注意，子路由的开头位置，不要加 &#x2F; 路径符 &#123; path: &#39;register&#39;, component: register &#125; ] &#125; ] &#125;); &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123;&#125;, methods: &#123;&#125;, components: &#123; account &#125;, router: router &#125;);&lt;&#x2F;script&gt; 命名视图实现经典布局 标签代码结构：&lt;div id&#x3D;&quot;app&quot;&gt; &lt;router-view&gt;&lt;&#x2F;router-view&gt; &lt;div class&#x3D;&quot;content&quot;&gt; &lt;router-view name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;router-view&gt; &lt;router-view name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;router-view&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; JS代码：&lt;script&gt; var header &#x3D; Vue.component(&#39;header&#39;, &#123; template: &#39;&lt;div class&#x3D;&quot;header&quot;&gt;header&lt;&#x2F;div&gt;&#39; &#125;); var sidebar &#x3D; Vue.component(&#39;sidebar&#39;, &#123; template: &#39;&lt;div class&#x3D;&quot;sidebar&quot;&gt;sidebar&lt;&#x2F;div&gt;&#39; &#125;); var mainbox &#x3D; Vue.component(&#39;mainbox&#39;, &#123; template: &#39;&lt;div class&#x3D;&quot;mainbox&quot;&gt;mainbox&lt;&#x2F;div&gt;&#39; &#125;); &#x2F;&#x2F; 创建路由对象 var router &#x3D; new VueRouter(&#123; routes: [ &#123; path: &#39;&#x2F;&#39;, components: &#123; default: header, a: sidebar, b: mainbox &#125; &#125; ] &#125;); &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123;&#125;, methods: &#123;&#125;, router &#125;); &lt;&#x2F;script&gt; CSS 样式：&lt;style&gt; .header &#123; border: 1px solid red; &#125; .content&#123; display: flex; &#125; .sidebar &#123; flex: 2; border: 1px solid green; height: 500px; &#125; .mainbox&#123; flex: 8; border: 1px solid blue; height: 500px; &#125;&lt;&#x2F;style&gt; watch属性的使用考虑一个问题：想要实现 名 和 姓 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？） 监听data中属性的改变：&lt;div id&#x3D;&quot;app&quot;&gt; &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; + &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D; &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt; &lt;&#x2F;div&gt; &lt;script&gt; &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; firstName: &#39;jack&#39;, lastName: &#39;chen&#39;, fullName: &#39;jack - chen&#39; &#125;, methods: &#123;&#125;, watch: &#123; &#39;firstName&#39;: function (newVal, oldVal) &#123; &#x2F;&#x2F; 第一个参数是新数据，第二个参数是旧数据 this.fullName &#x3D; newVal + &#39; - &#39; + this.lastName; &#125;, &#39;lastName&#39;: function (newVal, oldVal) &#123; this.fullName &#x3D; this.firstName + &#39; - &#39; + newVal; &#125; &#125; &#125;); &lt;&#x2F;script&gt; 监听路由对象的改变：&lt;div id&#x3D;&quot;app&quot;&gt; &lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt; &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt; &lt;router-view&gt;&lt;&#x2F;router-view&gt; &lt;&#x2F;div&gt; &lt;script&gt; var login &#x3D; Vue.extend(&#123; template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39; &#125;); var register &#x3D; Vue.extend(&#123; template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39; &#125;); var router &#x3D; new VueRouter(&#123; routes: [ &#123; path: &quot;&#x2F;login&quot;, component: login &#125;, &#123; path: &quot;&#x2F;register&quot;, component: register &#125; ] &#125;); &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123;&#125;, methods: &#123;&#125;, router: router, watch: &#123; &#39;$route&#39;: function (newVal, oldVal) &#123; if (newVal.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123; console.log(&#39;这是登录组件&#39;); &#125; &#125; &#125; &#125;); &lt;&#x2F;script&gt; computed计算属性的使用 默认只有getter的计算属性：&lt;div id&#x3D;&quot;app&quot;&gt; &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; + &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D; &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt; &lt;&#x2F;div&gt; &lt;script&gt; &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; firstName: &#39;jack&#39;, lastName: &#39;chen&#39; &#125;, methods: &#123;&#125;, computed: &#123; &#x2F;&#x2F; 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值 fullName() &#123; return this.firstName + &#39; - &#39; + this.lastName; &#125; &#125; &#125;); &lt;&#x2F;script&gt; 定义有getter和setter的计算属性：&lt;div id&#x3D;&quot;app&quot;&gt; &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt; &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;修改fullName&quot; @click&#x3D;&quot;changeName&quot;&gt; &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt; &lt;&#x2F;div&gt; &lt;script&gt; &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; firstName: &#39;jack&#39;, lastName: &#39;chen&#39; &#125;, methods: &#123; changeName() &#123; this.fullName &#x3D; &#39;TOM - chen2&#39;; &#125; &#125;, computed: &#123; fullName: &#123; get: function () &#123; return this.firstName + &#39; - &#39; + this.lastName; &#125;, set: function (newVal) &#123; var parts &#x3D; newVal.split(&#39; - &#39;); this.firstName &#x3D; parts[0]; this.lastName &#x3D; parts[1]; &#125; &#125; &#125; &#125;); &lt;&#x2F;script&gt; watch、computed和methods之间的对比 computed属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用； methods方法表示一个具体的操作，主要书写业务逻辑； watch一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是computed和methods的结合体； nrm的安装使用作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样； 运行npm i nrm -g全局安装nrm包； 使用nrm ls查看当前所有可用的镜像源地址以及当前所使用的镜像源地址； 使用nrm use npm或nrm use taobao切换不同的镜像源地址； 相关文件 URL中的hash（井号）","categories":[{"name":"es6语言","slug":"es6语言","permalink":"https://jxdw.github.io/categories/es6%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【转载】vue学习之day2","slug":"es6_vue_study_day2","date":"2020-07-08T13:12:16.000Z","updated":"2020-10-22T14:30:51.952Z","comments":true,"path":"2020/07/08/es6_vue_study_day2/","link":"","permalink":"https://jxdw.github.io/2020/07/08/es6_vue_study_day2/","excerpt":"Vue.js - Day2","text":"Vue.js - Day2 品牌管理案例添加新品牌删除品牌根据条件筛选品牌 1.x 版本中的filterBy指令，在2.x中已经被废除： filterBy - 指令 &lt;tr v-for&#x3D;&quot;item in list | filterBy searchName in &#39;name&#39;&quot;&gt; &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt; &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt; &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt; &lt;td&gt; &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt; &lt;&#x2F;td&gt;&lt;&#x2F;tr&gt; 在2.x版本中手动实现筛选的方式： 筛选框绑定到 VM 实例中的 searchName 属性： &lt;hr&gt; 输入筛选名称：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot;&gt; 在使用 v-for 指令循环每一行数据的时候，不再直接 item in list，而是 in 一个 过滤的methods 方法，同时，把过滤条件searchName传递进去： &lt;tbody&gt; &lt;tr v-for&#x3D;&quot;item in search(searchName)&quot;&gt; &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt; &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt; &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt; &lt;td&gt; &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;tbody&gt; search 过滤方法中，使用 数组的 filter 方法进行过滤： search(name) &#123; return this.list.filter(x &#x3D;&gt; &#123; return x.name.indexOf(name) !&#x3D; -1; &#125;);&#125; Vue调试工具vue-devtools的安装步骤和使用Vue.js devtools - 翻墙安装方式 - 推荐 过滤器概念：Vue.js 允许你自定义过滤器，可被用作一些常见的文本格式化。过滤器可以用在两个地方：mustache 插值和 v-bind 表达式。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示； 私有过滤器 HTML元素： &lt;td&gt;&#123;&#123;item.ctime | dataFormat(&#39;yyyy-mm-dd&#39;)&#125;&#125;&lt;&#x2F;td&gt; 私有 filters 定义方式： filters: &#123; &#x2F;&#x2F; 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用 dataFormat(input, pattern &#x3D; &quot;&quot;) &#123; &#x2F;&#x2F; 在参数列表中 通过 pattern&#x3D;&quot;&quot; 来指定形参默认值，防止报错 var dt &#x3D; new Date(input); &#x2F;&#x2F; 获取年月日 var y &#x3D; dt.getFullYear(); var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;); var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;); &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日 &#x2F;&#x2F; 否则，就返回 年-月-日 时：分：秒 if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123; return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;; &#125; else &#123; &#x2F;&#x2F; 获取时分秒 var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;); var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;); var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;); return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;; &#125; &#125; &#125; 使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串； 全局过滤器&#x2F;&#x2F; 定义一个全局过滤器Vue.filter(&#39;dataFormat&#39;, function (input, pattern &#x3D; &#39;&#39;) &#123; var dt &#x3D; new Date(input); &#x2F;&#x2F; 获取年月日 var y &#x3D; dt.getFullYear(); var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;); var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;); &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日 &#x2F;&#x2F; 否则，就返回 年-月-日 时：分：秒 if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123; return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;; &#125; else &#123; &#x2F;&#x2F; 获取时分秒 var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;); var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;); var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;); return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;; &#125;&#125;); 注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！ 键盘修饰符以及自定义键盘修饰符1.x中自定义键盘修饰符【了解即可】Vue.directive(&#39;on&#39;).keyCodes.f2 &#x3D; 113; 2.x中自定义键盘修饰符 通过Vue.config.keyCodes.名称 = 按键值来自定义案件修饰符的别名： Vue.config.keyCodes.f2 &#x3D; 113; 使用自定义的按键修饰符： &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot; @keyup.f2&#x3D;&quot;add&quot;&gt; 自定义指令 自定义全局和局部的 自定义指令： &#x2F;&#x2F; 自定义全局指令 v-focus，为绑定的元素自动获取焦点：Vue.directive(&#39;focus&#39;, &#123; inserted: function (el) &#123; &#x2F;&#x2F; inserted 表示被绑定元素插入父节点时调用 el.focus(); &#125;&#125;);&#x2F;&#x2F; 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细： directives: &#123; color: &#123; &#x2F;&#x2F; 为元素设置指定的字体颜色 bind(el, binding) &#123; el.style.color &#x3D; binding.value; &#125; &#125;, &#39;font-weight&#39;: function (el, binding2) &#123; &#x2F;&#x2F; 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数 el.style.fontWeight &#x3D; binding2.value; &#125; &#125; 自定义指令的使用方式： &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot; v-focus v-color&#x3D;&quot;&#39;red&#39;&quot; v-font-weight&#x3D;&quot;900&quot;&gt; Vue 1.x 中 自定义元素指令【已废弃,了解即可】Vue.elementDirective(&#39;red-color&#39;, &#123; bind: function () &#123; this.el.style.color &#x3D; &#39;red&#39;; &#125;&#125;); 使用方式： &lt;red-color&gt;1232&lt;&#x2F;red-color&gt; vue实例的生命周期 什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！ 生命周期钩子：就是生命周期事件的别名而已； 生命周期钩子 = 生命周期函数 = 生命周期事件 主要的生命周期函数分类： 创建期间的生命周期函数： beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性 created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板 beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中 mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示 运行期间的生命周期函数： beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点 updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！ 销毁期间的生命周期函数： beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。 destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 vue-resource 实现 get, post, jsonp请求除了 vue-resource 之外，还可以使用 axios 的第三方包实现实现数据的请求 之前的学习中，如何发起数据请求？ 常见的数据请求类型？ get post jsonp 测试的URL请求资源地址： get请求地址： http://vue.studyit.io/api/getlunbo post请求地址：http://vue.studyit.io/api/post jsonp请求地址：http://vue.studyit.io/api/jsonp JSONP的实现原理 由于浏览器的安全性限制，不允许AJAX访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全； 可以通过动态创建script标签的形式，把script标签的src属性，指向数据接口的地址，因为script标签不存在跨域限制，这种数据获取方式，称作JSONP（注意：根据JSONP的实现原理，知晓，JSONP只支持Get请求）； 具体实现过程： 先在客户端定义一个回调方法，预定义对数据的操作； 再把这个回调方法的名称，通过URL传参的形式，提交到服务器的数据接口； 服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行； 客户端拿到服务器返回的字符串之后，当作Script脚本去解析执行，这样就能够拿到JSONP的数据了； 带大家通过 Node.js ，来手动实现一个JSONP的请求例子；const http &#x3D; require(&#39;http&#39;);&#x2F;&#x2F; 导入解析 URL 地址的核心模块const urlModule &#x3D; require(&#39;url&#39;);const server &#x3D; http.createServer();&#x2F;&#x2F; 监听 服务器的 request 请求事件，处理每个请求server.on(&#39;request&#39;, (req, res) &#x3D;&gt; &#123; const url &#x3D; req.url; &#x2F;&#x2F; 解析客户端请求的URL地址 var info &#x3D; urlModule.parse(url, true); &#x2F;&#x2F; 如果请求的 URL 地址是 &#x2F;getjsonp ，则表示要获取JSONP类型的数据 if (info.pathname &#x3D;&#x3D;&#x3D; &#39;&#x2F;getjsonp&#39;) &#123; &#x2F;&#x2F; 获取客户端指定的回调函数的名称 var cbName &#x3D; info.query.callback; &#x2F;&#x2F; 手动拼接要返回给客户端的数据对象 var data &#x3D; &#123; name: &#39;zs&#39;, age: 22, gender: &#39;男&#39;, hobby: [&#39;吃饭&#39;, &#39;睡觉&#39;, &#39;运动&#39;] &#125; &#x2F;&#x2F; 拼接出一个方法的调用，在调用这个方法的时候，把要发送给客户端的数据，序列化为字符串，作为参数传递给这个调用的方法： var result &#x3D; &#96;$&#123;cbName&#125;($&#123;JSON.stringify(data)&#125;)&#96;; &#x2F;&#x2F; 将拼接好的方法的调用，返回给客户端去解析执行 res.end(result); &#125; else &#123; res.end(&#39;404&#39;); &#125;&#125;);server.listen(3000, () &#x3D;&gt; &#123; console.log(&#39;server running at http:&#x2F;&#x2F;127.0.0.1:3000&#39;);&#125;); vue-resource 的配置步骤： 直接在页面中，通过script标签，引入 vue-resource 的脚本文件； 注意：引用的先后顺序是：先引用 Vue 的脚本文件，再引用 vue-resource 的脚本文件； 发送get请求：getInfo() &#123; &#x2F;&#x2F; get 方式获取数据 this.$http.get(&#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;getlunbo&#39;).then(res &#x3D;&gt; &#123; console.log(res.body); &#125;)&#125; 发送post请求：postInfo() &#123; var url &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;post&#39;; &#x2F;&#x2F; post 方法接收三个参数： &#x2F;&#x2F; 参数1： 要请求的URL地址 &#x2F;&#x2F; 参数2： 要发送的数据对象 &#x2F;&#x2F; 参数3： 指定post提交的编码类型为 application&#x2F;x-www-form-urlencoded this.$http.post(url, &#123; name: &#39;zs&#39; &#125;, &#123; emulateJSON: true &#125;).then(res &#x3D;&gt; &#123; console.log(res.body); &#125;);&#125; 发送JSONP请求获取数据：jsonpInfo() &#123; &#x2F;&#x2F; JSONP形式从服务器获取数据 var url &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;jsonp&#39;; this.$http.jsonp(url).then(res &#x3D;&gt; &#123; console.log(res.body); &#125;);&#125; 配置本地数据库和数据接口API 先解压安装 PHPStudy; 解压安装 Navicat 这个数据库可视化工具，并激活； 打开 Navicat 工具，新建空白数据库，名为 dtcmsdb4; 双击新建的数据库，连接上这个空白数据库，在新建的数据库上右键 -&gt; 运行SQL文件，选择并执行 dtcmsdb4.sql 这个数据库脚本文件；如果执行不报错，则数据库导入完成； 进入文件夹 vuecms3_nodejsapi 内部，执行 npm i 安装所有的依赖项； 先确保本机安装了 nodemon, 没有安装，则运行 npm i nodemon -g 进行全局安装，安装完毕后，进入到 vuecms3_nodejsapi目录 -&gt; src目录 -&gt; 双击运行 start.bat 如果API启动失败，请检查 PHPStudy 是否正常开启，同时，检查 app.js 中第 14行 中数据库连接配置字符串是否正确；PHPStudy 中默认的 用户名是root，默认的密码也是root 品牌管理改造展示品牌列表添加品牌数据删除品牌数据Vue中的动画为什么要有动画：动画能够提高用户的体验，帮助用户更好的理解页面中的功能； 使用过渡类名 HTML结构：&lt;div id&#x3D;&quot;app&quot;&gt; &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;动起来&quot; @click&#x3D;&quot;myAnimate&quot;&gt; &lt;!-- 使用 transition 将需要过渡的元素包裹起来 --&gt; &lt;transition name&#x3D;&quot;fade&quot;&gt; &lt;div v-show&#x3D;&quot;isshow&quot;&gt;动画哦&lt;&#x2F;div&gt; &lt;&#x2F;transition&gt; &lt;&#x2F;div&gt; VM 实例：&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModelvar vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; isshow: false &#125;, methods: &#123; myAnimate() &#123; this.isshow &#x3D; !this.isshow; &#125; &#125;&#125;); 定义两组类样式：&#x2F;* 定义进入和离开时候的过渡状态 *&#x2F; .fade-enter-active, .fade-leave-active &#123; transition: all 0.2s ease; position: absolute; &#125; &#x2F;* 定义进入过渡的开始状态 和 离开过渡的结束状态 *&#x2F; .fade-enter, .fade-leave-to &#123; opacity: 0; transform: translateX(100px); &#125; 使用第三方 CSS 动画库 导入动画类库：&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;.&#x2F;lib&#x2F;animate.css&quot;&gt; 定义 transition 及属性：&lt;transition enter-active-class&#x3D;&quot;fadeInRight&quot; leave-active-class&#x3D;&quot;fadeOutRight&quot; :duration&#x3D;&quot;&#123; enter: 500, leave: 800 &#125;&quot;&gt; &lt;div class&#x3D;&quot;animated&quot; v-show&#x3D;&quot;isshow&quot;&gt;动画哦&lt;&#x2F;div&gt;&lt;&#x2F;transition&gt; 使用动画钩子函数 定义 transition 组件以及三个钩子函数：&lt;div id&#x3D;&quot;app&quot;&gt; &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;切换动画&quot; @click&#x3D;&quot;isshow &#x3D; !isshow&quot;&gt; &lt;transition @before-enter&#x3D;&quot;beforeEnter&quot; @enter&#x3D;&quot;enter&quot; @after-enter&#x3D;&quot;afterEnter&quot;&gt; &lt;div v-if&#x3D;&quot;isshow&quot; class&#x3D;&quot;show&quot;&gt;OK&lt;&#x2F;div&gt; &lt;&#x2F;transition&gt; &lt;&#x2F;div&gt; 定义三个 methods 钩子方法：methods: &#123; beforeEnter(el) &#123; &#x2F;&#x2F; 动画进入之前的回调 el.style.transform &#x3D; &#39;translateX(500px)&#39;; &#125;, enter(el, done) &#123; &#x2F;&#x2F; 动画进入完成时候的回调 el.offsetWidth; el.style.transform &#x3D; &#39;translateX(0px)&#39;; done(); &#125;, afterEnter(el) &#123; &#x2F;&#x2F; 动画进入完成之后的回调 this.isshow &#x3D; !this.isshow; &#125; &#125; 定义动画过渡时长和样式：.show&#123; transition: all 0.4s ease; &#125; v-for 的列表过渡 定义过渡样式：&lt;style&gt; .list-enter, .list-leave-to &#123; opacity: 0; transform: translateY(10px); &#125; .list-enter-active, .list-leave-active &#123; transition: all 0.3s ease; &#125;&lt;&#x2F;style&gt; 定义DOM结构，其中，需要使用 transition-group 组件把v-for循环的列表包裹起来：&lt;div id&#x3D;&quot;app&quot;&gt; &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;txt&quot; @keyup.enter&#x3D;&quot;add&quot;&gt; &lt;transition-group tag&#x3D;&quot;ul&quot; name&#x3D;&quot;list&quot;&gt; &lt;li v-for&#x3D;&quot;(item, i) in list&quot; :key&#x3D;&quot;i&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt; &lt;&#x2F;transition-group&gt;&lt;&#x2F;div&gt; 定义 VM中的结构：&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModelvar vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; txt: &#39;&#39;, list: [1, 2, 3, 4] &#125;, methods: &#123; add() &#123; this.list.push(this.txt); this.txt &#x3D; &#39;&#39;; &#125; &#125;&#125;); 列表的排序过渡&lt;transition-group&gt; 组件还有一个特殊之处。不仅可以进入和离开动画，还可以改变定位。要使用这个新功能只需了解新增的 v-move 特性，它会在元素的改变定位的过程中应用。 v-move 和 v-leave-active 结合使用，能够让列表的过渡更加平缓柔和：.v-move&#123; transition: all 0.8s ease;&#125;.v-leave-active&#123; position: absolute;&#125; 相关文章 vue.js 1.x 文档 vue.js 2.x 文档 String.prototype.padStart(maxLength, fillString) js 里面的键盘事件对应的键码 pagekit/vue-resource navicat如何导入sql文件和导出sql文件 贝塞尔在线生成器","categories":[{"name":"es6语言","slug":"es6语言","permalink":"https://jxdw.github.io/categories/es6%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【转载】ES6与Vue框架学习之day1","slug":"es6_vue_study_day1","date":"2020-07-07T13:11:16.000Z","updated":"2020-10-22T14:30:41.169Z","comments":true,"path":"2020/07/07/es6_vue_study_day1/","link":"","permalink":"https://jxdw.github.io/2020/07/07/es6_vue_study_day1/","excerpt":"vue.js介绍前端工程师的主要工作Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别 MVC 是后端的分层开发概念； 为什么有了MVC还要有MVVM MVC主要是后端工程师关注。 MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel 前端的主要工作主要负责MVVM中的V、VM这一层；主要工作就是和界面打交道，来制作前端页面效果； 框架与Vue.js框架和库的区别 框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。 node 中的 express； 库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。 从Jquery 切换到 Zepto 从 EJS 切换到 art-template 为什么要学习流行框架 企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱； 企业中，使用框架，能够提高开发的效率； 提高开发效率的发展历程： 原生JS Jquery之类的类库 前端模板引擎 Angular.js / Vue.js 增强自己就业时候的竞争力 人无我有，人有我优 你平时不忙的时候，都在干嘛？","text":"vue.js介绍前端工程师的主要工作Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别 MVC 是后端的分层开发概念； 为什么有了MVC还要有MVVM MVC主要是后端工程师关注。 MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel 前端的主要工作主要负责MVVM中的V、VM这一层；主要工作就是和界面打交道，来制作前端页面效果； 框架与Vue.js框架和库的区别 框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。 node 中的 express； 库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。 从Jquery 切换到 Zepto 从 EJS 切换到 art-template 为什么要学习流行框架 企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱； 企业中，使用框架，能够提高开发的效率； 提高开发效率的发展历程： 原生JS Jquery之类的类库 前端模板引擎 Angular.js / Vue.js 增强自己就业时候的竞争力 人无我有，人有我优 你平时不忙的时候，都在干嘛？ 什么是Vue.js Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex） Vue.js 是前端的主流框架之一，和Angular.js、React.js 一起，并成为前端三大主流框架！ Vue.js 是一套构建用户界面的框架，只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发） 在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑； 能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】 Vue调试工具vue-devtools的安装步骤和使用Vue.js devtools - 翻墙安装方式 - 推荐 Vue基础语法基本的代码结构和插值表达式v-cloakVue语法之v-textv-htmlVue指令之v-bind的三种用法 直接使用指令v-bind 使用简化指令: 在绑定的时候，拼接绑定内容：:title=&quot;btnTitle + &#39;, 这是追加的内容&#39;&quot; Vue指令之v-on跑马灯效果 HTML结构： &lt;div id&#x3D;&quot;app&quot;&gt; &lt;p&gt;&#123;&#123;info&#125;&#125;&lt;&#x2F;p&gt; &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;开启&quot; v-on:click&#x3D;&quot;go&quot;&gt; &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;停止&quot; v-on:click&#x3D;&quot;stop&quot;&gt; &lt;&#x2F;div&gt; Vue实例： &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; info: &#39;猥琐发育，别浪~！&#39;, intervalId: null &#125;, methods: &#123; go() &#123; &#x2F;&#x2F; 如果当前有定时器在运行，则直接return if (this.intervalId !&#x3D; null) &#123; return; &#125; &#x2F;&#x2F; 开始定时器 this.intervalId &#x3D; setInterval(() &#x3D;&gt; &#123; this.info &#x3D; this.info.substring(1) + this.info.substring(0, 1); &#125;, 500); &#125;, stop() &#123; clearInterval(this.intervalId); &#125; &#125; &#125;); Vue指令之v-on的缩写和事件修饰符事件修饰符： .stop 阻止冒泡 .prevent 阻止默认事件 .capture 添加事件侦听器时使用事件捕获模式 .self 只当事件在该元素本身（比如不是子元素）触发时触发回调 .once 事件只触发一次 Vue指令之v-model和双向数据绑定Vue指令之v-for和key属性 迭代数组 &lt;ul&gt; &lt;li v-for&#x3D;&quot;(item, i) in list&quot;&gt;索引：&#123;&#123;i&#125;&#125; --- 姓名：&#123;&#123;item.name&#125;&#125; --- 年龄：&#123;&#123;item.age&#125;&#125;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt; 迭代对象中的属性 &lt;!-- 循环遍历对象身上的属性 --&gt; &lt;div v-for&#x3D;&quot;(val, key, i) in userInfo&quot;&gt;&#123;&#123;val&#125;&#125; --- &#123;&#123;key&#125;&#125; --- &#123;&#123;i&#125;&#125;&lt;&#x2F;div&gt; 迭代数字 &lt;p v-for&#x3D;&quot;i in 10&quot;&gt;这是第 &#123;&#123;i&#125;&#125; 个P标签&lt;&#x2F;p&gt; 2.2.0+ 的版本里，当在组件中使用 v-for 时，key 现在是必须的。 当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “就地复用” 策略。如果数据项的顺序被改变，Vue将不是移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。 Vue指令之v-if和v-show 一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。 在Vue中使用样式使用class样式 数组 &lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt; 数组中使用三元表达式 &lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, isactive?&#39;active&#39;:&#39;&#39;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt; 数组中嵌套对象 &lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, &#123;&#39;active&#39;: isactive&#125;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt; 直接使用对象 &lt;h1 :class&#x3D;&quot;&#123;red:true, italic:true, active:true, thin:true&#125;&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt; 使用内联样式 直接在元素上通过 :style 的形式，书写样式对象 &lt;h1 :style&#x3D;&quot;&#123;color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;&#125;&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt; 将样式对象，定义到 data 中，并直接引用到 :style 中 在data上定义样式： data: &#123; h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;&#125; 在元素中，通过属性绑定的形式，将样式对象应用到元素中： &lt;h1 :style&#x3D;&quot;h1StyleObj&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt; 在 :style 中通过数组，引用多个 data 上的样式对象 在data上定义样式：data: &#123; h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;, h1StyleObj2: &#123; fontStyle: &#39;italic&#39; &#125;&#125; 在元素中，通过属性绑定的形式，将样式对象应用到元素中：&lt;h1 :style&#x3D;&quot;[h1StyleObj, h1StyleObj2]&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt; 过滤器概念：Vue.js 允许你自定义过滤器，可被用作一些常见的文本格式化。过滤器可以用在两个地方：mustache 插值和 v-bind 表达式。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示； 私有过滤器 HTML元素： &lt;td&gt;&#123;&#123;item.ctime | dataFormat(&#39;yyyy-mm-dd&#39;)&#125;&#125;&lt;&#x2F;td&gt; 私有 filters 定义方式： filters: &#123; &#x2F;&#x2F; 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用 dataFormat(input, pattern &#x3D; &quot;&quot;) &#123; &#x2F;&#x2F; 在参数列表中 通过 pattern&#x3D;&quot;&quot; 来指定形参默认值，防止报错 var dt &#x3D; new Date(input); &#x2F;&#x2F; 获取年月日 var y &#x3D; dt.getFullYear(); var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;); var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;); &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日 &#x2F;&#x2F; 否则，就返回 年-月-日 时：分：秒 if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123; return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;; &#125; else &#123; &#x2F;&#x2F; 获取时分秒 var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;); var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;); var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;); return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;; &#125; &#125; &#125; 使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串； 全局过滤器&#x2F;&#x2F; 定义一个全局过滤器Vue.filter(&#39;dataFormat&#39;, function (input, pattern &#x3D; &#39;&#39;) &#123; var dt &#x3D; new Date(input); &#x2F;&#x2F; 获取年月日 var y &#x3D; dt.getFullYear(); var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;); var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;); &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日 &#x2F;&#x2F; 否则，就返回 年-月-日 时：分：秒 if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123; return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;; &#125; else &#123; &#x2F;&#x2F; 获取时分秒 var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;); var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;); var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;); return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;; &#125;&#125;); 注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！ 键盘修饰符以及自定义键盘修饰符1.x中自定义键盘修饰符【了解即可】Vue.directive(&#39;on&#39;).keyCodes.f2 &#x3D; 113; [2.x中自定义键盘修饰符]参考文档：https://cn.vuejs.org/v2/guide/events.html#键值修饰符 通过Vue.config.keyCodes.名称 = 按键值来自定义案件修饰符的别名： Vue.config.keyCodes.f2 &#x3D; 113; 使用自定义的按键修饰符： &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot; @keyup.f2&#x3D;&quot;add&quot;&gt; 自定义指令参考文档:https://cn.vuejs.org/v2/guide/custom-directive.html 自定义全局和局部的 自定义指令： &#x2F;&#x2F; 自定义全局指令 v-focus，为绑定的元素自动获取焦点：Vue.directive(&#39;focus&#39;, &#123; inserted: function (el) &#123; &#x2F;&#x2F; inserted 表示被绑定元素插入父节点时调用 el.focus(); &#125;&#125;);&#x2F;&#x2F; 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细： directives: &#123; color: &#123; &#x2F;&#x2F; 为元素设置指定的字体颜色 bind(el, binding) &#123; el.style.color &#x3D; binding.value; &#125; &#125;, &#39;font-weight&#39;: function (el, binding2) &#123; &#x2F;&#x2F; 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数 el.style.fontWeight &#x3D; binding2.value; &#125; &#125; 自定义指令的使用方式： &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot; v-focus v-color&#x3D;&quot;&#39;red&#39;&quot; v-font-weight&#x3D;&quot;900&quot;&gt; Vue 1.x 中 自定义元素指令【已废弃,了解即可】Vue.elementDirective(&#39;red-color&#39;, &#123; bind: function () &#123; this.el.style.color &#x3D; &#39;red&#39;; &#125;&#125;); 使用方式： &lt;red-color&gt;1232&lt;&#x2F;red-color&gt; 案例简易计算器案例 HTML 代码结构 &lt;div id&#x3D;&quot;app&quot;&gt; &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;n1&quot;&gt; &lt;select v-model&#x3D;&quot;opt&quot;&gt; &lt;option value&#x3D;&quot;0&quot;&gt;+&lt;&#x2F;option&gt; &lt;option value&#x3D;&quot;1&quot;&gt;-&lt;&#x2F;option&gt; &lt;option value&#x3D;&quot;2&quot;&gt;*&lt;&#x2F;option&gt; &lt;option value&#x3D;&quot;3&quot;&gt;÷&lt;&#x2F;option&gt; &lt;&#x2F;select&gt; &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;n2&quot;&gt; &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;&#x3D;&quot; v-on:click&#x3D;&quot;getResult&quot;&gt; &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;result&quot;&gt;&lt;&#x2F;div&gt; Vue实例代码： &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; n1: 0, n2: 0, result: 0, opt: &#39;0&#39; &#125;, methods: &#123; getResult() &#123; switch (this.opt) &#123; case &#39;0&#39;: this.result &#x3D; parseInt(this.n1) + parseInt(this.n2); break; case &#39;1&#39;: this.result &#x3D; parseInt(this.n1) - parseInt(this.n2); break; case &#39;2&#39;: this.result &#x3D; parseInt(this.n1) * parseInt(this.n2); break; case &#39;3&#39;: this.result &#x3D; parseInt(this.n1) &#x2F; parseInt(this.n2); break; &#125; &#125; &#125; &#125;); 品牌管理案例添加新品牌删除品牌根据条件筛选品牌 1.x 版本中的filterBy指令，在2.x中已经被废除： filterBy - 指令 &lt;tr v-for&#x3D;&quot;item in list | filterBy searchName in &#39;name&#39;&quot;&gt; &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt; &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt; &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt; &lt;td&gt; &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt; &lt;&#x2F;td&gt;&lt;&#x2F;tr&gt; 在2.x版本中手动实现筛选的方式： 筛选框绑定到 VM 实例中的 searchName 属性： &lt;hr&gt; 输入筛选名称：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot;&gt; 在使用 v-for 指令循环每一行数据的时候，不再直接 item in list，而是 in 一个 过滤的methods 方法，同时，把过滤条件searchName传递进去： &lt;tbody&gt; &lt;tr v-for&#x3D;&quot;item in search(searchName)&quot;&gt; &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt; &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt; &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt; &lt;td&gt; &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt; search 过滤方法中，使用 数组的 filter 方法进行过滤： search(name) &#123; return this.list.filter(x &#x3D;&gt; &#123; return x.name.indexOf(name) !&#x3D; -1; &#125;);&#125; 相关文章 vue.js 1.x 文档 vue.js 2.x 文档 String.prototype.padStart(maxLength, fillString) js 里面的键盘事件对应的键码 Vue.js双向绑定的实现原理","categories":[{"name":"es6语言","slug":"es6语言","permalink":"https://jxdw.github.io/categories/es6%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【感悟】如何学习一门编程语言","slug":"how_to_learn_a_language","date":"2020-03-25T11:17:59.000Z","updated":"2020-10-24T13:31:19.906Z","comments":true,"path":"2020/03/25/how_to_learn_a_language/","link":"","permalink":"https://jxdw.github.io/2020/03/25/how_to_learn_a_language/","excerpt":"","text":"","categories":[{"name":"es6语言","slug":"es6语言","permalink":"https://jxdw.github.io/categories/es6%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"2019年度的总结","slug":"jishuzongjie-2019","date":"2020-03-25T02:35:47.000Z","updated":"2020-10-24T13:13:08.845Z","comments":true,"path":"2020/03/25/jishuzongjie-2019/","link":"","permalink":"https://jxdw.github.io/2020/03/25/jishuzongjie-2019/","excerpt":"背景2019年一直在”奔跑”，鲜有时间真正沉下心来想事情。","text":"背景2019年一直在”奔跑”，鲜有时间真正沉下心来想事情。 直到这次的突发情况被困老家35天，才有时间来想过去一年、以及未来需要做的事情：1.物理层的东西是我们不可控的，只能依靠有想法的企业或者产业基金去投入。2.操作系统和网络类也不是我们能接触到的，只能累积经验。3.我们能做的就是编程语言和中间件做积累和突破。","categories":[{"name":"感悟","slug":"感悟","permalink":"https://jxdw.github.io/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"架构知识集合","slug":"架构知识集合","permalink":"https://jxdw.github.io/tags/%E6%9E%B6%E6%9E%84%E7%9F%A5%E8%AF%86%E9%9B%86%E5%90%88/"}]},{"title":"【中间件client系列】阿里云oss的go client使用","slug":"golang-upload-file-to-alicloud","date":"2019-12-20T12:17:59.000Z","updated":"2020-10-24T13:21:37.000Z","comments":true,"path":"2019/12/20/golang-upload-file-to-alicloud/","link":"","permalink":"https://jxdw.github.io/2019/12/20/golang-upload-file-to-alicloud/","excerpt":"golang写一些工具程序是真的方便。直接上源码：","text":"golang写一些工具程序是真的方便。直接上源码： package mainimport ( &quot;fmt&quot; uuid &quot;github.com&#x2F;satori&#x2F;go.uuid&quot; &quot;os&quot; &quot;github.com&#x2F;aliyun&#x2F;aliyun-oss-go-sdk&#x2F;oss&quot; &quot;time&quot;)func main() &#123; &#x2F;&#x2F; 创建OSSClient实例。 endPoint:&#x3D;&quot;http:&#x2F;&#x2F;oss-cn-hangzhou.aliyuncs.com&quot;; accessKeyID:&#x3D;&quot;申请的keyid&quot;; accessKeySecret:&#x3D;&quot;申请的keysecret&quot; client, err :&#x3D; oss.New(endPoint, accessKeyID, accessKeySecret) if err !&#x3D; nil &#123; fmt.Println(&quot;Error:&quot;, err) os.Exit(-1) &#125; &#x2F;&#x2F; 获取存储空间。 bucket, err :&#x3D; client.Bucket(&quot;申请的bucket名&quot;) if err !&#x3D; nil &#123; fmt.Println(&quot;Error:&quot;, err) os.Exit(-1) &#125; u2 :&#x3D; uuid.NewV4() &#x2F;&#x2F;上传本地文件。 err &#x3D; bucket.PutObjectFromFile(os.Args[1]+&quot;&#x2F;&quot;+ u2.String()+os.Args[2], os.Args[3]) fmt.Printf(&quot;%s&quot;, &quot;https:&#x2F;&#x2F;oss-cn-hangzhou.aliyuncs.com&#x2F;申请的bucket名&#x2F;&quot;+os.Args[1]+&quot;&#x2F;&quot;+ u2.String()+os.Args[2]); if err !&#x3D; nil &#123; fmt.Println(&quot;Error:&quot;, err) os.Exit(-1) &#125; fmt.Println(&quot;unix timestamp&quot;,time.Now().Unix())&#125;","categories":[{"name":"go知识体系","slug":"go知识体系","permalink":"https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【不定期更新】centos学习资源汇总","slug":"centos7_learn_resource","date":"2019-12-06T02:35:47.000Z","updated":"2020-10-24T13:44:36.278Z","comments":true,"path":"2019/12/06/centos7_learn_resource/","link":"","permalink":"https://jxdw.github.io/2019/12/06/centos7_learn_resource/","excerpt":"","text":"官方站点官方站点www.centos.org肯定是要知道的，所有第一手的release notes都是在这个网站的。 开源中国很多时候，没有那么多精力关注官方站点，开源中国oschina.net是不二之选。他们的编辑（或者爬虫），会去各个技术网站拉取信息。 菜鸟入门必选runoob很多国内的程序员在学习某们技术的时候，可能最先被引导去https://www.runoob.com/。其实，入门之后，就是需要搭梯子，去看看英文站点了。","categories":[{"name":"centos知识体系","slug":"centos知识体系","permalink":"https://jxdw.github.io/categories/centos%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【zipkin/jaeger使用系列】jaeger v1.15.1安装、配置","slug":"trace-jaeger-1150-install","date":"2019-12-01T15:00:00.000Z","updated":"2020-10-22T14:21:30.571Z","comments":true,"path":"2019/12/01/trace-jaeger-1150-install/","link":"","permalink":"https://jxdw.github.io/2019/12/01/trace-jaeger-1150-install/","excerpt":"背景jaeger又更新新版本了，虽然不是什么大版本，但是还是更新测试环境版本吧。","text":"背景jaeger又更新新版本了，虽然不是什么大版本，但是还是更新测试环境版本吧。 官方指南和常规方法官方文档：https://www.jaegertracing.io/docs/1.15/cli/看了官方文档，照着去测试环境操作，没有看到自己想看到的效果(jaeger_colletor的help效果如下).说好的elasticsearch、kafka配置呢？ help与环境变量耦合jaeger-collector使用elasticsearch为存储大胆的猜测，help命令和环境变量耦合了。输入： SPAN_STORAGE_TYPE&#x3D;elasticsearch .&#x2F;jaeger-collector --help 果然，输出的效果如下，真的是防不甚防啊。 2019-12-01 22:18:33 maxprocs: Leaving GOMAXPROCS&#x3D;4: CPU quota undefinedJaeger collector receives traces from Jaeger agents and runs them through a processing pipeline.Usage: jaeger-collector [flags] jaeger-collector [command]Available Commands: docs Generates documentation env Help about environment variables. help Help about any command version Print the version.Flags: --admin-http-port int The http port for the admin server, including health check, &#x2F;metrics, etc. (default 14269) --collector.grpc-port int The gRPC port for the collector service (default 14250) --collector.grpc.tls Enable TLS on the server --collector.grpc.tls.cert string Path to a TLS Certificate file, used to identify this server to clients --collector.grpc.tls.client-ca string Path to a TLS CA (Certification Authority) file used to verify certificates presented by clients (if unset, all clients are permitted) --collector.grpc.tls.client.ca string (deprecated) see --collector.grpc.tls.client-ca --collector.grpc.tls.key string Path to a TLS Private Key file, used to identify this server to clients --collector.http-port int The HTTP port for the collector service (default 14268) --collector.num-workers int The number of workers pulling items from the queue (default 50) --collector.port int The TChannel port for the collector service (default 14267) --collector.queue-size int The queue size of the collector (default 2000) --collector.zipkin.allowed-headers string Comma separated list of allowed headers for the Zipkin collector service, default content-type (default &quot;content-type&quot;) --collector.zipkin.allowed-origins string Comma separated list of allowed origins for the Zipkin collector service, default accepts all (default &quot;*&quot;) --collector.zipkin.http-port int The HTTP port for the Zipkin collector service e.g. 9411 --config-file string Configuration file in JSON, TOML, YAML, HCL, or Java properties formats (default none). See spf13&#x2F;viper for precedence. --downsampling.hashsalt string Salt used when hashing trace id for downsampling. --downsampling.ratio float Ratio of spans passed to storage after downsampling (between 0 and 1), e.g ratio &#x3D; 0.3 means we are keeping 30% of spans and dropping 70% of spans; ratio &#x3D; 1.0 disables downsampling. (default 1) --es-archive.bulk.actions int The number of requests that can be enqueued before the bulk processor decides to commit --es-archive.bulk.flush-interval duration A time.Duration after which bulk requests are committed, regardless of other thresholds. Set to zero to disable. By default, this is disabled. (default 0s) --es-archive.bulk.size int The number of bytes that the bulk requests can take up before the bulk processor decides to commit --es-archive.bulk.workers int The number of workers that are able to receive bulk requests and eventually commit them to Elasticsearch --es-archive.create-index-templates Create index templates at application startup. Set to false when templates are installed manually. --es-archive.enabled Enable extra storage --es-archive.index-prefix string Optional prefix of Jaeger indices. For example &quot;production&quot; creates &quot;production-jaeger-*&quot;. --es-archive.max-num-spans int The maximum number of spans to fetch at a time per query in Elasticsearch --es-archive.max-span-age duration The maximum lookback for spans in Elasticsearch (default 0s) --es-archive.num-replicas int The number of replicas per index in Elasticsearch --es-archive.num-shards int The number of shards per index in Elasticsearch --es-archive.password string The password required by Elasticsearch --es-archive.server-urls string The comma-separated list of Elasticsearch servers, must be full url i.e. http:&#x2F;&#x2F;localhost:9200 --es-archive.sniffer The sniffer config for Elasticsearch; client uses sniffing process to find all nodes automatically, disable if not required --es-archive.tags-as-fields.all (experimental) Store all span and process tags as object fields. If true .tags-as-fields.config-file is ignored. Binary tags are always stored as nested objects. --es-archive.tags-as-fields.config-file string (experimental) Optional path to a file containing tag keys which will be stored as object fields. Each key should be on a separate line. --es-archive.tags-as-fields.dot-replacement string (experimental) The character used to replace dots (&quot;.&quot;) in tag keys stored as object fields. --es-archive.timeout duration Timeout used for queries. A Timeout of zero means no timeout (default 0s) --es-archive.tls Enable TLS with client certificates. --es-archive.tls.ca string Path to TLS CA file --es-archive.tls.cert string Path to TLS certificate file --es-archive.tls.key string Path to TLS key file --es-archive.tls.skip-host-verify (insecure) Skip server&#39;s certificate chain and host name verification --es-archive.token-file string Path to a file containing bearer token. This flag also loads CA if it is specified. --es-archive.use-aliases (experimental) Use read and write aliases for indices. Use this option with Elasticsearch rollover API. It requires an external component to create aliases before startup and then performing its management. Note that es-archive.max-span-age is not taken into the account and has to be substituted by external component managing read alias. --es-archive.username string The username required by Elasticsearch. The basic authentication also loads CA if it is specified. --es-archive.version uint The major Elasticsearch version. If not specified, the value will be auto-detected from Elasticsearch. --es.bulk.actions int The number of requests that can be enqueued before the bulk processor decides to commit (default 1000) --es.bulk.flush-interval duration A time.Duration after which bulk requests are committed, regardless of other thresholds. Set to zero to disable. By default, this is disabled. (default 200ms) --es.bulk.size int The number of bytes that the bulk requests can take up before the bulk processor decides to commit (default 5000000) --es.bulk.workers int The number of workers that are able to receive bulk requests and eventually commit them to Elasticsearch (default 1) --es.create-index-templates Create index templates at application startup. Set to false when templates are installed manually. (default true) --es.index-prefix string Optional prefix of Jaeger indices. For example &quot;production&quot; creates &quot;production-jaeger-*&quot;. --es.max-num-spans int The maximum number of spans to fetch at a time per query in Elasticsearch (default 10000) --es.max-span-age duration The maximum lookback for spans in Elasticsearch (default 72h0m0s) --es.num-replicas int The number of replicas per index in Elasticsearch (default 1) --es.num-shards int The number of shards per index in Elasticsearch (default 5) --es.password string The password required by Elasticsearch --es.server-urls string The comma-separated list of Elasticsearch servers, must be full url i.e. http:&#x2F;&#x2F;localhost:9200 (default &quot;http:&#x2F;&#x2F;127.0.0.1:9200&quot;) --es.sniffer The sniffer config for Elasticsearch; client uses sniffing process to find all nodes automatically, disable if not required --es.tags-as-fields.all (experimental) Store all span and process tags as object fields. If true .tags-as-fields.config-file is ignored. Binary tags are always stored as nested objects. --es.tags-as-fields.config-file string (experimental) Optional path to a file containing tag keys which will be stored as object fields. Each key should be on a separate line. --es.tags-as-fields.dot-replacement string (experimental) The character used to replace dots (&quot;.&quot;) in tag keys stored as object fields. (default &quot;@&quot;) --es.timeout duration Timeout used for queries. A Timeout of zero means no timeout (default 0s) --es.tls Enable TLS with client certificates. --es.tls.ca string Path to TLS CA file --es.tls.cert string Path to TLS certificate file --es.tls.key string Path to TLS key file --es.tls.skip-host-verify (insecure) Skip server&#39;s certificate chain and host name verification --es.token-file string Path to a file containing bearer token. This flag also loads CA if it is specified. --es.use-aliases (experimental) Use read and write aliases for indices. Use this option with Elasticsearch rollover API. It requires an external component to create aliases before startup and then performing its management. Note that es.max-span-age is not taken into the account and has to be substituted by external component managing read alias. --es.username string The username required by Elasticsearch. The basic authentication also loads CA if it is specified. --es.version uint The major Elasticsearch version. If not specified, the value will be auto-detected from Elasticsearch. --health-check-http-port int (deprecated) see --admin-http-port -h, --help help for jaeger-collector --log-level string Minimal allowed log Level. For more levels see https:&#x2F;&#x2F;github.com&#x2F;uber-go&#x2F;zap (default &quot;info&quot;) --metrics-backend string Defines which metrics backend to use for metrics reporting: expvar, prometheus, none (default &quot;prometheus&quot;) --metrics-http-route string Defines the route of HTTP endpoint for metrics backends that support scraping (default &quot;&#x2F;metrics&quot;) --sampling.strategies-file string The path for the sampling strategies file in JSON format. See sampling documentation to see format of the file --span-storage.type string (deprecated) please use SPAN_STORAGE_TYPE environment variable. Run this binary with the &#39;env&#39; command for help.Use &quot;jaeger-collector [command] --help&quot; for more information about a command. jaeger-collector使用kafka为存储SPAN_STORAGE_TYPE&#x3D;kafka .&#x2F;jaeger-collector --help 输出如下： 2019&#x2F;12&#x2F;01 22:31:21 maxprocs: Leaving GOMAXPROCS&#x3D;4: CPU quota undefinedJaeger collector receives traces from Jaeger agents and runs them through a processing pipeline.Usage: jaeger-collector [flags] jaeger-collector [command]Available Commands: docs Generates documentation env Help about environment variables. help Help about any command version Print the version.Flags: --admin-http-port int The http port for the admin server, including health check, &#x2F;metrics, etc. (default 14269) --collector.grpc-port int The gRPC port for the collector service (default 14250) --collector.grpc.tls Enable TLS on the server --collector.grpc.tls.cert string Path to a TLS Certificate file, used to identify this server to clients --collector.grpc.tls.client-ca string Path to a TLS CA (Certification Authority) file used to verify certificates presented by clients (if unset, all clients are permitted) --collector.grpc.tls.client.ca string (deprecated) see --collector.grpc.tls.client-ca --collector.grpc.tls.key string Path to a TLS Private Key file, used to identify this server to clients --collector.http-port int The HTTP port for the collector service (default 14268) --collector.num-workers int The number of workers pulling items from the queue (default 50) --collector.port int The TChannel port for the collector service (default 14267) --collector.queue-size int The queue size of the collector (default 2000) --collector.zipkin.allowed-headers string Comma separated list of allowed headers for the Zipkin collector service, default content-type (default &quot;content-type&quot;) --collector.zipkin.allowed-origins string Comma separated list of allowed origins for the Zipkin collector service, default accepts all (default &quot;*&quot;) --collector.zipkin.http-port int The HTTP port for the Zipkin collector service e.g. 9411 --config-file string Configuration file in JSON, TOML, YAML, HCL, or Java properties formats (default none). See spf13&#x2F;viper for precedence. --downsampling.hashsalt string Salt used when hashing trace id for downsampling. --downsampling.ratio float Ratio of spans passed to storage after downsampling (between 0 and 1), e.g ratio &#x3D; 0.3 means we are keeping 30% of spans and dropping 70% of spans; ratio &#x3D; 1.0 disables downsampling. (default 1) --health-check-http-port int (deprecated) see --admin-http-port -h, --help help for jaeger-collector --kafka.producer.authentication string Authentication type used to authenticate with kafka cluster. e.g. none, kerberos, tls (default &quot;none&quot;) --kafka.producer.brokers string The comma-separated list of kafka brokers. i.e. &#39;127.0.0.1:9092,0.0.0:1234&#39; (default &quot;127.0.0.1:9092&quot;) --kafka.producer.compression string (experimental) Type of compression (none, gzip, snappy, lz4, zstd) to use on messages (default &quot;none&quot;) --kafka.producer.compression-level int (experimental) compression level to use on messages. gzip &#x3D; 1-9 (default &#x3D; 6), snappy &#x3D; none, lz4 &#x3D; 1-17 (default &#x3D; 9), zstd &#x3D; -131072 - 22 (default &#x3D; 3) --kafka.producer.encoding string Encoding of spans (&quot;json&quot; or &quot;protobuf&quot;) sent to kafka. (default &quot;protobuf&quot;) --kafka.producer.kerberos.config-file string Path to Kerberos configuration. i.e &#x2F;etc&#x2F;krb5.conf (default &quot;&#x2F;etc&#x2F;krb5.conf&quot;) --kafka.producer.kerberos.keytab-file string Path to keytab file. i.e &#x2F;etc&#x2F;security&#x2F;kafka.keytab (default &quot;&#x2F;etc&#x2F;security&#x2F;kafka.keytab&quot;) --kafka.producer.kerberos.password string The Kerberos password used for authenticate with KDC --kafka.producer.kerberos.realm string Kerberos realm --kafka.producer.kerberos.service-name string Kerberos service name (default &quot;kafka&quot;) --kafka.producer.kerberos.use-keytab Use of keytab instead of password, if this is true, keytab file will be used instead of password --kafka.producer.kerberos.username string The Kerberos username used for authenticate with KDC --kafka.producer.protocol-version string Kafka protocol version - must be supported by kafka server --kafka.producer.required-acks string (experimental) Required kafka broker acknowledgement. i.e. noack, local, all (default &quot;local&quot;) --kafka.producer.tls.ca string Path to the TLS CA for the Kafka connection --kafka.producer.tls.cert string Path to the TLS Certificate for the Kafka connection --kafka.producer.tls.key string Path to the TLS Key for the Kafka connection --kafka.producer.topic string The name of the kafka topic (default &quot;jaeger-spans&quot;) --log-level string Minimal allowed log Level. For more levels see https:&#x2F;&#x2F;github.com&#x2F;uber-go&#x2F;zap (default &quot;info&quot;) --metrics-backend string Defines which metrics backend to use for metrics reporting: expvar, prometheus, none (default &quot;prometheus&quot;) --metrics-http-route string Defines the route of HTTP endpoint for metrics backends that support scraping (default &quot;&#x2F;metrics&quot;) --sampling.strategies-file string The path for the sampling strategies file in JSON format. See sampling documentation to see format of the file --span-storage.type string (deprecated) please use SPAN_STORAGE_TYPE environment variable. Run this binary with the &#39;env&#39; command for help.Use &quot;jaeger-collector [command] --help&quot; for more information about a command.","categories":[{"name":"zipkin/jaeger知识体系","slug":"zipkin-jaeger知识体系","permalink":"https://jxdw.github.io/categories/zipkin-jaeger%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【prometheus使用系列】Prometheus监控rabbitmq3.8.0","slug":"prometheus_monitor_rabbitmq","date":"2019-10-07T04:46:48.000Z","updated":"2020-10-22T14:33:18.972Z","comments":true,"path":"2019/10/07/prometheus_monitor_rabbitmq/","link":"","permalink":"https://jxdw.github.io/2019/10/07/prometheus_monitor_rabbitmq/","excerpt":"背景官方介绍链接: https://www.rabbitmq.com/prometheus.html#overview-prometheus","text":"背景官方介绍链接: https://www.rabbitmq.com/prometheus.html#overview-prometheus As of 3.8.0, RabbitMQ ships with built-in Prometheus &amp; Grafana support.Support for Prometheus metric collector ships in the rabbitmq_prometheus plugin. The plugin exposes all RabbitMQ metrics on a dedicated TCP port, in Prometheus text format.These metrics provide a deep insights into the state of RabbitMQ nodes and the runtime. They make reasoning about the behaviour of RabbitMQ, applications that use it and various infrastructure elements a lot more informed. 版本依赖 安装过程安装erlangvim /etc/yum.repos.d/rabbitmq-erlang.repo [rabbitmq-erlang]name&#x3D;rabbitmq-erlangbaseurl&#x3D;https:&#x2F;&#x2F;dl.bintray.com&#x2F;rabbitmq-erlang&#x2F;rpm&#x2F;erlang&#x2F;22&#x2F;el&#x2F;7gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;dl.bintray.com&#x2F;rabbitmq&#x2F;Keys&#x2F;rabbitmq-release-signing-key.ascrepo_gpgcheck&#x3D;0enabled&#x3D;1 输入 命令，安装erlang。 rpm -import https:&#x2F;&#x2F;dl.bintray.com&#x2F;rabbitmq&#x2F;Keys&#x2F;rabbitmq-release-signing-key.ascyum install erlangyum install rabbitmq-server 安装rabbitmq-servervim /etc/yum.repos.d/rabbitmq.repo [bintray-rabbitmq-server]name&#x3D;bintray-rabbitmq-rpmbaseurl&#x3D;https:&#x2F;&#x2F;dl.bintray.com&#x2F;rabbitmq&#x2F;rpm&#x2F;rabbitmq-server&#x2F;v3.8.x&#x2F;el&#x2F;7&#x2F;gpgcheck&#x3D;0repo_gpgcheck&#x3D;0enabled&#x3D;1 修改配置，并授权vim /etc/rabbitmq/rabbitmq.conf #log.dir &#x3D; &#x2F;data&#x2F;rabbitmq&#x2F;loglog.file &#x3D; rabbit.loglog.file.rotation.date&#x3D;$D0log.file.rotation.size&#x3D;0 vim /etc/rabbitmq/rabbitmq-env.conf RABBITMQ_MNESIA_BASE&#x3D;&#x2F;data&#x2F;rabbitmq&#x2F;mnesiaRABBITMQ_LOG_BASE&#x3D;&#x2F;data&#x2F;rabbitmq&#x2F;log 授权给rabbitmq用户。 chown -R rabbitmq:rabbitmq &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mkdir -p data&#x2F;rabbitmq&#x2F;logmkdir -p &#x2F;data&#x2F;rabbitmq&#x2F;mnesiachown -R rabbitmq:rabbitmq &#x2F;data&#x2F;rabbitmq&#x2F; 启动服务，并启动插件1.启动rabbitmq-server服务 systemctl start rabbitmq-serversystemctl status rabbitmq-server 2.启动management插件。 rabbitmq-plugins enable rabbitmq_management 3.admin用户授权 rabbitmqctl add_user admin adminrabbitmqctl set_user_tags admin administratorrabbitmqctl set_permissions -p &#x2F; admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;rabbitmqctl status 4.查看插件输入命令: rabbitmq-plugins list 5.启动rabbitmq_prometheus插件 rabbitmq-plugins enable rabbitmq_prometheus 效果命令行输入rabbitmqctl status 浏览器访问","categories":[{"name":"prometheus知识体系","slug":"prometheus知识体系","permalink":"https://jxdw.github.io/categories/prometheus%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【zipkin/jaeger使用系列】jaeger v1.14.0安装、配置","slug":"trace-jaeger-1140-install","date":"2019-10-01T11:00:00.000Z","updated":"2020-10-22T14:21:25.715Z","comments":true,"path":"2019/10/01/trace-jaeger-1140-install/","link":"","permalink":"https://jxdw.github.io/2019/10/01/trace-jaeger-1140-install/","excerpt":"Jaeger项目背景和整体架构项目背景Jaeger项目是一套受到Dapper与OpenZipkin启发构建而成的分布式跟踪平台，由Uber公司最初以开源方式公布，随后加入了云原生计算基金会。该项目主要用于:监控并诊断基于微服务架构的分布式系统，具体涵盖： 分布式上下文传播 分布式事务监控 根本原因分析 服务依赖关系分析 性能/延迟优化","text":"Jaeger项目背景和整体架构项目背景Jaeger项目是一套受到Dapper与OpenZipkin启发构建而成的分布式跟踪平台，由Uber公司最初以开源方式公布，随后加入了云原生计算基金会。该项目主要用于:监控并诊断基于微服务架构的分布式系统，具体涵盖： 分布式上下文传播 分布式事务监控 根本原因分析 服务依赖关系分析 性能/延迟优化 整体架构 下载安装和配置安装前置条件 已经安装elasticsearch集群 安装好prometheus监控 从github下载二进制包下载地址： https:&#x2F;&#x2F;github.com&#x2F;jaegertracing&#x2F;jaeger&#x2F;releases&#x2F;download&#x2F;v1.14.0&#x2F;jaeger-1.14.0-linux-amd64.tar.gz 解压和配置编写collector启动脚本start-colloector.shexport SPAN_STORAGE_TYPE&#x3D;elasticsearchnohup .&#x2F;jaeger-collector --es.server-urls http:&#x2F;&#x2F;elasticsearch节点1的ip和端口&#x2F;,http:&#x2F;&#x2F;elasticsearch节点2的ip和端口&#x2F;,http&#x3D;:&#x2F;&#x2F;elasticsearch节点3的ip和端口&#x2F; --log-level&#x3D;debug &gt; collector.log 2&gt;&amp;1 &amp; 编写query启动脚本start-query.shexport SPAN_STORAGE_TYPE&#x3D;elasticsearchnohup .&#x2F;jaeger-query --span-storage.type&#x3D;elasticsearch --es.server-urls&#x3D;http:&#x2F;&#x2F;elasticsearch节点1的ip和端口&#x2F;,http:&#x2F;&#x2F;elasticsearch节点2的ip和端口&#x2F;,http&#x3D;:&#x2F;&#x2F;elasticsearch节点3的ip和端口&#x2F; &gt; query.log 2&gt;&amp;1 &amp; 编写agent启动脚本start-agent.shexport SPAN_STORAGE_TYPE&#x3D;elasticsearchnohup .&#x2F;jaeger-agent --collector.host-port&#x3D;192.168.172.9:14267 --discovery.min-peers&#x3D;1 --log-level&#x3D;debug &gt; agent.log 2&gt;&amp;1 &amp; 配置prometheus配置监听14269端口 启动效果","categories":[{"name":"zipkin/jaeger知识体系","slug":"zipkin-jaeger知识体系","permalink":"https://jxdw.github.io/categories/zipkin-jaeger%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【go底层实现系列】go语言运行时的工作过程","slug":"go_run_principle","date":"2019-08-21T10:41:34.000Z","updated":"2020-10-22T14:29:10.350Z","comments":true,"path":"2019/08/21/go_run_principle/","link":"","permalink":"https://jxdw.github.io/2019/08/21/go_run_principle/","excerpt":"上截图。","text":"上截图。","categories":[{"name":"go知识体系","slug":"go知识体系","permalink":"https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【redis使用系列】redis的go client写入百万个测试数据","slug":"redis_golang_client_insert_billion_data","date":"2019-08-21T09:02:30.000Z","updated":"2020-10-22T14:34:58.351Z","comments":true,"path":"2019/08/21/redis_golang_client_insert_billion_data/","link":"","permalink":"https://jxdw.github.io/2019/08/21/redis_golang_client_insert_billion_data/","excerpt":"背景最近为了做实验，需要redis中有百万的数据。于是乎，想到用redis的go client。","text":"背景最近为了做实验，需要redis中有百万的数据。于是乎，想到用redis的go client。 直接使用stringpackage mainimport ( &quot;fmt&quot; &quot;github.com&#x2F;go-redis&#x2F;redis&quot; &quot;strconv&quot; &quot;time&quot;)var redisClient *redis.Clientfunc init() &#123; var err error redisClient&#x3D;redis.NewClient(&amp;redis.Options&#123; Addr:&quot;192.168.172.14:6379&quot;, Password:&quot;&quot;, DB:0, PoolSize: 100, &#x2F;&#x2F;这个参数必须配置，否则会报超时的错 WriteTimeout: 300*time.Second, ReadTimeout: 300*time.Second, &#125;) pong,err:&#x3D;redisClient.Ping().Result() if err!&#x3D;nil &#123; panic(err) &#125; fmt.Println(&quot;connect result:&quot;,pong,err)&#125;func main()&#123; fmt.Println(time.Now().Format(&quot;2006-01-02 15:04:00.000&quot;)) pipe:&#x3D;redisClient.Pipeline() for i:&#x3D;0;i&lt;1000000;i++ &#123; pipe.Set(&quot;test_&quot;+strconv.Itoa(i),&quot;value_&quot;+strconv.Itoa(i),time.Hour) &#125; _, err :&#x3D; pipe.Exec() if err!&#x3D;nil &#123; fmt.Println(err) &#125; fmt.Println(time.Now().Format(&quot;2006-01-02 15:04:00.000&quot;)) fmt.Println(redisClient.Dbsize().Val())&#125; 用set集合import ( &quot;fmt&quot; &quot;github.com&#x2F;go-redis&#x2F;redis&quot; &quot;strconv&quot; &quot;time&quot;)var redisClient *redis.Clientfunc init() &#123; var err error redisClient&#x3D;redis.NewClient(&amp;redis.Options&#123; Addr:&quot;127.0.0.1:6379&quot;, Password:&quot;&quot;, DB:0, PoolSize: 100, WriteTimeout: 300*time.Second, ReadTimeout: 300*time.Second, &#125;) pong,err:&#x3D;redisClient.Ping().Result() if err!&#x3D;nil &#123; panic(err) &#125; fmt.Println(&quot;connect result:&quot;,pong,err) &#125;func main()&#123; fmt.Println(time.Now().Format(&quot;2006-01-02 15:04:00.000&quot;)) pipe:&#x3D;redisClient.Pipeline() for i:&#x3D;0;i&lt;2000000;i++ &#123; pipe.SAdd(&quot;test&quot;,&quot;value_&quot;+strconv.Itoa(i)) &#125; _, err :&#x3D; pipe.Exec() if err!&#x3D;nil &#123; fmt.Println(err) &#125; fmt.Println(time.Now().Format(&quot;2006-01-02 15:04:00.000&quot;)) fmt.Println(redisClient.SCard(&quot;test&quot;).Val())&#125;","categories":[{"name":"redis知识体系","slug":"redis知识体系","permalink":"https://jxdw.github.io/categories/redis%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【zipkin/jaeger使用系列】dubbo v2.7.3使用zipkin进行链路监控","slug":"apache_dubbo_zipkin_merge","date":"2019-08-11T03:02:34.000Z","updated":"2020-10-22T14:21:05.060Z","comments":true,"path":"2019/08/11/apache_dubbo_zipkin_merge/","link":"","permalink":"https://jxdw.github.io/2019/08/11/apache_dubbo_zipkin_merge/","excerpt":"本文背景因为:1.dubbo已经从apache毕业，而zipkin官方的brave-instrumentation-dubbo-rpc的5.6版本支持的dubbo版本是2.6.6版本、且对2.7.3版本支持不太友好(2.6.6这个版本是未毕业前的版本，不太喜欢），只能把brave-instrumentation-dubbo-rpc抠出来，用以支撑2.7.3版本。2.dubbo官方提供的例子还是xml配置版本，现在都9102年了，谁还用XML配置版本。因为以上两点，有了此文。","text":"本文背景因为:1.dubbo已经从apache毕业，而zipkin官方的brave-instrumentation-dubbo-rpc的5.6版本支持的dubbo版本是2.6.6版本、且对2.7.3版本支持不太友好(2.6.6这个版本是未毕业前的版本，不太喜欢），只能把brave-instrumentation-dubbo-rpc抠出来，用以支撑2.7.3版本。2.dubbo官方提供的例子还是xml配置版本，现在都9102年了，谁还用XML配置版本。因为以上两点，有了此文。 provider方工程代码添加pom依赖1.brave对dubbo的集成:brave-instrumentation-dubbo-rpc2.brave的spring bean支持:brave-spring-beans3.在SLF4J的MDC(Mapped Diagnostic Context) 中支持 traceId 和 spanId4.使用okhttp3作为 reporter:zipkin-sender-okhttp3当然，最好是同时添加bom，做好版本控制。 将TracingFilter扣出来进行改造将brave-instrumentation-dubbo-rpc的5.6.6版本的TracingFilter抠出来进行改造，即实现org.apache.dubbo.rpc.Fiter的invoke方法。brave-instrumentation-dubbo-rpc的5.6.6版本的TracingFilter实现的是com.alibaba.dubbo.rpc.Fiter。 package com.youxia.userinfo.config;import brave.Span;import brave.Tracer;import brave.Tracing;import brave.internal.Platform;import brave.propagation.Propagation;import brave.propagation.TraceContext;import brave.propagation.TraceContextOrSamplingFlags;import com.alibaba.dubbo.common.Constants;import com.alibaba.dubbo.remoting.exchange.ResponseCallback;import com.alibaba.dubbo.rpc.protocol.dubbo.FutureAdapter;import org.apache.dubbo.common.extension.Activate;import org.apache.dubbo.rpc.*;import org.apache.dubbo.rpc.support.RpcUtils;import java.net.InetSocketAddress;import java.util.Map;import java.util.concurrent.Future;@Activate(group &#x3D; &#123;Constants.PROVIDER, Constants.CONSUMER&#125;, value &#x3D; &quot;tracing&quot;)public final class TracingFilter implements Filter &#123; Tracer tracer; TraceContext.Extractor&lt;Map&lt;String, String&gt;&gt; extractor; TraceContext.Injector&lt;Map&lt;String, String&gt;&gt; injector; volatile boolean isInit &#x3D; false; public void setTracing(Tracing tracing) &#123; tracer &#x3D; tracing.tracer(); extractor &#x3D; tracing.propagation().extractor(GETTER); injector &#x3D; tracing.propagation().injector(SETTER); isInit &#x3D; true; &#125; static void parseRemoteAddress(RpcContext rpcContext, Span span) &#123; InetSocketAddress remoteAddress &#x3D; rpcContext.getRemoteAddress(); if (remoteAddress &#x3D;&#x3D; null) return; span.remoteIpAndPort(Platform.get().getHostString(remoteAddress), remoteAddress.getPort()); &#125; static void onError(Throwable error, Span span) &#123; span.error(error); if (error instanceof RpcException) &#123; span.tag(&quot;userinfo.error_code&quot;, Integer.toString(((RpcException) error).getCode())); &#125; &#125; static final Propagation.Getter&lt;Map&lt;String, String&gt;, String&gt; GETTER &#x3D; new Propagation.Getter&lt;Map&lt;String, String&gt;, String&gt;() &#123; @Override public String get(Map&lt;String, String&gt; carrier, String key) &#123; return carrier.get(key); &#125; @Override public String toString() &#123; return &quot;Map::get&quot;; &#125; &#125;; static final Propagation.Setter&lt;Map&lt;String, String&gt;, String&gt; SETTER &#x3D; new Propagation.Setter&lt;Map&lt;String, String&gt;, String&gt;() &#123; @Override public void put(Map&lt;String, String&gt; carrier, String key, String value) &#123; carrier.put(key, value); &#125; @Override public String toString() &#123; return &quot;Map::set&quot;; &#125; &#125;; @Override public Result invoke(Invoker&lt;?&gt; invoker, Invocation invocation) throws RpcException &#123; if (isInit &#x3D;&#x3D; false) return invoker.invoke(invocation); RpcContext rpcContext &#x3D; RpcContext.getContext(); Span.Kind kind &#x3D; rpcContext.isProviderSide() ? Span.Kind.SERVER : Span.Kind.CLIENT; final Span span; if (kind.equals(Span.Kind.CLIENT)) &#123; span &#x3D; tracer.nextSpan(); injector.inject(span.context(), invocation.getAttachments()); &#125; else &#123; TraceContextOrSamplingFlags extracted &#x3D; extractor.extract(invocation.getAttachments()); span &#x3D; extracted.context() !&#x3D; null ? tracer.joinSpan(extracted.context()) : tracer.nextSpan(extracted); &#125; if (!span.isNoop()) &#123; span.kind(kind); String service &#x3D; invoker.getInterface().getSimpleName(); String method &#x3D;RpcUtils.getMethodName(invocation); span.name(service + &quot;&#x2F;&quot; + method); parseRemoteAddress(rpcContext, span); span.start(); &#125; boolean isOneway &#x3D; false, deferFinish &#x3D; false; try (Tracer.SpanInScope scope &#x3D; tracer.withSpanInScope(span)) &#123; Result result &#x3D; invoker.invoke(invocation); if (result.hasException()) &#123; onError(result.getException(), span); &#125; isOneway &#x3D; RpcUtils.isOneway(invoker.getUrl(), invocation); Future&lt;Object&gt; future &#x3D; rpcContext.getFuture(); &#x2F;&#x2F; the case on async client invocation if (future instanceof FutureAdapter) &#123; deferFinish &#x3D; true; ((FutureAdapter) future).getFuture().setCallback(new TracingFilter.FinishSpanCallback(span)); &#125; return result; &#125; catch (Error | RuntimeException e) &#123; onError(e, span); throw e; &#125; finally &#123; if (isOneway) &#123; span.flush(); &#125; else if (!deferFinish) &#123; span.finish(); &#125; &#125; &#125; static final class FinishSpanCallback implements ResponseCallback &#123; final Span span; FinishSpanCallback(Span span) &#123; this.span &#x3D; span; &#125; @Override public void done(Object response) &#123; span.finish(); &#125; @Override public void caught(Throwable exception) &#123; onError(exception, span); span.finish(); &#125; &#125;&#125; 在resource目录增加/META-INF/dubbo/org.apache.dubbo.rpc.Filter文件org.apache.dubbo.rpc.Filter文件的内容如下: tracing&#x3D;com.youxia.userinfo.config.TracingFilter 配置zipkin客户端ZipkinConfig内容如下： package com.youxia.userinfo.config;import brave.context.slf4j.MDCScopeDecorator;import brave.propagation.CurrentTraceContext;import brave.spring.beans.CurrentTraceContextFactoryBean;import brave.spring.beans.TracingFactoryBean;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import zipkin2.codec.SpanBytesEncoder;import zipkin2.reporter.AsyncReporter;import zipkin2.reporter.Sender;import zipkin2.reporter.beans.AsyncReporterFactoryBean;import zipkin2.reporter.okhttp3.OkHttpSender;import java.util.Arrays;import java.util.concurrent.TimeUnit;@Configurationpublic class ZipkinConfig &#123; @Value(&quot;$&#123;zipkin.server.url&#125;&quot;) private String ZipkinServerUrl; @Bean(&quot;okHttpSender&quot;) public Sender okHttpSender() &#123; Sender sender&#x3D; OkHttpSender.create(ZipkinServerUrl); return sender; &#125; @Bean(&quot;reporter&quot;) public AsyncReporter getAsyncReporter()&#123; AsyncReporter asyncReporter&#x3D;AsyncReporter.builder(okHttpSender()).closeTimeout(50000, TimeUnit.MILLISECONDS).build(SpanBytesEncoder.JSON_V2); return asyncReporter; &#125; @Bean public AsyncReporterFactoryBean reporter(@Qualifier(&quot;okHttpSender&quot;)OkHttpSender sender)&#123; AsyncReporterFactoryBean asyncReporterFactoryBean &#x3D; new AsyncReporterFactoryBean(); asyncReporterFactoryBean.setSender(sender); asyncReporterFactoryBean.setCloseTimeout(3000); return asyncReporterFactoryBean; &#125; @Bean public TracingFactoryBean getTracingBean(@Qualifier(&quot;reporter&quot;) AsyncReporter reporter)&#123; TracingFactoryBean tracingFactoryBean&#x3D;new TracingFactoryBean(); tracingFactoryBean.setLocalServiceName(&quot;userinfo-service&quot;); CurrentTraceContextFactoryBean currentTraceContextFactoryBean &#x3D; new CurrentTraceContextFactoryBean(); CurrentTraceContext.ScopeDecorator scopeDecorator &#x3D; MDCScopeDecorator.create(); currentTraceContextFactoryBean.setScopeDecorators(Arrays.asList(scopeDecorator)); tracingFactoryBean.setCurrentTraceContext(currentTraceContextFactoryBean.getObject()); tracingFactoryBean.setSpanReporter(reporter); return tracingFactoryBean; &#125;&#125; dubbo注解文件添加filter业务实现类添加filter： package com.youxia.userinfo.service.impl;import com.alibaba.dubbo.config.annotation.Service;import com.youxia.userinfo.domain.User;import com.youxia.userinfo.service.UserService;@Service(filter &#x3D; &#123;&quot;tracing&quot;&#125;)public class UserServiceImpl implements UserService &#123; @Override public User saveUser(User user) &#123; user.setUserId(1); user.setUserName(user.getUserName()); System.out.println(user.toString()); return user; &#125;&#125; provider配置文件完整的application.properties: spring.application.name&#x3D;UserInfoServiceserver.address&#x3D;10.3.20.57server.port&#x3D;28081dubbo.registry.address&#x3D;redis:&#x2F;&#x2F;192.168.172.4:6380dubbo.protocol.name&#x3D;dubbodubbo.protocol.port&#x3D;28080dubbo.scan.base-packages&#x3D;com.youxia.userinfo.servicedubbo.application.qos.enable&#x3D;truezipkin.server.url&#x3D;http:&#x2F;&#x2F;192.168.172.6:9411&#x2F;api&#x2F;v2&#x2F;spans consumer工程代码业务逻辑处理类代码package com.youxia.service.user;import com.youxia.userinfo.domain.User;import com.youxia.userinfo.service.UserService;import org.apache.dubbo.config.annotation.Reference;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Service;@Servicepublic class UserServiceImpl &#123; private static final Logger LOGGER &#x3D; LoggerFactory.getLogger(UserServiceImpl.class); @Reference private UserService userService; public User sayHello(User user) &#123; return userService.saveUser(user); &#125;&#125; application.properties文件内容server.port&#x3D;28082server.address&#x3D;10.3.20.57dubbo.registry.protocol&#x3D;redisdubbo.registry.address&#x3D;redis:&#x2F;&#x2F;192.168.172.4:6380dubbo.application.name&#x3D;dubbo-demo-servicedubbo.scan.base-packages&#x3D;com.youxia.service.user 最终效果 完整代码地址https://github.com/youxia999/spring_boot_service/apache_dubbo_zipkin_project.git","categories":[{"name":"zipkin/jaeger知识体系","slug":"zipkin-jaeger知识体系","permalink":"https://jxdw.github.io/categories/zipkin-jaeger%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【go框架系列】viper框架的使用","slug":"golang_viper_config_use","date":"2019-07-01T16:08:05.000Z","updated":"2020-10-22T14:28:51.174Z","comments":true,"path":"2019/07/02/golang_viper_config_use/","link":"","permalink":"https://jxdw.github.io/2019/07/02/golang_viper_config_use/","excerpt":"viper，”毒蛇”(国外程序员取框架名，真奇怪),是配置读取框架中比较受欢迎的一个。","text":"viper，”毒蛇”(国外程序员取框架名，真奇怪),是配置读取框架中比较受欢迎的一个。 源代码package mainimport ( &quot;fmt&quot; &quot;github.com&#x2F;spf13&#x2F;pflag&quot; &quot;github.com&#x2F;spf13&#x2F;viper&quot;)func main() &#123; pflag.String(&quot;ip&quot;, &quot;127.0.0.1&quot;, &quot;Server running address&quot;) pflag.Int64(&quot;port&quot;, 8080, &quot;Server running port&quot;) pflag.Parse() viper.BindPFlags(pflag.CommandLine) fmt.Printf(&quot;ip :%s , port:%s&quot;, viper.GetString(&quot;ip&quot;), viper.GetString(&quot;port&quot;))&#125; 运行go run main.go --ip&#x3D;127.0.0.1 --port&#x3D;8090 运行结果如下 ip :127.0.0.1 , port:8080","categories":[{"name":"go知识体系","slug":"go知识体系","permalink":"https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【jira使用系列】【转载】jira7.13版本破解与restful api","slug":"cicd-jira-crack-restfulapi","date":"2019-06-30T11:00:00.000Z","updated":"2020-10-24T13:11:05.857Z","comments":true,"path":"2019/06/30/cicd-jira-crack-restfulapi/","link":"","permalink":"https://jxdw.github.io/2019/06/30/cicd-jira-crack-restfulapi/","excerpt":"jira的restful api官方参考文档https://docs.atlassian.com/software/jira/docs/api/REST/7.13.0/","text":"jira的restful api官方参考文档https://docs.atlassian.com/software/jira/docs/api/REST/7.13.0/ jira的其他参考资料https:&#x2F;&#x2F;blog.csdn.net&#x2F;five3&#x2F;article&#x2F;details&#x2F;7181655https:&#x2F;&#x2F;blog.csdn.net&#x2F;liumiaocn&#x2F;article&#x2F;details&#x2F;81301550 jira7.13破解","categories":[{"name":"工具软件","slug":"工具软件","permalink":"https://jxdw.github.io/categories/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【网络系列】【转载】TCP通信转UDP通信并加速","slug":"centos7-share-a-photo","date":"2019-06-01T13:46:40.000Z","updated":"2020-10-24T13:11:05.817Z","comments":true,"path":"2019/06/01/centos7-share-a-photo/","link":"","permalink":"https://jxdw.github.io/2019/06/01/centos7-share-a-photo/","excerpt":"","text":"附原文","categories":[{"name":"网络协议知识体系","slug":"网络协议知识体系","permalink":"https://jxdw.github.io/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【redis使用系列】redis5.0的sentinel模式体验","slug":"redis-sentinel-install","date":"2019-05-19T02:43:17.000Z","updated":"2020-10-22T14:34:45.554Z","comments":true,"path":"2019/05/19/redis-sentinel-install/","link":"","permalink":"https://jxdw.github.io/2019/05/19/redis-sentinel-install/","excerpt":"参考资料https:&#x2F;&#x2F;www.cnblogs.com&#x2F;ibethfy&#x2F;p&#x2F;9965902.htmlhttp:&#x2F;&#x2F;redisdoc.com&#x2F;topic&#x2F;sentinel.html","text":"参考资料https:&#x2F;&#x2F;www.cnblogs.com&#x2F;ibethfy&#x2F;p&#x2F;9965902.htmlhttp:&#x2F;&#x2F;redisdoc.com&#x2F;topic&#x2F;sentinel.html sentinel架构和整体规划sentinel模式的整体架构 部署整体规划redis-server节点一主两从(生产环境不要部署在一台机器上，从概率学的角度，风险很大): master: 192.168.172.4:7001slave1: 192.168.172.4:7002slave2: 192.168.172.4:7003 redis-sentinel节点三个节点(生产环境不要部署在一台机器上，从概率学的角度，风险很大): node1: 192.168.172.7:27001node2: 192.168.172.7:27002mode3: 192.168.172.7:27003 编译、安装、配置和启动编译安装编译安装参考单节点安装redis 5.0集群。 配置master节点配置cat /data/redis/conf/redis7001.conf #redis监听的本地IP地址bind 192.168.172.4#监听端口port 7001#开启后台运行，no表示运行在前台daemonize yes#pid文件，另一个节点改为7002pidfile &#x2F;var&#x2F;run&#x2F;redis_7001.pid#开启aof日志，每次写操作都会记录一条日志appendonly yesappendfilename &quot;appendonly7001.aof&quot;#开启集群，把注释去掉cluster-enabled nodbfilename dump7001.rdb slave1节点配置cat /data/redis/conf/redis7002.conf #redis监听的本地IP地址bind 192.168.172.4#监听端口port 7002#开启后台运行，no表示运行在前台daemonize yes#pid文件，另一个节点改为7002pidfile &#x2F;var&#x2F;run&#x2F;redis_7002.pid#开启aof日志，每次写操作都会记录一条日志appendonly yesappendfilename &quot;appendonly7002.aof&quot;#开启集群，把注释去掉cluster-enabled nodbfilename dump7002.rdbreplicaof 192.168.172.4 7001 slave2节点配置cat /data/redis/conf/redis7003.conf #redis监听的本地IP地址bind 192.168.172.4#监听端口port 7003#开启后台运行，no表示运行在前台daemonize yes#pid文件，另一个节点改为7002pidfile &#x2F;var&#x2F;run&#x2F;redis_7003.pid#开启aof日志，每次写操作都会记录一条日志appendonly yesappendfilename &quot;appendonly7003.aof&quot;#开启集群，把注释去掉cluster-enabled nodbfilename dump7003.rdbreplicaof 192.168.172.4 7001 sentinel服务节点1配置cat conf/sentinel27001.conf protected-mode noport 27001daemonize yespidfile &quot;&#x2F;data&#x2F;redis&#x2F;sentinel27001&#x2F;sentinel.pid&quot;logfile &quot;&#x2F;data&#x2F;redis&#x2F;sentinel27001&#x2F;27001.log&quot;dir &quot;&#x2F;data&#x2F;redis&#x2F;sentinel27001&quot;#sentinel auth-pass master7000 ibethfysentinel monitor master7001 192.168.172.4 7001 2# Generated by CONFIG REWRITEsentinel down-after-milliseconds master7001 5000sentinel failover-timeout master7001 30000 sentinel服务节点2配置cat conf/sentinel27002.conf protected-mode noport 27002daemonize yespidfile &quot;&#x2F;data&#x2F;redis&#x2F;sentinel27002&#x2F;sentinel.pid&quot;logfile &quot;&#x2F;data&#x2F;redis&#x2F;sentinel27002&#x2F;27002.log&quot;dir &quot;&#x2F;data&#x2F;redis&#x2F;sentinel27002&quot;#sentinel auth-pass master7000 ibethfysentinel monitor master7001 192.168.172.4 7001 2# Generated by CONFIG REWRITEsentinel down-after-milliseconds master7001 5000sentinel failover-timeout master7001 30000 sentinel服务节点3配置cat conf/sentinel27003.conf protected-mode noport 27003daemonize yespidfile &quot;&#x2F;data&#x2F;redis&#x2F;sentinel27003&#x2F;sentinel.pid&quot;logfile &quot;&#x2F;data&#x2F;redis&#x2F;sentinel27003&#x2F;27003.log&quot;dir &quot;&#x2F;data&#x2F;redis&#x2F;sentinel27003&quot;#sentinel auth-pass master7001 ibethfysentinel monitor master7001 192.168.172.4 7001 2# Generated by CONFIG REWRITEsentinel down-after-milliseconds master7001 5000sentinel failover-timeout master7001 30000 疑惑在没有相互配置地址的时候，三个sentinel节点之间怎么相互发现呢。从官网看下说明： 启动服务启动master节点： redis-server &#x2F;data&#x2F;redis&#x2F;conf&#x2F;redis7001.conf 启动slave1节点： redis-server &#x2F;data&#x2F;redis&#x2F;conf&#x2F;redis7002.conf 启动slave2节点： redis-server &#x2F;data&#x2F;redis&#x2F;conf&#x2F;redis7003.conf 启动sentinel节点1： redis-sentinel &#x2F;data&#x2F;redis&#x2F;conf&#x2F;sentinel27001.conf 启动sentinel节点2： redis-sentinel &#x2F;data&#x2F;redis&#x2F;conf&#x2F;sentinel27002.conf 启动sentinel节点3： redis-sentinel &#x2F;data&#x2F;redis&#x2F;conf&#x2F;sentinel27003.conf 体验redis主从情况 sentinel服务情况 sentinel之间怎么相互发现的","categories":[{"name":"redis知识体系","slug":"redis知识体系","permalink":"https://jxdw.github.io/categories/redis%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【sonarqube使用系列】sonarqubeV6.7.7的安装、使用、架构","slug":"tool-sonarqube-install","date":"2019-05-15T15:11:16.000Z","updated":"2020-10-27T11:24:53.787Z","comments":true,"path":"2019/05/15/tool-sonarqube-install/","link":"","permalink":"https://jxdw.github.io/2019/05/15/tool-sonarqube-install/","excerpt":"","text":"本文参考资料https:&#x2F;&#x2F;medium.com&#x2F;@jay_56373&#x2F;extending-sonarqube-static-analyzer-tool-capabilities-7b3d77a8b6a6https:&#x2F;&#x2F;docs.sonarqube.org&#x2F;6.7&#x2F;ArchitectureandIntegration.htmlhttps:&#x2F;&#x2F;docs.sonarqube.org&#x2F;6.7&#x2F;Documentation.html sonarqube安装使用过程从sonarqube官网下载zip包https:&#x2F;&#x2F;binaries.sonarsource.com&#x2F;Distribution&#x2F;sonarqube&#x2F;sonarqube-6.7.7.zip 解压看到有如下目录找到mysql服务器，创建对应的数据库修改sonar的配置因为sonar是wrapper启动，可以在conf目录下修改对应的配置。 从商城或者github下载插件包从日志中可以看出sonarqube的组成elasticsearch启动&#x2F;data&#x2F;sonar&#x2F;sonarqube&#x2F;elasticsearch&#x2F;bin&#x2F;elasticsearch -Epath.conf&#x3D;&#x2F;data&#x2F;sonar&#x2F;sonarqube&#x2F;temp&#x2F;conf&#x2F;es sonar web启动&#x2F;usr&#x2F;lib&#x2F;jdk1.8.0_161&#x2F;jre&#x2F;bin&#x2F;java -Djava.awt.headless&#x3D;true -Dfile.encoding&#x3D;UTF-8 -Djava.io.tmpdir&#x3D;&#x2F;data&#x2F;sonar&#x2F;sonarqube&#x2F;temp -Xmx512m -Xms128m -XX:+HeapDumpOnOutOfMemoryError -cp .&#x2F;lib&#x2F;common&#x2F;*:.&#x2F;lib&#x2F;server&#x2F;*:&#x2F;data&#x2F;sonar&#x2F;sonarqube&#x2F;lib&#x2F;jdbc&#x2F;mysql&#x2F;mysql-connector-java-5.1.42.jar org.sonar.server.app.WebServer &#x2F;data&#x2F;sonar&#x2F;sonarqube&#x2F;temp&#x2F;sq-process4130329630669150644properties sonar ce启动&#x2F;usr&#x2F;lib&#x2F;jdk1.8.0_161&#x2F;jre&#x2F;bin&#x2F;java -Djava.awt.headless&#x3D;true -Dfile.encoding&#x3D;UTF-8 -Djava.io.tmpdir&#x3D;&#x2F;data&#x2F;sonar&#x2F;sonarqube&#x2F;temp -Xmx512m -Xms128m -XX:+HeapDumpOnOutOfMemoryError -cp .&#x2F;lib&#x2F;common&#x2F;*:.&#x2F;lib&#x2F;server&#x2F;*:.&#x2F;lib&#x2F;ce&#x2F;*:&#x2F;data&#x2F;sonar&#x2F;sonarqube&#x2F;lib&#x2F;jdbc&#x2F;mysql&#x2F;mysql-connector-java-5.1.42.jar org.sonar.ce.app.CeServer &#x2F;data&#x2F;sonar&#x2F;sonarqube&#x2F;temp&#x2F;sq-process5887400279437001324properties sonarqube原理与架构sonarqube架构图","categories":[{"name":"工具软件","slug":"工具软件","permalink":"https://jxdw.github.io/categories/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【java框架系列】关于java学习的阶段性思考","slug":"spring-architecture","date":"2019-05-12T13:46:07.000Z","updated":"2020-10-22T14:25:00.795Z","comments":true,"path":"2019/05/12/spring-architecture/","link":"","permalink":"https://jxdw.github.io/2019/05/12/spring-architecture/","excerpt":"最近有学PHP的朋友想转到java（说公司要求用spring boot做项目），问我有没有什么捷径或者经验，给他一个换语言的学习指引。看得出来，他还没有搭建自己的知识体系，我就趁机给他灌输一个观念：先要有完整的知识体系结构（或者通用技术架构），然后编程语言只是工具，是可以被替换的。当然，这不是我的原创，是一些前辈告诉我的（我相信很多高手都会觉得:语言都是工具,架构模式才是关键。用java写的，用go语言、Python也可以，只是效果、代码管理、维护性的差异）。","text":"最近有学PHP的朋友想转到java（说公司要求用spring boot做项目），问我有没有什么捷径或者经验，给他一个换语言的学习指引。看得出来，他还没有搭建自己的知识体系，我就趁机给他灌输一个观念：先要有完整的知识体系结构（或者通用技术架构），然后编程语言只是工具，是可以被替换的。当然，这不是我的原创，是一些前辈告诉我的（我相信很多高手都会觉得:语言都是工具,架构模式才是关键。用java写的，用go语言、Python也可以，只是效果、代码管理、维护性的差异）。 当然，计算机是讲究动手的学科，不能空谈理论，得输出点东西才可信，然后基于本人最近的一些思考（看了几张别人spring全家桶教程的ppt），画了一张整体架构图给朋友。并且告知：java是可以被换成go、python语言实现的，就看技术决策者熟悉哪门语言、以及要实现什么样的系统（其实是废话：单讲语言生态，目前java确实是生态最好的语言，尤其是在spring的助攻下。呵呵）","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【centos使用系列】RHEL8发布，坐等centos8","slug":"centos8-base-rhel8-release","date":"2019-05-12T05:24:41.000Z","updated":"2020-10-24T13:11:05.843Z","comments":true,"path":"2019/05/12/centos8-base-rhel8-release/","link":"","permalink":"https://jxdw.github.io/2019/05/12/centos8-base-rhel8-release/","excerpt":"背景和参考资料参考资料https:&#x2F;&#x2F;access.redhat.com&#x2F;documentation&#x2F;en-us&#x2F;red_hat_enterprise_linux&#x2F;8&#x2F;html-single&#x2F;8.0_release_notes&#x2F;indexhttps:&#x2F;&#x2F;access.redhat.com&#x2F;documentation&#x2F;zh-cn&#x2F;red_hat_enterprise_linux&#x2F;8&#x2F;html-single&#x2F;8.0_release_notes&#x2F;index(机器翻译版)https:&#x2F;&#x2F;blog.51cto.com&#x2F;vanehsuan&#x2F;2392207https:&#x2F;&#x2F;www.itzgeek.com&#x2F;how-tos&#x2F;linux&#x2F;centos-how-tos&#x2F;how-to-install-mysql-8-0-on-rhel-8.html","text":"背景和参考资料参考资料https:&#x2F;&#x2F;access.redhat.com&#x2F;documentation&#x2F;en-us&#x2F;red_hat_enterprise_linux&#x2F;8&#x2F;html-single&#x2F;8.0_release_notes&#x2F;indexhttps:&#x2F;&#x2F;access.redhat.com&#x2F;documentation&#x2F;zh-cn&#x2F;red_hat_enterprise_linux&#x2F;8&#x2F;html-single&#x2F;8.0_release_notes&#x2F;index(机器翻译版)https:&#x2F;&#x2F;blog.51cto.com&#x2F;vanehsuan&#x2F;2392207https:&#x2F;&#x2F;www.itzgeek.com&#x2F;how-tos&#x2F;linux&#x2F;centos-how-tos&#x2F;how-to-install-mysql-8-0-on-rhel-8.html 背景正文上面的参考资料所说，5月7号，红帽子公司发布了REDHAT ENTERPRISE LINUX 8(简称RHEL8)。于是乎，想先体验一把新特性和原有功能，为后面的centos8做技术储备。 rhel8的release note 虚拟机安装RHEL8下载RHEL8镜像注册一个redhat的账号，从官网下载RHEL8 虚拟机安装RHEL8参考https://blog.51cto.com/vanehsuan/2392207做下版本的选择，磁盘的选择，整个过程还是比较顺畅。 #安装后的初步体验 内核版本采用的之前beta版本用的4.18版本（内核社区好像没有提供本版本的长期支持版） 注册账号订阅仓库subscription-manager register --username 红帽子账号 --password 密码 --auto-attachsubscription-manager repos --list-enabled 安装mysql8.0简单安装 dnf clean packagesyum -y install @mysqlsystemctl start mysqld 查看日志 2019-05-12T12:45:20.890020Z 0 [System] [MY-013169] [Server] &#x2F;usr&#x2F;libexec&#x2F;mysqld (mysqld 8.0.13) initializing of server in progress as process 401132019-05-12T12:45:23.643786Z 5 [Warning] [MY-010453] [Server] root@localhost is created with an empty password ! Please consider switching off the --initialize-insecure option.2019-05-12T12:45:26.199807Z 0 [System] [MY-013170] [Server] &#x2F;usr&#x2F;libexec&#x2F;mysqld (mysqld 8.0.13) initializing of server has completed2019-05-12T12:45:28.821217Z 0 [System] [MY-010116] [Server] &#x2F;usr&#x2F;libexec&#x2F;mysqld (mysqld 8.0.13) starting as process 401592019-05-12T12:45:29.877569Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.2019-05-12T12:45:29.987015Z 0 [System] [MY-010931] [Server] &#x2F;usr&#x2F;libexec&#x2F;mysqld: ready for connections. Version: &#39;8.0.13&#39; socket: &#39;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock&#39; port: 3306 Source distribution.2019-05-12T12:45:30.206112Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Socket: &#39;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysqlx.sock&#39; bind-address: &#39;::&#39; port: 33060 知道mysql8的root账号密码为空，所以需要登录后，初始化密码。 alter user &#39;root&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;123456&#39;;update user set host&#x3D;&#39;%&#39; where user&#x3D;&#39;root&#39;;flush privileges; 初步结论 软件安装这块，除了增加appstream的概念，已经源的控制，和centos7没有太大的差别。","categories":[{"name":"centos知识体系","slug":"centos知识体系","permalink":"https://jxdw.github.io/categories/centos%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【redis使用系列】单节点安装redis 5.0集群","slug":"redis-5-0-install","date":"2019-04-19T08:46:12.000Z","updated":"2020-10-22T14:34:13.292Z","comments":true,"path":"2019/04/19/redis-5-0-install/","link":"","permalink":"https://jxdw.github.io/2019/04/19/redis-5-0-install/","excerpt":"参考资料主要参考资料https://blog.51cto.com/andyxu/2319767https://www.oschina.net/news/100931/redis-5-0-released","text":"参考资料主要参考资料https://blog.51cto.com/andyxu/2319767https://www.oschina.net/news/100931/redis-5-0-released redis 5.0主要的特性最吸引我的可能就是第二点。要知道基于ruby的集群方案，真的比较让人酸爽。 安装过程下载、解压、编译yum -y install make gcc gcc-c++ wgetwget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.0.tar.gztar zxvf redis-5.0.0.tar.gzcd redis-5.0.0&#x2F;make &amp;&amp; make install PREFIX&#x3D;&#x2F;data&#x2F;redisecho &quot;export PATH&#x3D;$PATH:&#x2F;data&#x2F;redis&#x2F;bin&quot; &gt;&gt; &#x2F;etc&#x2F;profilesource &#x2F;etc&#x2F;profile redis客户端命令 redis集群配置配置文件7001端口#redis监听的本地IP地址bind 192.168.128.54#监听端口port 7001#开启后台运行，no表示运行在前台daemonize yes#pid文件，另一个节点改为7002pidfile &#x2F;var&#x2F;run&#x2F;redis_7001.pid#开启aof日志，每次写操作都会记录一条日志appendonly yesappendfilename &quot;appendonly7001.aof&quot;#开启集群，把注释去掉cluster-enabled yesdbfilename dump7001.rdb#集群的配置文件，首次启动会自动创建cluster-config-file nodes-7001.conf #集群节点连接超时时间，15秒cluster-node-timeout 15000 7002端口#redis监听的本地IP地址bind 192.168.128.54#监听端口port 7002#开启后台运行，no表示运行在前台daemonize yes#pid文件pidfile &#x2F;var&#x2F;run&#x2F;redis_7002.pid#开启aof日志，每次写操作都会记录一条日志appendonly yesappendfilename &quot;appendonly7002.aof&quot;dbfilename dump7002.rdb#开启集群，把注释#去掉cluster-enabled yes#集群的配置文件，首次启动会自动创建cluster-config-file nodes-7002.conf#集群节点连接超时时间，15秒cluster-node-timeout 15000 7003端口#redis监听的本地IP地址bind 192.168.128.54#监听端口port 7003#开启后台运行，no表示运行在前台daemonize yes#pid文件，另一个节点改为7002pidfile &#x2F;var&#x2F;run&#x2F;redis_7003.pid#开启aof日志，每次写操作都会记录一条日志appendonly yesappendfilename &quot;appendonly7003.aof&quot;dbfilename dump7003.rdb#开启集群，把注释#去掉cluster-enabled yes#集群的配置文件，首次启动会自动创建cluster-config-file nodes-7003.conf#集群节点连接超时时间，15秒cluster-node-timeout 15000 7004端口#redis监听的本地IP地址bind 192.168.128.54#监听端口port 7004#开启后台运行，no表示运行在前台daemonize yes#pid文件，另一个节点改为7002pidfile &#x2F;var&#x2F;run&#x2F;redis_7004.pid#开启aof日志，每次写操作都会记录一条日志appendonly yesappendfilename &quot;appendonly7004.aof&quot;dbfilename dump7004.rdb#开启集群，把注释#去掉cluster-enabled yes#集群的配置文件，首次启动会自动创建cluster-config-file nodes-7004.conf#集群节点连接超时时间，15秒cluster-node-timeout 15000 7005端口#redis监听的本地IP地址bind 192.168.128.54#监听端口port 7005#开启后台运行，no表示运行在前台daemonize yes#pid文件pidfile &#x2F;var&#x2F;run&#x2F;redis_7005.pid#开启aof日志，每次写操作都会记录一条日志appendonly yesappendfilename &quot;appendonly7005.aof&quot;dbfilename dump7005.rdb#开启集群，把注释#去掉cluster-enabled yes#集群的配置文件，首次启动会自动创建cluster-config-file nodes-7005.conf#集群节点连接超时时间，15秒cluster-node-timeout 15000 7006端口#redis监听的本地IP地址bind 192.168.128.54#监听端口port 7006#开启后台运行,no表示运行在前台daemonize yes#pid文件pidfile &#x2F;var&#x2F;run&#x2F;redis_7006.pid#开启aof日志，每次写操作都会记录一条日志appendonly yesappendfilename &quot;appendonly7006.aof&quot;dbfilename dump7006.rdb#开启集群，把注释去掉cluster-enabled yes #集群的配置文件，首次启动会自动创建cluster-config-file nodes-7006.conf#集群节点连接超时时间，15cluster-node-timeout 15000 节点启动脚本redis-all.sh#!&#x2F;bin&#x2F;bash&#x2F;data&#x2F;redis&#x2F;bin&#x2F;redis-server &#x2F;data&#x2F;redis&#x2F;conf&#x2F;redis7001.conf&#x2F;data&#x2F;redis&#x2F;bin&#x2F;redis-server &#x2F;data&#x2F;redis&#x2F;conf&#x2F;redis7002.conf&#x2F;data&#x2F;redis&#x2F;bin&#x2F;redis-server &#x2F;data&#x2F;redis&#x2F;conf&#x2F;redis7003.conf&#x2F;data&#x2F;redis&#x2F;bin&#x2F;redis-server &#x2F;data&#x2F;redis&#x2F;conf&#x2F;redis7004.conf&#x2F;data&#x2F;redis&#x2F;bin&#x2F;redis-server &#x2F;data&#x2F;redis&#x2F;conf&#x2F;redis7005.conf&#x2F;data&#x2F;redis&#x2F;bin&#x2F;redis-server &#x2F;data&#x2F;redis&#x2F;conf&#x2F;redis7006.conf 集群创建脚本redis-cluster.sh#!&#x2F;bin&#x2F;bash&#x2F;data&#x2F;redis&#x2F;bin&#x2F;redis-cli --cluster create 192.168.128.54:7001 192.168.128.54:7002 192.168.128.54:7003 192.168.128.54:7004 192.168.128.54:7005 192.168.128.54:7006 --cluster-replicas 1 启动后的文件信息 体验redis集群","categories":[{"name":"redis知识体系","slug":"redis知识体系","permalink":"https://jxdw.github.io/categories/redis%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【mysql使用系列】percona-xtrabackup 8.0安装和初步使用","slug":"percona-xtrabackup-for-mysql-8-0","date":"2019-04-13T04:58:32.000Z","updated":"2020-10-22T14:36:22.468Z","comments":true,"path":"2019/04/13/percona-xtrabackup-for-mysql-8-0/","link":"","permalink":"https://jxdw.github.io/2019/04/13/percona-xtrabackup-for-mysql-8-0/","excerpt":"参考参考资料https:&#x2F;&#x2F;blog.csdn.net&#x2F;wfs1994&#x2F;article&#x2F;details&#x2F;80396604","text":"参考参考资料https:&#x2F;&#x2F;blog.csdn.net&#x2F;wfs1994&#x2F;article&#x2F;details&#x2F;80396604 官方文档https:&#x2F;&#x2F;www.percona.com&#x2F;doc&#x2F;percona-xtrabackup&#x2F;8.0&#x2F;index.htmlhttps:&#x2F;&#x2F;www.percona.com&#x2F;doc&#x2F;percona-xtrabackup&#x2F;8.0&#x2F;installation.html#installing-percona-xtrabackup-from-repositorieshttps:&#x2F;&#x2F;www.percona.com&#x2F;doc&#x2F;percona-xtrabackup&#x2F;8.0&#x2F;installation&#x2F;yum_repo.htmlhttps:&#x2F;&#x2F;www.percona.com&#x2F;doc&#x2F;percona-xtrabackup&#x2F;8.0&#x2F;using_xtrabackup&#x2F;privileges.htmlhttps:&#x2F;&#x2F;www.percona.com&#x2F;doc&#x2F;percona-xtrabackup&#x2F;8.0&#x2F;backup_scenarios&#x2F;full_backup.html xtrabackup简介与安装xtrabackup简介 安装wget https:&#x2F;&#x2F;www.percona.com&#x2F;downloads&#x2F;XtraBackup&#x2F;Percona-XtraBackup-8.0.4&#x2F;binary&#x2F;redhat&#x2F;7&#x2F;x86_64&#x2F;percona-xtrabackup-80-8.0.4-1.el7.x86_64.rpmyum localinstall percona-xtrabackup-80-8.0.4-1.el7.x86_64.rpm 授权和备份操作授权操作CREATE USER &#39;backupuser&#39;@&#39;%&#39; IDENTIFIED with mysql_native_password BY &#39;123456&#39;;GRANT BACKUP_ADMIN, PROCESS, RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO &#39;backupuser&#39;@&#39;%&#39;;GRANT SELECT ON performance_schema.log_status TO &#39;backupuser&#39;@&#39;%&#39;;FLUSH PRIVILEGES; 备份操作xtrabackup --host&#x3D;192.168.128.54 --port&#x3D;3306 --user&#x3D;backupuser --password&#x3D;123456 --backup --target-dir&#x3D;&#x2F;data&#x2F;backup&#x2F;percona8.0 查看备份结果 适用场景percona xtrabackup 8.0适合mysql&#x2F;percona 8.0版本，如果是mysql 5.6&#x2F;5.7版本，请参考官方的xtrabackup 2.4版本。 未完待续。","categories":[{"name":"mysql知识体系","slug":"mysql知识体系","permalink":"https://jxdw.github.io/categories/mysql%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【centos使用系列】centos7内核升级","slug":"centos7-kernel-upgrade","date":"2019-04-01T13:12:52.000Z","updated":"2020-10-24T13:11:05.778Z","comments":true,"path":"2019/04/01/centos7-kernel-upgrade/","link":"","permalink":"https://jxdw.github.io/2019/04/01/centos7-kernel-upgrade/","excerpt":"参考资料https:&#x2F;&#x2F;linux.cn&#x2F;article-8310-1.html 背景基于以下三点，让我有种升级内核的冲动：1.docker容器近期暴露的漏洞，问了”专家”说是都是内核的问题。2.centos7还是用的3.10，centos8（RHEL用的是4.18版本）发布时间表还不知道。3.linux的内核稳定版本已经到5.0.X。","text":"参考资料https:&#x2F;&#x2F;linux.cn&#x2F;article-8310-1.html 背景基于以下三点，让我有种升级内核的冲动：1.docker容器近期暴露的漏洞，问了”专家”说是都是内核的问题。2.centos7还是用的3.10，centos8（RHEL用的是4.18版本）发布时间表还不知道。3.linux的内核稳定版本已经到5.0.X。 升级步骤检查已安装版本修改下hostname先。 升级内核然后reboot。 结果 建议在新操作系统安装好以后，就先yum update、然后升级内核。再安装其他的数据库、中间件、(java、go、python、ruby、erlang)语言runtime。","categories":[{"name":"centos知识体系","slug":"centos知识体系","permalink":"https://jxdw.github.io/categories/centos%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【centos使用系列】rhel8 beta尝鲜","slug":"rhel8-beta-experience","date":"2019-03-31T14:54:07.000Z","updated":"2020-10-24T13:11:06.137Z","comments":true,"path":"2019/03/31/rhel8-beta-experience/","link":"","permalink":"https://jxdw.github.io/2019/03/31/rhel8-beta-experience/","excerpt":"参考资料https:&#x2F;&#x2F;zocodev.com&#x2F;red-hat-enterprise-linux-8-beta.htmlhttps:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;56892392http:&#x2F;&#x2F;www.sohu.com&#x2F;a&#x2F;294442178_194621https:&#x2F;&#x2F;ywnz.com&#x2F;linuxjc&#x2F;3705.htmlhttps:&#x2F;&#x2F;www.kclouder.cn&#x2F;rhel8-beta-experience&#x2F;","text":"参考资料https:&#x2F;&#x2F;zocodev.com&#x2F;red-hat-enterprise-linux-8-beta.htmlhttps:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;56892392http:&#x2F;&#x2F;www.sohu.com&#x2F;a&#x2F;294442178_194621https:&#x2F;&#x2F;ywnz.com&#x2F;linuxjc&#x2F;3705.htmlhttps:&#x2F;&#x2F;www.kclouder.cn&#x2F;rhel8-beta-experience&#x2F; 安装过程安装过程概述 下载iso文件，准备安装 安装VMware 15.0 pro，并修改配置文件 初步安装完成后体验，发现网络没有配置，要配置网络 初步安装完成后体验，发现没有界面，要安装Workstation，而要安装Workstation，就需要先有注册帐号 下载iso文件，准备安装本人从 https://access.cdn.redhat.com/content/origin/files/sha256/06/06bec9e7de3ebfcdb879804be8c452b69ba3e046daedac3731e1ccd169cfd316/rhel-8.0-beta-1-x86_64-dvd.iso?_auth_=1556668800_f465a37d228dfb88281c7cf7e9f8446f 下载的iso文件。 安装VMware15.0，并修改配置文件安装VMware15.0，并加载iso文件，安装rhel8beta。会发现找不到本地磁盘，需要参考 https://ywnz.com/linuxjc/3705.html 修改配置文件，并继续安装。 根据虚拟机的nat配置，配置网络安装完成后，进入虚拟机体验，会发现ifconfig用不了，只能用ip a。而网卡下没有ip。也就是在vmware之外，无法连接rhel服务，进行操作。这时候只能参考知乎专栏进行相应的操作。ip段可以看vmware的nat网络设置。 nmcli c add type ethernet con-name ethX ifname ethX ipv4.addr 192.168.197.128 ipv4.gateway 192.168.197.1 ipv4.method manualnmcli c up ethX 这时候，可以用mobaxterm等终端进行远程操作了。 下载yum源看了/etc/yum.repo.d/下面，基本就是空的，所以得想办法找一个yum源。谷歌一番，发现，只能用redhat官方的yum源。只能参考 http://www.sohu.com/a/294442178_194621 去清华大学的镜像服务器上下载并上传到对应的目录。（注意不需要修改里面的内容） 执行一个yum命令，就会提示订阅 执行命令订阅查找一番，只能去redhat官网注册帐号，并订阅。 subscription-manager register --username 帐号 --password &#39;密码&#39; --auto-attach 安装图形界面yum groupinstall Workstationsystemctl set-default graphical#默认启用 体验感受 yum被替换成dnf ifconfig被替换成了nmcli，有点小难受","categories":[{"name":"centos知识体系","slug":"centos知识体系","permalink":"https://jxdw.github.io/categories/centos%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【Go框架系列】gin源码分析第一版","slug":"golang-gin-source-code-v1","date":"2019-03-24T04:48:30.000Z","updated":"2020-10-22T14:28:12.770Z","comments":true,"path":"2019/03/24/golang-gin-source-code-v1/","link":"","permalink":"https://jxdw.github.io/2019/03/24/golang-gin-source-code-v1/","excerpt":"","text":"demo源码package mainimport ( &quot;encoding&#x2F;json&quot; &quot;fmt&quot; &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;)type User struct &#123; Id int Name string Age int&#125;func main() &#123; defaultServer:&#x3D;gin.New(); defaultServer.RouterGroup.GET(&quot;&#x2F;&quot;,defaultHandeler) v1 :&#x3D; defaultServer.Group(&quot;&#x2F;v1&quot;) v1.GET(&quot;&#x2F;ping&quot;,v1pingHandeler) defaultServer.Run(&quot;:8083&quot;)&#125;func defaultHandeler(ctx *gin.Context) &#123; ctx.JSON(200,gin.H&#123; &quot;status&quot;:200, &quot;success&quot;:true, &quot;data&quot;:&quot;&#123;&#125;&quot;, &#125;)&#125;func v1pingHandeler(context *gin.Context) &#123; user:&#x3D;User&#123;1,&quot;golang&quot;,20&#125; data,_:&#x3D;json.Marshal(user) fmt.Println(user,data) context.JSON(200,gin.H&#123; &quot;status&quot;:200, &quot;success&quot;:true, &quot;data&quot;:string(data), &#125;) &#x2F;&#x2F;context.Redirect(http.StatusMovedPermanently,&quot;https:&#x2F;&#x2F;github.com&#x2F;gin-goinc&#x2F;gin&quot;)&#125; 时序图","categories":[{"name":"go知识体系","slug":"go知识体系","permalink":"https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【mysql知识体系】Percona Server8.0安装和初步使用","slug":"percona-server-for-mysql-8-0-install","date":"2019-03-04T02:43:32.000Z","updated":"2020-10-22T14:36:15.424Z","comments":true,"path":"2019/03/04/percona-server-for-mysql-8-0-install/","link":"","permalink":"https://jxdw.github.io/2019/03/04/percona-server-for-mysql-8-0-install/","excerpt":"本文参考资料https:&#x2F;&#x2F;blog.csdn.net&#x2F;vkingnew&#x2F;article&#x2F;details&#x2F;85220187https:&#x2F;&#x2F;www.mayi888.com&#x2F;archives&#x2F;59253https:&#x2F;&#x2F;www.percona.com&#x2F;doc&#x2F;percona-server&#x2F;LATEST&#x2F;installation&#x2F;yum_repo.htmlhttps:&#x2F;&#x2F;blog.csdn.net&#x2F;myNameIssls&#x2F;article&#x2F;details&#x2F;84031426","text":"本文参考资料https:&#x2F;&#x2F;blog.csdn.net&#x2F;vkingnew&#x2F;article&#x2F;details&#x2F;85220187https:&#x2F;&#x2F;www.mayi888.com&#x2F;archives&#x2F;59253https:&#x2F;&#x2F;www.percona.com&#x2F;doc&#x2F;percona-server&#x2F;LATEST&#x2F;installation&#x2F;yum_repo.htmlhttps:&#x2F;&#x2F;blog.csdn.net&#x2F;myNameIssls&#x2F;article&#x2F;details&#x2F;84031426 安装过程参考 https://jxdw.github.io/2017/06/21/mysql5-7-install/ ，安装软件。 安装需要的软件wget https:&#x2F;&#x2F;repo.percona.com&#x2F;release&#x2F;7Server&#x2F;RPMS&#x2F;x86_64&#x2F;jemalloc-3.6.0-1.el7.x86_64.rpmrpm -ivh jemalloc-3.6.0-1.el7.x86_64.rpm 删除废弃的软件包rpm -e --nodeps mariadb-libs 按照需要的软件：yum -y install net-tools libaio perl openssl openssl-devel perl-Data-Dumper perl-JSONwget https:&#x2F;&#x2F;www.percona.com&#x2F;downloads&#x2F;Percona-Server-8.0&#x2F;Percona-Server-8.0.13-3&#x2F;binary&#x2F;redhat&#x2F;7&#x2F;x86_64&#x2F;Percona-Server-8.0.13-3-ra920dd6-el7-x86_64-bundle.tar 解压，查看软件包列表：ll percona*.rpm 安装过程：rpm -ivh percona-*.rpm 创建目录mkdir -p &#x2F;data&#x2F;mysql&#x2F;&#123;log,binlogs,run,data&#125;touch &#x2F;data&#x2F;mysql&#x2F;run&#x2F;mysqld.pidchown -R mysql:mysql &#x2F;data&#x2F;mysql 初始化mysqld --initialize-insecure --user&#x3D;mysql --basedir&#x3D;&#x2F;data&#x2F;mysql --datadir&#x3D;&#x2F;data&#x2F;mysql&#x2F;data 配置文件/etc/my.cnf# Percona Server template configuration## For advice on how to change settings please see# http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;server-configuration-defaults.html[mysqld]## Remove leading # and set to the amount of RAM for the most important data# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.# innodb_buffer_pool_size &#x3D; 128M## Remove the leading &quot;# &quot; to disable binary logging# Binary logging captures changes between backups and is enabled by# default. It&#39;s default setting is log_bin&#x3D;binlog# disable_log_bin## Remove leading # to set options mainly useful for reporting servers.# The server defaults are faster for transactions and fast SELECTs.# Adjust sizes as needed, experiment to find the optimal values.# join_buffer_size &#x3D; 128M# sort_buffer_size &#x3D; 2M# read_rnd_buffer_size &#x3D; 2M## Remove leading # to revert to previous value for default_authentication_plugin,# this will increase compatibility with older clients. For background, see:# https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;server-system-variables.html#sysvar_default_authentication_plugin# default-authentication-plugin&#x3D;mysql_native_passwordport &#x3D; 3306#basedir &#x3D; &#x2F;data&#x2F;mysql这里注释掉，如果不注释掉，percona会报错：datadir &#x3D; &#x2F;data&#x2F;mysql&#x2F;datasocket &#x3D; &#x2F;data&#x2F;mysql&#x2F;mysql.socklog-error &#x3D; &#x2F;data&#x2F;mysql&#x2F;log&#x2F;mysqld.logpid-file &#x3D; &#x2F;data&#x2F;mysql&#x2F;run&#x2F;mysqld.pidlog-bin &#x3D; &#x2F;data&#x2F;mysql&#x2F;binlogs&#x2F;mysql-binslow_query_log &#x3D; 1slow_query_log_file &#x3D; &#x2F;data&#x2F;mysql&#x2F;log&#x2F;mysql_slow_query.loglong_query_time &#x3D; 5symbolic-links&#x3D;0character_set_server&#x3D;utf8mb4collation_server&#x3D;utf8mb4_unicode_ciskip-character-set-client-handshakeinnodb_undo_log_truncate&#x3D;off#允许时间字段为&quot;0000-00-00 00:00:00&quot;sql_mode&#x3D;&#39;STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#39;#打开函数功能log_bin_trust_function_creators&#x3D;1# generaltable_open_cache &#x3D; 200000table_open_cache_instances&#x3D;64back_log&#x3D;3500max_connections&#x3D;110000# filesinnodb_file_per_tableinnodb_log_file_size&#x3D;1Ginnodb_log_files_in_group&#x3D;2innodb_open_files&#x3D;4000# buffersinnodb_buffer_pool_size&#x3D; 2Ginnodb_buffer_pool_instances&#x3D;8innodb_log_buffer_size&#x3D;256M# tuneinnodb_doublewrite&#x3D; 1innodb_thread_concurrency&#x3D;0innodb_flush_log_at_trx_commit&#x3D; 0innodb_flush_method&#x3D;O_DIRECT_NO_FSYNCinnodb_max_dirty_pages_pct&#x3D;90innodb_max_dirty_pages_pct_lwm&#x3D;10innodb_lru_scan_depth&#x3D;2048innodb_page_cleaners&#x3D;4join_buffer_size&#x3D;256Ksort_buffer_size&#x3D;256Kinnodb_use_native_aio&#x3D;1innodb_stats_persistent &#x3D; 1innodb_spin_wait_delay&#x3D;96innodb_adaptive_flushing &#x3D; 1innodb_flush_neighbors &#x3D; 0innodb_read_io_threads &#x3D; 16innodb_write_io_threads &#x3D; 16innodb_io_capacity&#x3D;1500innodb_io_capacity_max&#x3D;2500innodb_purge_threads&#x3D;4innodb_adaptive_hash_index&#x3D;0max_prepared_stmt_count&#x3D;1000000innodb_monitor_enable &#x3D; ‘%’performance_schema &#x3D; ON 启动systemctl start mysqld.servicesystemctl status mysqld.service 初始化密码和权限mysql -h 127.0.0.1 -u rootalter user &#39;root&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;123456&#39;; --查询了资料，percona 8.0的密码插件已变成caching_sha2_passwordUPDATE user SET Host &#x3D; &#39;%&#39; WHERE User &#x3D; &#39;root&#39;;flush privileges; 体验","categories":[{"name":"mysql知识体系","slug":"mysql知识体系","permalink":"https://jxdw.github.io/categories/mysql%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【go标准库系列】go 1.12初步体验","slug":"golang-1-12-experience","date":"2019-02-28T11:10:08.000Z","updated":"2020-10-22T14:27:59.311Z","comments":true,"path":"2019/02/28/golang-1-12-experience/","link":"","permalink":"https://jxdw.github.io/2019/02/28/golang-1-12-experience/","excerpt":"背景golang 1.12于2月25号发布了，迫不及待的体验了一把。除了下载golang1.12，goland也更新到2018.3.4。","text":"背景golang 1.12于2月25号发布了，迫不及待的体验了一把。除了下载golang1.12，goland也更新到2018.3.4。 体验把之前的项目（1.11版本开发）的mod更新了，设置了把代理（不设置代理，就要用replace）。然后体验了一把go list -m -json all。贼快了。有点激动哈。重温下go mod相关的命令。","categories":[{"name":"go知识体系","slug":"go知识体系","permalink":"https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【java实现微服务架构系列】spring cloud sleuth","slug":"spring-cloud-2x-cloud-sleuth","date":"2019-02-09T09:15:36.000Z","updated":"2020-10-22T14:25:36.284Z","comments":true,"path":"2019/02/09/spring-cloud-2x-cloud-sleuth/","link":"","permalink":"https://jxdw.github.io/2019/02/09/spring-cloud-2x-cloud-sleuth/","excerpt":"关于spring cloud 2.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring data redis client、spring web service、prometheus client，进而集大成。Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client。","text":"关于spring cloud 2.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring data redis client、spring web service、prometheus client，进而集大成。Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client。","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【docker使用系列】docker 1.17安装和初步使用","slug":"docker-1-17-install","date":"2019-02-07T02:51:23.000Z","updated":"2020-10-24T13:11:05.935Z","comments":true,"path":"2019/02/07/docker-1-17-install/","link":"","permalink":"https://jxdw.github.io/2019/02/07/docker-1-17-install/","excerpt":"参考资料1.docker-ce 1.17的relase noteshttps://docs.docker.com/v17.12/release-notes/docker-ce/2.docker engine apihttps://docs.docker.com/engine/api/v1.19/#21-containers","text":"参考资料1.docker-ce 1.17的relase noteshttps://docs.docker.com/v17.12/release-notes/docker-ce/2.docker engine apihttps://docs.docker.com/engine/api/v1.19/#21-containers 安装过程yum install -y yum-utils device-mapper-persistent-data lvm2yum install -y http:&#x2F;&#x2F;mirror.centos.org&#x2F;centos&#x2F;7&#x2F;os&#x2F;x86_64&#x2F;Packages&#x2F;libseccomp-2.3.1-3.el7.x86_64.rpmyum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repoyum-config-manager --enable docker-ce-edgeyum-config-manager --enable docker-ce-testyum makecache fastyum list docker-ce --showduplicates|sort -ryum-config-manager --disable docker-ce-testyum-config-manager --disable docker-ce-edge 配置过程docker1.13.1之后的版本，和之前有很大的不同，有些参数都丢弃了,可以通过dockerd COMMAND –helpdocker.service配置如下： [Unit]Description&#x3D;Docker Application Container EngineDocumentation&#x3D;https:&#x2F;&#x2F;docs.docker.comAfter&#x3D;network-online.target firewalld.serviceWants&#x3D;network-online.target[Service]Type&#x3D;notify# the default is not to use systemd for cgroups because the delegate issues still# exists and systemd currently does not support the cgroup feature set required# for containers run by dockerExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd --storage-driver&#x3D;devicemapper --exec-opt native.cgroupdriver&#x3D;systemd -D --pidfile&#x3D;&#x2F;var&#x2F;run&#x2F;docker.pidExecReload&#x3D;&#x2F;bin&#x2F;kill -s HUP $MAINPID# Having non-zero Limit*s causes performance problems due to accounting overhead# in the kernel. We recommend using cgroups to do container-local accounting.LimitNOFILE&#x3D;infinityLimitNPROC&#x3D;infinityLimitCORE&#x3D;infinity# Uncomment TasksMax if your systemd version supports it.# Only systemd 226 and above support this version.#TasksMax&#x3D;infinityTimeoutStartSec&#x3D;0# set delegate yes so that systemd does not reset the cgroups of docker containersDelegate&#x3D;yes# kill only the docker process, not all processes in the cgroupKillMode&#x3D;process# restart the docker process if it exits prematurelyRestart&#x3D;on-failureStartLimitBurst&#x3D;3StartLimitInterval&#x3D;60s[Install]WantedBy&#x3D;multi-user.target daemon.json &#123; &quot;data-root&quot;:&quot;&#x2F;data&#x2F;docker&quot;, &quot;registry-mirror&quot;: [ &quot;https:&#x2F;&#x2F;csokz3oi.mirror.aliyuncs.com&quot; ], &quot;hosts&quot;: [&quot;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock&quot;,&quot;tcp:&#x2F;&#x2F;10.2.1.31:2375&quot;]&#125; 启动和相关操作启动命令： systemctl daemon-reloadsystemctl restart docker.service api操作：","categories":[{"name":"docker/k8s知识体系","slug":"docker-k8s知识体系","permalink":"https://jxdw.github.io/categories/docker-k8s%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【java实现微服务架构系列】spring-cloud-stream","slug":"spring-cloud-2x-cloud-stream","date":"2019-02-02T09:44:15.000Z","updated":"2020-10-22T14:25:40.785Z","comments":true,"path":"2019/02/02/spring-cloud-2x-cloud-stream/","link":"","permalink":"https://jxdw.github.io/2019/02/02/spring-cloud-2x-cloud-stream/","excerpt":"关于spring cloud 2.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring dat redis client、spring web service、prometheus client，进而集大成。Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client。","text":"关于spring cloud 2.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring dat redis client、spring web service、prometheus client，进而集大成。Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client。 个人研判此module不具备商用要求。","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"2018年度的技术总结","slug":"jishuzongjie-2018","date":"2019-01-01T02:35:47.000Z","updated":"2020-10-24T13:12:58.979Z","comments":true,"path":"2019/01/01/jishuzongjie-2018/","link":"","permalink":"https://jxdw.github.io/2019/01/01/jishuzongjie-2018/","excerpt":"背景新年了，按惯例，要盘盘肚子里面的“存货”了.","text":"背景新年了，按惯例，要盘盘肚子里面的“存货”了. 2018年度已掌握的技术学习已初步掌握的技术的进展，即具体技术流水账： java代码写的有点少，spring boot2.0、spring cloud2.X没有过多的深入和落地。 go语言没有很深入的学，就学了gin、go-kit的皮毛、了解协程的调度。 中间件技术mysql还是有点云里雾里，还是没有彻底搞清楚线程模型，线程调度 rabbitmq还是有点云里雾里，还是没有彻底掌握 redis新学了一个codis的方案，这个方案有点重，有些命令用不了，比如keys *（没有从group做聚合） zookeeper还是保留在会用的阶段。 elasticsearch还是保留在会用的阶段。 elastic-job-liteelastic-job-lite整个流程，看了一遍源码。 keepalived高可用技术这一年没有什么进展。 系统工具-centos技术这一年没有什么进展。 中间件技术注册中心和配置中心还是eureka，配置中心还是用的携程的apollo，至于阿里云的nacos，继续跟进吧。 docker和kubernetes这一年，开始捣鼓portainer和kubernetes。下半年的时候，花了一些时间捣鼓了一下kubernetes,并结合之前的技术方案，捣鼓了一套基于apollo+kubernetes方案（后面发现社区有公司也是采用类似的方案）:见本文附录。总的感觉，kubernetes是个好东西。如果要推动，需要自上而下的推动。现在这个产品驱动开发的公司，技术老大的重心由偏向于产品层面，所以，只能在线下玩一玩。如果要推动，需要自上而下的推动。现在这个产品驱动开发的公司，技术老大的重心由偏向于产品层面，所以，只能在线下玩一玩。运维做的有点多了。 监控跟踪技术容器监控技术还是比较熟悉prometheus。也了解了cadvisord技术和influxdb技术。 zipkin技术链路监控还是比较熟悉zipkin。 应用监控和中间件监控还是比较熟悉prometheus。 技术架构方面的收获架构方面的书籍本人工作伊始，到现在一直都有接触各种“架构”模式：SOA、分层、服务化、微服务、云原生。相关的词汇陈出不穷。所以，今年花了比较多的时间在理解云原生与微服务的区别（后面发现其实没啥本质区别，就是升级版）。并读了一本质量还行的书《云原生架构下的微服务最佳实践》。 综合评价先说综合评价，这本书还是有点货的，里面的很多技术是可以引入到项目的技术体系。如果让我推荐，我会推荐读。然后，根据组织结构，去各个技术的官方站点，看官方文档，仔细的撸一遍代码和命令。 这本书的组织架构从这本书的组织结构，可以看出，这是位有“货”的架构师。从传统架构谈到了: 架构模式（云原生、微服务） 公有或者私有云(一笔带过) 云上技术基础设施（数据库、缓存、消息中间件、任务调度中间件、自动化、持续集成、监控、框架、分布式ID） 分布式系统面临的一致性 分布式系统面临的可用性 分布式系统面临的扩展性 分布式系统面临的性能 未来值得关注的方向 研发流程、组织结构、研发文化 这本书的槽点下面本人将按组织结构的顺序进行点评。 架构模式本书花了6页的篇幅，探讨云原生的概念。个人认为还是比较浅，还可以深入点。后面又花了40多页的篇幅探讨为什么要引入微服务架构、微服务设计原则、实施的先决条件（很重要的一个点）、服务划分模式、接口设计、接口可视化（对于团队开发很重要）。基本算是合格。 公有/私有云有点遗憾，这块基本上是一笔带过。其实还是可以提一下GCP、AWS、IBM、Azure（毕竟公有云现在如日中天）、基于openstack或者kvm组成的私有云，以及基于这些云上的容器云技术kubernetes。 云上技术基础设施云上技术基础设施：数据库、缓存、消息中间件、任务调度中间件、自动化、持续集成、监控、框架、分布式ID。这些技术分成了第二章的后半章、第三章整章来说，个人认为，从篇幅上是很不够的。应该是每个技术安排一章。不过也理解，纸质书籍有其局限性，还要出版社方面的考虑。因为纸质书籍的局限性，给了博客一些机会，本人的博客，也细化了这些技术。 分布式系统面临的可用性谈到了几点：可用性的几板斧-重试、流控、熔断、容量预估、隔离。至于服务端入口处的高可用，没有谈论到。 分布式系统面临的可扩展性谈到了一点：AKF。没有记错的话，架构即未来也谈到了这个方法论。 分布式系统面临的性能性能这块，其实就几板斧：同步变异步、缓存、数据库分库分表、消息队列。 分布式系统面临的一致性本书从传统的定义引入分布式系统的一致性，然后做了分类（数据为中心的一致性、用户为中心的一致性）。然后讲了两阶段提交的局限性、三阶段提交的局限性。以及业界常用的几种解决方案：重试机制、本地记录日志、可靠事件机制、TCC事务模型。另外还提到了分布式锁。其实分布式锁、分布式id、可以单独起一章讨论。 后续值得关注的技术、组织文化、研发流程至于这块，当小说看了。尤其是组织、研发流程变化，最好是自上而下的推动，而不是自下而上。 形成自己的通用技术架构图形成自己的业务平台通用技术架构图:","categories":[{"name":"感悟","slug":"感悟","permalink":"https://jxdw.github.io/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"架构知识集合","slug":"架构知识集合","permalink":"https://jxdw.github.io/tags/%E6%9E%B6%E6%9E%84%E7%9F%A5%E8%AF%86%E9%9B%86%E5%90%88/"}]},{"title":"【docker使用系列】玩转kubernetes之kubernetes阶段性成果","slug":"container-kubernetes-jieduanxing-zongjie","date":"2018-12-30T02:38:44.000Z","updated":"2020-10-24T13:11:05.892Z","comments":true,"path":"2018/12/30/container-kubernetes-jieduanxing-zongjie/","link":"","permalink":"https://jxdw.github.io/2018/12/30/container-kubernetes-jieduanxing-zongjie/","excerpt":"这两天到搭建好的kubernetes集群上，把公司的一个项目放到了集群上。最终的架构如下。","text":"这两天到搭建好的kubernetes集群上，把公司的一个项目放到了集群上。最终的架构如下。 未在线上环境校验的方案","categories":[{"name":"docker/k8s知识体系","slug":"docker-k8s知识体系","permalink":"https://jxdw.github.io/categories/docker-k8s%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【docker使用系列】玩转kubernetes之kubernetes1.8安装","slug":"container-kubernetes-1-8-install","date":"2018-12-28T06:04:49.000Z","updated":"2020-10-24T13:11:05.881Z","comments":true,"path":"2018/12/28/container-kubernetes-1-8-install/","link":"","permalink":"https://jxdw.github.io/2018/12/28/container-kubernetes-1-8-install/","excerpt":"背景资料本文主要参考资料(建议收藏)https:&#x2F;&#x2F;jimmysong.io&#x2F;kubernetes-handbook&#x2F;https:&#x2F;&#x2F;anjia0532.github.io&#x2F;2017&#x2F;11&#x2F;15&#x2F;gcr-io-image-mirror&#x2F;","text":"背景资料本文主要参考资料(建议收藏)https:&#x2F;&#x2F;jimmysong.io&#x2F;kubernetes-handbook&#x2F;https:&#x2F;&#x2F;anjia0532.github.io&#x2F;2017&#x2F;11&#x2F;15&#x2F;gcr-io-image-mirror&#x2F; 本文的收获实践“纸上读来终觉浅，绝知此事要躬行”，上手操作第5章 安装之前三件事熟悉kubernetes基本架构和工作原理建议好好看《Kubernetes Handbook》1-4章或者《kubernetes in action》(中文版已经出版).了解整体架构、以及基本概念模型： cluster与node rabc： pod：简单的理解就是一组容器，基础容器是 deployment(pod升级版)： service： configmap： 本文使用版本centos:CentOS Linux release 7.3.1611 (Core) kubernetes:1.8.5flannel:0.7.1docker:1.12.6harbor:1.5.4(依赖的docker为1.12.6、docker-compose为1.12.0)etcd:3.3.5cfssl_linux-amd64cfssljson_linux-amd64cfssl-certinfo_linux-amd64 ip和服务部署规划因为测试环境资源有限，尽量的合理利用资源。 10.2.1.30(centos7): harbor0.5(docker1.10.3、 docker-compose1.10)、etcd3.3.510.2.1.33(centos7): etcd3.3.510.2.1.31(centos7): etcd3.3.510.2.1.37(centos7): docker1.12.6、flanneld0.7.1、kubernetes master(kube-apiserver 1.8.5、kube-scheduler1.8.5、kube-controller-manager1.8.5)、kubernetes node(kubelet1.8.5、kube-proxy1.8.5)10.2.1.38(centos7): docker1.12.6、flanneld0.7.1、kubernetes node(kubelet1.8.5、kube-proxy1.8.5)10.2.1.39(centos7): docker1.12.6、flanneld0.7.1、kubernetes node(kubelet1.8.5、kube-proxy1.8.5) 安装步骤安装etcd集群可以安装一个etcd集群，也可以用一个已有集群。本文安装的etcd没有采用Kubernetes Handbook的证书，觉得麻烦并创建key-value。 启动harbor服务安装和启动harbor服务。并将一些镜像从anjia0532上pull下来，push到私有仓库。供后续步骤使用 k8s-dns-kube-dns-amd64:1.14.1k8s-dns-dnsmasq-nanny-amd64:1.14.1k8s-dns-sidecar-amd64:1.14.1heapster-amd64:v1.3.0heapster-grafana-amd64:v4.0.2heapster-influxdb-amd64:v1.1.1fluentd-elasticsearch:1.22kibana:4.6.1kubernetes-dashboard-amd64:v1.6.3 安装docker1.12.6可以参考之前的文章，不再赘述，记得要配置私有仓库，否则，很多功能不好实现。 安装flanneld0.7.1参考 https://jimmysong.io/kubernetes-handbook/practice/flannel-installation.html 安装flanneld。注意：/etc/sysconfig/flanneld配置文件 # Flanneld configuration options # etcd url location. Point this to the server where etcd runsFLANNEL_ETCD_ENDPOINTS&#x3D;&quot;http:&#x2F;&#x2F;10.2.1.30:2379,http:&#x2F;&#x2F;10.2.1.31:2379,http:&#x2F;&#x2F;10.2.1.33:2379&quot;# etcd config key. This is the configuration key that flannel queries# For address range assignmentFLANNEL_ETCD_PREFIX&#x3D;&quot;&#x2F;kube-centos&#x2F;network&quot;# Any additional options that you want to passFLANNEL_OPTIONS&#x3D;&quot;--iface&#x3D;ens192&quot; 并在etcd创建kubernetes集群的flanneld网络config 准备证书安装CSL文件创建CA证书参考 https://jimmysong.io/kubernetes-handbook/practice/create-tls-and-secret-key.html 创建证书，并分发到所有kubernetes node。 安装kubernetes master准备/etc/kubernetes/config配置文件该配置文件同时被kube-apiserver、kube-controller-manager、kube-scheduler、kubelet、kube-proxy使用。 #### kubernetes system config## The following values are used to configure various aspects of all# kubernetes services, including## kube-apiserver.service# kube-controller-manager.service# kube-scheduler.service# kubelet.service# kube-proxy.service# logging to stderr means we get it in the systemd journalKUBE_LOGTOSTDERR&#x3D;&quot;--logtostderr&#x3D;true&quot;# journal message level, 0 is debugKUBE_LOG_LEVEL&#x3D;&quot;--v&#x3D;0&quot;# Should this cluster be allowed to run privileged docker containersKUBE_ALLOW_PRIV&#x3D;&quot;--allow-privileged&#x3D;false&quot;# How the controller-manager, scheduler, and proxy find the apiserverKUBE_MASTER&#x3D;&quot;--master&#x3D;http:&#x2F;&#x2F;10.2.1.37:8080&quot; 准备/etc/kubernetes/apiserver文件##### kubernetes system config#### The following values are used to configure the kube-apiserver## The address on the local server to listen to.#KUBE_API_ADDRESS&#x3D;&quot;--address&#x3D;bc.authorization.k8s.io&#x2F;v10.2.1.30&quot;KUBE_API_ADDRESS&#x3D;&quot;--advertise-address&#x3D;10.2.1.37 --bind-address&#x3D;10.2.1.37 --insecure-bind-address&#x3D;10.2.1.37&quot;## The port on the local server to listen on.KUBE_API_PORT&#x3D;&quot;--port&#x3D;8080&quot;## Port minions listen onKUBELET_PORT&#x3D;&quot;--kubelet-port&#x3D;10250&quot;## Comma separated list of nodes in the etcd clusterKUBE_ETCD_SERVERS&#x3D;&quot;--etcd-servers&#x3D;http:&#x2F;&#x2F;10.2.1.30:2379,http:&#x2F;&#x2F;10.2.1.31:2379,http:&#x2F;&#x2F;10.2.1.33:2379&quot;## Address range to use for services#KUBE_SERVICE_ADDREKUBELET_POD_INFRA_CONTAINERSSES&#x3D;&quot;--service-cluster-ip-range&#x3D;172.17.0.0&#x2F;16&quot;#KUBE_ANONYMOUS_AUTH&#x3D;&quot;--anonymous-auth&#x3D;false&quot;KUBE_SERVICE_ADDRESSES&#x3D;&quot;--service-cluster-ip-range&#x3D;172.19.0.0&#x2F;16&quot;## default admission control policies#KUBE_ADMISSION_CONTROL&#x3D;&quot;--admission-control&#x3D;NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota&quot;KUBE_ADMISSION_CONTROL&#x3D;&quot;--admission-control&#x3D;ServiceAccount,NamespaceLifecycle,NamespaceExists,LimitRanger,ResourceQuota&quot;KUBE_API_ARGS&#x3D;&quot;--authorization-mode&#x3D;RBAC --runtime-config&#x3D;rbac.authorization.k8s.io&#x2F;v1beta1 --kubelet-https&#x3D;true --experimental-bootstrap-token-auth --token-auth-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;token.csv --service-node-port-range&#x3D;30000-32767 --tls-cert-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;kubernetes.pem --tls-private-key-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;kubernetes-key.pem --client-ca-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;ca.pem --service-account-key-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;ca-key.pem --enable-swagger-ui&#x3D;true --apiserver-count&#x3D;3 --audit-log-maxage&#x3D;30 --audit-log-maxbackup&#x3D;3 --audit-log-maxsize&#x3D;100 --audit-log-path&#x3D;&#x2F;var&#x2F;lib&#x2F;audit.log --event-ttl&#x3D;1h&quot; 配置kube-apiserver的systemd[Unit]Description&#x3D;Kubernetes API ServiceDocumentation&#x3D;https:&#x2F;&#x2F;github.com&#x2F;GoogleCloudPlatform&#x2F;kubernetesAfter&#x3D;network.target#After&#x3D;etcd.service[Service]EnvironmentFile&#x3D;-&#x2F;etc&#x2F;kubernetes&#x2F;configEnvironmentFile&#x3D;-&#x2F;etc&#x2F;kubernetes&#x2F;apiserverExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;kube-apiserver \\ $KUBE_LOGTOSTDERR \\ $KUBE_LOG_LEVEL \\ $KUBE_ETCD_SERVERS \\ $KUBE_API_ADDRESS \\ $KUBE_API_PORT \\ $KUBELET_PORT \\ $KUBE_ALLOW_PRIV \\ $KUBE_SERVICE_ADDRESSES \\ $KUBE_ADMISSION_CONTROL \\ $KUBE_ANONYMOUS_AUTH \\ $KUBE_API_ARGSRestart&#x3D;on-failureType&#x3D;notifyLimitNOFILE&#x3D;65536[Install]WantedBy&#x3D;multi-user.target 启动kube-apiserversystemctl daemon-reloadsystemctl enable kube-apiserversystemctl start kube-apiserver 启动kube-controller-manager启动kube-scheduler安装kubernetes node启动kube-proxy启动kubelet安装K8S插件最终的效果dashboard效果 etcd数据库中的数据","categories":[{"name":"docker/k8s知识体系","slug":"docker-k8s知识体系","permalink":"https://jxdw.github.io/categories/docker-k8s%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【docker使用系列】docker1.12管理技术之portainer","slug":"docker-1-12-management","date":"2018-12-27T04:51:23.000Z","updated":"2020-10-24T13:11:05.922Z","comments":true,"path":"2018/12/27/docker-1-12-management/","link":"","permalink":"https://jxdw.github.io/2018/12/27/docker-1-12-management/","excerpt":"本文背景参考资料http:&#x2F;&#x2F;www.manongjc.com&#x2F;article&#x2F;11900.html 背景现在docker部署的越来越多，但是还没有上百台，所以kubernete技术用不到(投入和产出不匹配，有时间写写kubernetes）。于是乎，portainer进入我们的视野。 文章更新历史2019-03-06 portainer更新至1.20.2版本","text":"本文背景参考资料http:&#x2F;&#x2F;www.manongjc.com&#x2F;article&#x2F;11900.html 背景现在docker部署的越来越多，但是还没有上百台，所以kubernete技术用不到(投入和产出不匹配，有时间写写kubernetes）。于是乎，portainer进入我们的视野。 文章更新历史2019-03-06 portainer更新至1.20.2版本 实操过程docker Daemon配置&#123; &quot;insecure-registries&quot;: [ &quot;10.2.1.30:5000&quot; ], &quot;registry-mirror&quot;: [ &quot;https:&#x2F;&#x2F;csokz3oi.mirror.aliyuncs.com&quot; ], &quot;graph&quot;:&quot;&#x2F;data&#x2F;docker&quot;, &quot;hosts&quot;: [&quot;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock&quot;,&quot;tcp:&#x2F;&#x2F;192.168.172.1:2375&quot;]&#125; portainer配置因为所有服务器的docker daemon进程都开启了2375端口，所以只用在页面配置，即可进行相应管理。截图如下：","categories":[{"name":"docker/k8s知识体系","slug":"docker-k8s知识体系","permalink":"https://jxdw.github.io/categories/docker-k8s%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【jenkins/jira知识体系】(转载)jenkins restful api","slug":"jenkins-restful-api","date":"2018-12-23T11:00:00.000Z","updated":"2020-10-24T13:11:06.026Z","comments":true,"path":"2018/12/23/jenkins-restful-api/","link":"","permalink":"https://jxdw.github.io/2018/12/23/jenkins-restful-api/","excerpt":"原文地址https://www.cnblogs.com/zjsupermanblog/p/7238422.html","text":"原文地址https://www.cnblogs.com/zjsupermanblog/p/7238422.html 备注有api就可以进行二次开发和集成了。 截图","categories":[{"name":"jenkins知识体系","slug":"jenkins知识体系","permalink":"https://jxdw.github.io/categories/jenkins%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【java实现微服务架构系列】spring-cloud 2.1版本的候选版本","slug":"spring-cloud-2x-talk-about-greenwich","date":"2018-12-23T05:35:44.000Z","updated":"2020-10-22T14:25:46.280Z","comments":true,"path":"2018/12/23/spring-cloud-2x-talk-about-greenwich/","link":"","permalink":"https://jxdw.github.io/2018/12/23/spring-cloud-2x-talk-about-greenwich/","excerpt":"概述背景最近出来的spring cloud Greenwich版本(2.1版本)候选版本出了一个Spring Cloud Kubernetes 1.0.0。这也说明:spring cloud也全面拥抱kubernetes(私有云选择kubernetes作为容器云平台是个不错的选择)。 关于spring cloud 2.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring dat redis client、spring web service、prometheus client，进而集大成。Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client。","text":"概述背景最近出来的spring cloud Greenwich版本(2.1版本)候选版本出了一个Spring Cloud Kubernetes 1.0.0。这也说明:spring cloud也全面拥抱kubernetes(私有云选择kubernetes作为容器云平台是个不错的选择)。 关于spring cloud 2.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring dat redis client、spring web service、prometheus client，进而集大成。Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client。 看下官方的release note 猜想不禁在想，还有哪个云厂商会加入到spring cloud大家庭，这已经涉及技术后面的商业布局了。呵呵。 附录","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【jenkins/jira使用系列】centos7下yum安装jenkins","slug":"jenkins-yum-install","date":"2018-12-22T02:41:23.000Z","updated":"2020-10-24T13:11:06.033Z","comments":true,"path":"2018/12/22/jenkins-yum-install/","link":"","permalink":"https://jxdw.github.io/2018/12/22/jenkins-yum-install/","excerpt":"安装规划目录jdk版本:oracle jdk8jenkins目录: &#x2F;home&#x2F;jenkins","text":"安装规划目录jdk版本:oracle jdk8jenkins目录: &#x2F;home&#x2F;jenkins 前置条件已经安装好jdk版本。 安装jenkinswget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;jenkins.repo https:&#x2F;&#x2F;pkg.jenkins.io&#x2F;redhat-stable&#x2F;jenkins.reporpm --import https:&#x2F;&#x2F;pkg.jenkins.io&#x2F;redhat-stable&#x2F;jenkins.io.keyyum install jenkins 编辑配置文件vim /etc/sysconfig/jenkins ## Path: Development&#x2F;Jenkins## Description: Jenkins Automation Server## Type: string## Default: &quot;&#x2F;var&#x2F;lib&#x2F;jenkins&quot;## ServiceRestart: jenkins## Directory where Jenkins store its configuration and working# files (checkouts, build reports, artifacts, ...).#JENKINS_HOME&#x3D;&quot;&#x2F;home&#x2F;jenkins&quot;## Type: string## Default: &quot;&quot;## ServiceRestart: jenkins## Java executable to run Jenkins# When left empty, we&#39;ll try to find the suitable Java.#JENKINS_JAVA_CMD&#x3D;&quot;&quot;## Type: string## Default: &quot;jenkins&quot;## ServiceRestart: jenkins## Unix user account that runs the Jenkins daemon# Be careful when you change this, as you need to update# permissions of $JENKINS_HOME and &#x2F;var&#x2F;log&#x2F;jenkins.#JENKINS_USER&#x3D;&quot;jenkins&quot;## Type: string## Default: &quot;false&quot;## ServiceRestart: jenkins## Whether to skip potentially long-running chown at the# $JENKINS_HOME location. Do not enable this, &quot;true&quot;, unless# you know what you&#39;re doing. See JENKINS-23273.##JENKINS_INSTALL_SKIP_CHOWN&#x3D;&quot;false&quot;## Type: string## Default: &quot;-Djava.awt.headless&#x3D;true&quot;## ServiceRestart: jenkins## Options to pass to java when running Jenkins.#JENKINS_JAVA_OPTIONS&#x3D;&quot;-Djava.awt.headless&#x3D;true&quot;## Type: integer(0:65535)## Default: 8080## ServiceRestart: jenkins## Port Jenkins is listening on.# Set to -1 to disable#JENKINS_PORT&#x3D;&quot;48080&quot; 编辑启动文件vim /etc/rc.d/init.d/jenkins ···# Search usable Java as &#x2F;usr&#x2F;bin&#x2F;java might not point to minimal version required by Jenkins.# see http:&#x2F;&#x2F;www.nabble.com&#x2F;guinea-pigs-wanted-----Hudson-RPM-for-RedHat-Linux-td25673707.html# 修改java路径candidates&#x3D;&quot;&#x2F;data&#x2F;jdk1.8.0_161&#x2F;bin&#x2F;java&quot;···# 根据磁盘的情况，修改安装路径JAVA_CMD&#x3D;&quot;$JENKINS_JAVA_CMD $JENKINS_JAVA_OPTIONS -DJENKINS_HOME&#x3D;&#x2F;home&#x2F;jenkins -jar $JENKINS_WAR&quot;PARAMS&#x3D;&quot;--logfile&#x3D;&#x2F;home&#x2F;jenkins&#x2F;log&#x2F;jenkins.log --webroot&#x3D;&#x2F;home&#x2F;jenkins&#x2F;war --daemon&quot;··· 重新加载systemctl daemon-reload 创建目录和授权cd home&#x2F;mkdir jenkinschown -R jenkins:jenkins jenkins&#x2F;llcd jenkins&#x2F;mv &#x2F;data&#x2F;jenkins&#x2F;jenkins.war .mkdir logmkdir warchown -R jenkins:jenkins jenkins&#x2F;cd jenkins&#x2F; 启动jenkins不同于传统的systemctl，这里用 service start jenkins","categories":[{"name":"jenkins知识体系","slug":"jenkins知识体系","permalink":"https://jxdw.github.io/categories/jenkins%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【docker使用系列】docker1.12版本下swarm操作","slug":"docker-1-12-swarm-ops","date":"2018-12-15T04:51:23.000Z","updated":"2020-10-24T13:11:05.930Z","comments":true,"path":"2018/12/15/docker-1-12-swarm-ops/","link":"","permalink":"https://jxdw.github.io/2018/12/15/docker-1-12-swarm-ops/","excerpt":"本文参考资料https:&#x2F;&#x2F;www.cnblogs.com&#x2F;bigberg&#x2F;p&#x2F;8779302.html","text":"本文参考资料https:&#x2F;&#x2F;www.cnblogs.com&#x2F;bigberg&#x2F;p&#x2F;8779302.html docker swarm操作docker swarm集群初始化如果docker1.12的swarm机制是inactive。想启动docker swarm功能，则需要初始化swarm docker swarm init --advertise-addr 10.2.1.37 其他的节点，加入集群，则需要输入： docker swarm join --token SWMTKN-1-1o6pbdwzd4fj2ewym1npno6qub1imgg85gp5x311cc5d8gsi74-3lq395n1h8hrdwrgta17iil9c 10.2.1.37:2377","categories":[{"name":"docker/k8s知识体系","slug":"docker-k8s知识体系","permalink":"https://jxdw.github.io/categories/docker-k8s%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【java实现微服务架构系列】spring security","slug":"spring-boot-2x-boot-security","date":"2018-12-09T11:55:51.000Z","updated":"2020-10-22T14:25:16.740Z","comments":true,"path":"2018/12/09/spring-boot-2x-boot-security/","link":"","permalink":"https://jxdw.github.io/2018/12/09/spring-boot-2x-boot-security/","excerpt":"参考资料https:&#x2F;&#x2F;blog.csdn.net&#x2F;yuanlaijike&#x2F;article&#x2F;details&#x2F;80249235https:&#x2F;&#x2F;blog.csdn.net&#x2F;yuanlaijike&#x2F;article&#x2F;details&#x2F;80249869https:&#x2F;&#x2F;blog.csdn.net&#x2F;yuanlaijike&#x2F;article&#x2F;details&#x2F;80250389https:&#x2F;&#x2F;blog.csdn.net&#x2F;yuanlaijike&#x2F;article&#x2F;details&#x2F;80253922https:&#x2F;&#x2F;blog.csdn.net&#x2F;yuanlaijike&#x2F;article&#x2F;details&#x2F;80327880https:&#x2F;&#x2F;blog.csdn.net&#x2F;yuanlaijike&#x2F;article&#x2F;details&#x2F;84638745https:&#x2F;&#x2F;blog.csdn.net&#x2F;yuanlaijike&#x2F;article&#x2F;details&#x2F;84703690https:&#x2F;&#x2F;segmentfault.com&#x2F;a&#x2F;1190000012465134https:&#x2F;&#x2F;www.cnkirito.moe&#x2F;spring-security-7&#x2F;","text":"参考资料https:&#x2F;&#x2F;blog.csdn.net&#x2F;yuanlaijike&#x2F;article&#x2F;details&#x2F;80249235https:&#x2F;&#x2F;blog.csdn.net&#x2F;yuanlaijike&#x2F;article&#x2F;details&#x2F;80249869https:&#x2F;&#x2F;blog.csdn.net&#x2F;yuanlaijike&#x2F;article&#x2F;details&#x2F;80250389https:&#x2F;&#x2F;blog.csdn.net&#x2F;yuanlaijike&#x2F;article&#x2F;details&#x2F;80253922https:&#x2F;&#x2F;blog.csdn.net&#x2F;yuanlaijike&#x2F;article&#x2F;details&#x2F;80327880https:&#x2F;&#x2F;blog.csdn.net&#x2F;yuanlaijike&#x2F;article&#x2F;details&#x2F;84638745https:&#x2F;&#x2F;blog.csdn.net&#x2F;yuanlaijike&#x2F;article&#x2F;details&#x2F;84703690https:&#x2F;&#x2F;segmentfault.com&#x2F;a&#x2F;1190000012465134https:&#x2F;&#x2F;www.cnkirito.moe&#x2F;spring-security-7&#x2F; 关于spring boot/cloud 2.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring dat redis client、spring web service、prometheus client(在spring boot 2.X集成)，进而集大成。Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client。","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"2018年下半年学习落地计划","slug":"zongjie_2019_learn_plan","date":"2018-12-06T02:35:47.000Z","updated":"2020-10-24T13:13:16.048Z","comments":true,"path":"2018/12/06/zongjie_2019_learn_plan/","link":"","permalink":"https://jxdw.github.io/2018/12/06/zongjie_2019_learn_plan/","excerpt":"2019年度展望和学习计划在上述通用技术架构中已掌握的4大块进行加强:","text":"2019年度展望和学习计划在上述通用技术架构中已掌握的4大块进行加强: 业务类中间件openresty、keepalived、mysql、redis、zookeeper、rabbitmq/kafka、注册/配置中心、zipkin调用连监控技术等中间件技术。 监控平台技术 prometheus监控技术、容器监控技术。 编程框架以及中间件客户端java语言的应用开发脚手架主要是spring boot2.X，微服务集成框架则是spring cloud 2.X版本。go语言的应用开发脚手架主要是gin,主要是go-micro框架。 centos/docker/k8s等工具软件知识体系os系统，比如centos 6、centos 7、centos8(待发布，RHEL8已经出了beta版本)。项目管理、持续集成、持续交付、静态代码扫描、wiki知识管理、云原生中间件-docker、etcd、kubernetes等容器技术。 画饼下面这张图是来自于普元EA：基于paas/caas平台的技术架构。不禁感叹：有一个私有容器云平台，真的挺好。2019年度，看能不能在业务平台的技术架构、kubernetes两点上有所收获、积累更多的落地经验，加油。","categories":[{"name":"感悟","slug":"感悟","permalink":"https://jxdw.github.io/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"架构知识集合","slug":"架构知识集合","permalink":"https://jxdw.github.io/tags/%E6%9E%B6%E6%9E%84%E7%9F%A5%E8%AF%86%E9%9B%86%E5%90%88/"}]},{"title":"【docker使用系列】etcd3安装和初步操作","slug":"container-etcd-install","date":"2018-12-05T13:58:54.000Z","updated":"2020-10-24T13:11:05.874Z","comments":true,"path":"2018/12/05/container-etcd-install/","link":"","permalink":"https://jxdw.github.io/2018/12/05/container-etcd-install/","excerpt":"下载安装下载和安装下载tar.gz文件，解压并cp到/usr/bin/目录 创建用户和目录useradd etcdmkdir -p &#x2F;data&#x2F;etcd&#x2F;etcd02mkdir -p &#x2F;etc&#x2F;etcd&#x2F;chown etcd:etcd &#x2F;data&#x2F;etcd&#x2F;etcd02chown etcd:etcd &#x2F;etc&#x2F;etcd&#x2F;","text":"下载安装下载和安装下载tar.gz文件，解压并cp到/usr/bin/目录 创建用户和目录useradd etcdmkdir -p &#x2F;data&#x2F;etcd&#x2F;etcd02mkdir -p &#x2F;etc&#x2F;etcd&#x2F;chown etcd:etcd &#x2F;data&#x2F;etcd&#x2F;etcd02chown etcd:etcd &#x2F;etc&#x2F;etcd&#x2F; 配置systemd新建文件/usr/lib/systemd/system/etcd.service [Unit]Description&#x3D;Etcd ServerAfter&#x3D;network.targetAfter&#x3D;network-online.targetWants&#x3D;network-online.target[Service]Type&#x3D;notifyWorkingDirectory&#x3D;&#x2F;data&#x2F;etcd&#x2F;etcd02EnvironmentFile&#x3D;-&#x2F;etc&#x2F;etcd&#x2F;etcd.confUser&#x3D;etcd# set GOMAXPROCS to number of processorsExecStart&#x3D;&#x2F;bin&#x2F;bash -c &quot;GOMAXPROCS&#x3D;$(nproc) &#x2F;usr&#x2F;bin&#x2F;etcd --name&#x3D;\\&quot;$&#123;ETCD_NAME&#125;\\&quot; --data-dir&#x3D;\\&quot;$&#123;ETCD_DATA_DIR&#125;\\&quot; --listen-client-urls&#x3D;\\&quot;$&#123;ETCD_LISTEN_CLIENT_URLS&#125;\\&quot;&quot;Restart&#x3D;on-failureLimitNOFILE&#x3D;65536[Install]WantedBy&#x3D;multi-user.target etcd.confetcd配置文件如下 # 节点名称ETCD_NAME&#x3D;etcd02# 数据存放位置ETCD_DATA_DIR&#x3D;&quot;&#x2F;data&#x2F;etcd&#x2F;etcd02&quot;# 监听其他 Etcd 实例的地址ETCD_LISTEN_PEER_URLS&#x3D;&quot;http:&#x2F;&#x2F;10.2.1.31:2380&quot;# 监听客户端地址ETCD_LISTEN_CLIENT_URLS&#x3D;&quot;http:&#x2F;&#x2F;10.2.1.31:2379,http:&#x2F;&#x2F;10.2.1.31:4001&quot;# 通知其他 Etcd 实例地址ETCD_INITIAL_ADVERTISE_PEER_URLS&#x3D;&quot;http:&#x2F;&#x2F;10.2.1.31:2380&quot;# 初始化集群内节点地址ETCD_INITIAL_CLUSTER&#x3D;&quot;etcd01&#x3D;http:&#x2F;&#x2F;10.2.1.30:2380,etcd02&#x3D;http:&#x2F;&#x2F;10.2.1.31:2380,etcd03&#x3D;http:&#x2F;&#x2F;10.2.1.33:2380&quot;# 初始化集群状态，new 表示新建ETCD_INITIAL_CLUSTER_STATE&#x3D;&quot;new&quot;# 初始化集群 tokenETCD_INITIAL_CLUSTER_TOKEN&#x3D;&quot;etcd-cluster&quot;# 通知 客户端地址ETCD_ADVERTISE_CLIENT_URLS&#x3D;&quot;http:&#x2F;&#x2F;10.2.1.31:2379,http:&#x2F;&#x2F;10.2.1.31:4001&quot; 启动etcdsystemctl daemon-reloadsystemctl start etcd.service etcd操作etcdctl api2操作指南 etcdctl api2健康检查","categories":[{"name":"docker/k8s知识体系","slug":"docker-k8s知识体系","permalink":"https://jxdw.github.io/categories/docker-k8s%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【prometheus使用系列】spring boot的一种监控技术","slug":"java-spring-boot-2x-boot-admin-server","date":"2018-12-02T09:15:05.000Z","updated":"2020-10-22T14:33:07.341Z","comments":true,"path":"2018/12/02/java-spring-boot-2x-boot-admin-server/","link":"","permalink":"https://jxdw.github.io/2018/12/02/java-spring-boot-2x-boot-admin-server/","excerpt":"概述本文参考资料http:&#x2F;&#x2F;codecentric.github.io&#x2F;spring-boot-admin&#x2F;2.1.0&#x2F; (官方文档)https:&#x2F;&#x2F;my.oschina.net&#x2F;u&#x2F;3877886&#x2F;blog&#x2F;1825253","text":"概述本文参考资料http:&#x2F;&#x2F;codecentric.github.io&#x2F;spring-boot-admin&#x2F;2.1.0&#x2F; (官方文档)https:&#x2F;&#x2F;my.oschina.net&#x2F;u&#x2F;3877886&#x2F;blog&#x2F;1825253 温馨提示如果能看到英文版的官方文档，就不建议继续往下阅读浪费时间，谢谢。 关于spring boot admin 2.0spring boot admin 为Spring Boot应用提供了可视化的监控视图。它基于spring boot actuator模块，因为spring boot actuator 模块为监控Spring Boot 应用程序暴露的大量的管理端点(Endpoints)。可结合eureka、consul、zookeeper等服务注册及发现组件来监控并展示微服务集群中服务的状态及各项指标信息。下面进入正题。","categories":[{"name":"prometheus知识体系","slug":"prometheus知识体系","permalink":"https://jxdw.github.io/categories/prometheus%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"2016-2018年技术感悟总结(草稿)","slug":"jishuzongjie-2018_beta","date":"2018-12-01T02:35:41.000Z","updated":"2020-10-24T13:11:06.055Z","comments":true,"path":"2018/12/01/jishuzongjie-2018_beta/","link":"","permalink":"https://jxdw.github.io/2018/12/01/jishuzongjie-2018_beta/","excerpt":"背景背景新年了，要盘盘肚子里面的“存货”了。","text":"背景背景新年了，要盘盘肚子里面的“存货”了。 2016-2018年度年技术总结在五大块进行加强: java语言和框架主要是spring boot2.X。 go语言和框架主要是go-micro框架。 系统工具-centos centos 6、centos 7、centos8(待发布，RHEL8已经出了beta版本)。 研发管理平台 项目管理、持续集成、持续交付、静态代码扫描、知识管理 服务化所需的中间件 openresty、keepalived、mysql、redis、zookeeper、rabbitmq/kafka等中间件技术、监控技术、prometheus监控技术。一图胜千言 2019年度的技术主题因为微服务很火、云原生也渐渐在大厂落地，所以，大家都在研究和投入，所以，可供学习和思考的点就很多。","categories":[{"name":"感悟","slug":"感悟","permalink":"https://jxdw.github.io/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【java实现微服务架构系列】spring框架系列之spring boot micrometer监控","slug":"spring-boot-2x-boot-micrometer","date":"2018-11-18T09:15:59.000Z","updated":"2020-10-22T14:25:10.826Z","comments":true,"path":"2018/11/18/spring-boot-2x-boot-micrometer/","link":"","permalink":"https://jxdw.github.io/2018/11/18/spring-boot-2x-boot-micrometer/","excerpt":"关于spring boot 2.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring data redis client、spring web service、prometheus client，进而集大成。Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client。","text":"关于spring boot 2.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring data redis client、spring web service、prometheus client，进而集大成。Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client。","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【docker使用系列】镜像仓库harbor1.5.4版本安装和使用","slug":"docker-registry-harbor-154-install","date":"2018-10-31T14:49:09.000Z","updated":"2020-10-24T13:11:05.982Z","comments":true,"path":"2018/10/31/docker-registry-harbor-154-install/","link":"","permalink":"https://jxdw.github.io/2018/10/31/docker-registry-harbor-154-install/","excerpt":"本文背景本文参考资料https://www.cnblogs.com/huangjc/p/6266564.html 下载、配置和安装下载harbor1.5.4版本离线版https:&#x2F;&#x2F;storage.googleapis.com&#x2F;harbor-releases&#x2F;harbor-offline-installer-v1.5.4.tgz","text":"本文背景本文参考资料https://www.cnblogs.com/huangjc/p/6266564.html 下载、配置和安装下载harbor1.5.4版本离线版https:&#x2F;&#x2F;storage.googleapis.com&#x2F;harbor-releases&#x2F;harbor-offline-installer-v1.5.4.tgz 下载docker-copose 1.12.0版本下载docker-copose 1.12.0版本的二进制文件 curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.12.0&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-composechmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose 修改harbor配置harbor.cfg## Configuration file of Harbor#This attribute is for migrator to detect the version of the .cfg file, DO NOT MODIFY!_version &#x3D; 1.5.0#The IP address or hostname to access admin UI and registry service.#DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.hostname &#x3D; 192.168.172.10#The protocol for accessing the UI and token&#x2F;notification service, by default it is http.#It can be set to https if ssl is enabled on nginx.ui_url_protocol &#x3D; http#Maximum number of job workers in job servicemax_job_workers &#x3D; 50#Determine whether or not to generate certificate for the registry&#39;s token.#If the value is on, the prepare script creates new root cert and private key#for generating token to access the registry. If the value is off the default key&#x2F;cert will be used.#This flag also controls the creation of the notary signer&#39;s cert.customize_crt &#x3D; on#The path of cert and key files for nginx, they are applied only the protocol is set to https#ssl_cert &#x3D; &#x2F;data&#x2F;cert&#x2F;server.crt#ssl_cert_key &#x3D; &#x2F;data&#x2F;cert&#x2F;server.key#The path of secretkey storagesecretkey_path &#x3D; &#x2F;data&#x2F;harbor-adminserver#Admiral&#39;s url, comment this attribute, or set its value to NA when Harbor is standaloneadmiral_url &#x3D; NA#Log files are rotated log_rotate_count times before being removed. If count is 0, old versions are removed rather than rotated.log_rotate_count &#x3D; 50#Log files are rotated only if they grow bigger than log_rotate_size bytes. If size is followed by k, the size is assumed to be in kilobytes.#If the M is used, the size is in megabytes, and if G is used, the size is in gigabytes. So size 100, size 100k, size 100M and size 100G#are all valid.log_rotate_size &#x3D; 200M#Config http proxy for Clair, e.g. http:&#x2F;&#x2F;my.proxy.com:3128#Clair doesn&#39;t need to connect to harbor ui container via http proxy.http_proxy &#x3D;https_proxy &#x3D;no_proxy &#x3D; 127.0.0.1,localhost,ui#NOTES: The properties between BEGIN INITIAL PROPERTIES and END INITIAL PROPERTIES#only take effect in the first boot, the subsequent changes of these properties#should be performed on web ui#************************BEGIN INITIAL PROPERTIES************************#Email account settings for sending out password resetting emails.#Email server uses the given username and password to authenticate on TLS connections to host and act as identity.#Identity left blank to act as username.email_identity &#x3D;email_server &#x3D; smtp.mydomain.comemail_server_port &#x3D; 25email_username &#x3D; sample_admin@mydomain.comemail_password &#x3D; abcemail_from &#x3D; admin &lt;sample_admin@mydomain.com&gt;email_ssl &#x3D; falseemail_insecure &#x3D; false##The initial password of Harbor admin, only works for the first time when Harbor starts.#It has no effect after the first launch of Harbor.#Change the admin password from UI after launching Harbor.harbor_admin_password &#x3D; Harbor12345##By default the auth mode is db_auth, i.e. the credentials are stored in a local database.#Set it to ldap_auth if you want to verify a user&#39;s credentials against an LDAP server.auth_mode &#x3D; db_auth#The url for an ldap endpoint.ldap_url &#x3D; ldaps:&#x2F;&#x2F;ldap.mydomain.com#A user&#39;s DN who has the permission to search the LDAP&#x2F;AD server.#If your LDAP&#x2F;AD server does not support anonymous search, you should configure this DN and ldap_search_pwd.#ldap_searchdn &#x3D; uid&#x3D;searchuser,ou&#x3D;people,dc&#x3D;mydomain,dc&#x3D;com#the password of the ldap_searchdn#ldap_search_pwd &#x3D; password#The base DN from which to look up a user in LDAP&#x2F;ADldap_basedn &#x3D; ou&#x3D;people,dc&#x3D;mydomain,dc&#x3D;com#Search filter for LDAP&#x2F;AD, make sure the syntax of the filter is correct.#ldap_filter &#x3D; (objectClass&#x3D;person)# The attribute used in a search to match a user, it could be uid, cn, email, sAMAccountName or other attributes depending on your LDAP&#x2F;ADldap_uid &#x3D; uid#the scope to search for users, 0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREEldap_scope &#x3D; 2#Timeout (in seconds) when connecting to an LDAP Server. The default value (and most reasonable) is 5 seconds.ldap_timeout &#x3D; 5#Verify certificate from LDAP serverldap_verify_cert &#x3D; true#The base dn from which to lookup a group in LDAP&#x2F;ADldap_group_basedn &#x3D; ou&#x3D;group,dc&#x3D;mydomain,dc&#x3D;com#filter to search LDAP&#x2F;AD groupldap_group_filter &#x3D; objectclass&#x3D;group#The attribute used to name a LDAP&#x2F;AD group, it could be cn, nameldap_group_gid &#x3D; cn#The scope to search for ldap groups. 0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREEldap_group_scope &#x3D; 2#Turn on or off the self-registration featureself_registration &#x3D; on#The expiration time (in minute) of token created by token service, default is 30 minutestoken_expiration &#x3D; 30#The flag to control what users have permission to create projects#The default value &quot;everyone&quot; allows everyone to creates a project.#Set to &quot;adminonly&quot; so that only admin user can create project.project_creation_restriction &#x3D; everyone#************************END INITIAL PROPERTIES************************#######Harbor DB configuration section########The address of the Harbor database. Only need to change when using external db.db_host &#x3D; 192.168.172.10#The password for the root user of Harbor DB. Change this before any production use.db_password &#x3D; root123456#The port of Harbor database hostdb_port &#x3D; 3306#The user name of Harbor databasedb_user &#x3D; root##### End of Harbor DB configuration########The redis server address. Only needed in HA installation.#address:port[,weight,password,db_index]redis_url &#x3D; redis:6379##########Clair DB configuration#############Clair DB host address. Only change it when using an exteral DB.clair_db_host &#x3D; postgres#The password of the Clair&#39;s postgres database. Only effective when Harbor is deployed with Clair.#Please update it before deployment. Subsequent update will cause Clair&#39;s API server and Harbor unable to access Clair&#39;s database.clair_db_password &#x3D; password#Clair DB connect portclair_db_port &#x3D; 5432#Clair DB usernameclair_db_username &#x3D; postgres#Clair default databaseclair_db &#x3D; postgres##########End of Clair DB configuration#############The following attributes only need to be set when auth mode is uaa_authuaa_endpoint &#x3D; uaa.mydomain.orguaa_clientid &#x3D; iduaa_clientsecret &#x3D; secretuaa_verify_cert &#x3D; trueuaa_ca_cert &#x3D; &#x2F;path&#x2F;to&#x2F;ca.pem### Docker Registry setting ####registry_storage_provider can be: filesystem, s3, gcs, azure, etc.registry_storage_provider_name &#x3D; filesystem#registry_storage_provider_config is a comma separated &quot;key: value&quot; pairs, e.g. &quot;key1: value, key2: value2&quot;.#Refer to https:&#x2F;&#x2F;docs.docker.com&#x2F;registry&#x2F;configuration&#x2F;#storage for all available configuration.registry_storage_provider_config &#x3D;#If reload_config&#x3D;true, all settings which present in harbor.cfg take effect after prepare and restart harbor, it overwrites exsiting settings.#reload_config&#x3D;true#Regular expression to match skipped environment variables#skip_reload_env_pattern&#x3D;(^EMAIL.*)|(^LDAP.*) 修改docker-compose.yml文件暴露registry端口，否则有时会报连接被拒绝 version: &#39;2&#39;services: log: image: vmware&#x2F;harbor-log:v1.5.4 container_name: harbor-log restart: always volumes: - &#x2F;data&#x2F;harbor-log&#x2F;logs&#x2F;:&#x2F;var&#x2F;log&#x2F;docker&#x2F;:z - .&#x2F;common&#x2F;config&#x2F;log&#x2F;:&#x2F;etc&#x2F;logrotate.d&#x2F;:z ports: - 127.0.0.1:1514:10514 networks: - harbor dns_search: . registry: image: vmware&#x2F;registry-photon:v2.6.2-v1.5.4 container_name: harbor-registry restart: always volumes: - &#x2F;data&#x2F;harbor-registry:&#x2F;storage:z - .&#x2F;common&#x2F;config&#x2F;registry&#x2F;:&#x2F;etc&#x2F;registry&#x2F;:z networks: - harbor ports: - 5000:5000 dns_search: . environment: - GODEBUG&#x3D;netdns&#x3D;cgo command: [&quot;serve&quot;, &quot;&#x2F;etc&#x2F;registry&#x2F;config.yml&quot;] depends_on: - log logging: driver: &quot;json-file&quot; #options: #syslog-address: &quot;tcp:&#x2F;&#x2F;127.0.0.1:1514&quot; #tag: &quot;registry&quot; mysql: image: vmware&#x2F;harbor-db:v1.5.4 container_name: harbor-db restart: always volumes: - &#x2F;data&#x2F;harbor-mysql:&#x2F;var&#x2F;lib&#x2F;mysql:z networks: - harbor ports: - 3306:3306 dns_search: . env_file: - .&#x2F;common&#x2F;config&#x2F;db&#x2F;env depends_on: - log logging: driver: &quot;json-file&quot; #options: #syslog-address: &quot;tcp:&#x2F;&#x2F;127.0.0.1:1514&quot; #tag: &quot;mysql&quot; adminserver: image: vmware&#x2F;harbor-adminserver:v1.5.4 container_name: harbor-adminserver env_file: - .&#x2F;common&#x2F;config&#x2F;adminserver&#x2F;env restart: always volumes: - &#x2F;data&#x2F;harbor-adminserver&#x2F;config&#x2F;:&#x2F;etc&#x2F;adminserver&#x2F;config&#x2F;:z - &#x2F;data&#x2F;harbor-adminserver&#x2F;secretkey:&#x2F;etc&#x2F;adminserver&#x2F;key:z - &#x2F;data&#x2F;harbor-adminserver&#x2F;data&#x2F;:&#x2F;data&#x2F;:z networks: - harbor dns_search: . depends_on: - log logging: driver: &quot;json-file&quot; #options: #syslog-address: &quot;tcp:&#x2F;&#x2F;127.0.0.1:1514&quot; #tag: &quot;adminserver&quot; ui: image: vmware&#x2F;harbor-ui:v1.5.4 container_name: harbor-ui env_file: - .&#x2F;common&#x2F;config&#x2F;ui&#x2F;env restart: always volumes: - .&#x2F;common&#x2F;config&#x2F;ui&#x2F;app.conf:&#x2F;etc&#x2F;ui&#x2F;app.conf:z - .&#x2F;common&#x2F;config&#x2F;ui&#x2F;private_key.pem:&#x2F;etc&#x2F;ui&#x2F;private_key.pem:z - .&#x2F;common&#x2F;config&#x2F;ui&#x2F;certificates&#x2F;:&#x2F;etc&#x2F;ui&#x2F;certificates&#x2F;:z - &#x2F;data&#x2F;harbor-ui&#x2F;secretkey:&#x2F;etc&#x2F;ui&#x2F;key:z - &#x2F;data&#x2F;harbor-ui&#x2F;ca_download&#x2F;:&#x2F;etc&#x2F;ui&#x2F;ca&#x2F;:z - &#x2F;data&#x2F;harbor-ui&#x2F;psc&#x2F;:&#x2F;etc&#x2F;ui&#x2F;token&#x2F;:z networks: - harbor dns_search: . depends_on: - log - adminserver - registry logging: driver: &quot;json-file&quot; #options: #syslog-address: &quot;tcp:&#x2F;&#x2F;127.0.0.1:1514&quot; #tag: &quot;ui&quot; jobservice: image: vmware&#x2F;harbor-jobservice:v1.5.4 container_name: harbor-jobservice env_file: - .&#x2F;common&#x2F;config&#x2F;jobservice&#x2F;env restart: always volumes: - &#x2F;data&#x2F;harbor-job&#x2F;logs:&#x2F;var&#x2F;log&#x2F;jobs:z - .&#x2F;common&#x2F;config&#x2F;jobservice&#x2F;config.yml:&#x2F;etc&#x2F;jobservice&#x2F;config.yml:z networks: - harbor dns_search: . depends_on: - redis - ui - adminserver logging: driver: &quot;json-file&quot; #options: #syslog-address: &quot;tcp:&#x2F;&#x2F;127.0.0.1:1514&quot; #tag: &quot;jobservice&quot; redis: image: vmware&#x2F;redis-photon:v1.5.4 container_name: harbor-redis restart: always volumes: - &#x2F;data&#x2F;harbor-redis:&#x2F;data networks: - harbor dns_search: . depends_on: - log logging: driver: &quot;json-file&quot; #options: #syslog-address: &quot;tcp:&#x2F;&#x2F;127.0.0.1:1514&quot; #tag: &quot;redis&quot; proxy: image: vmware&#x2F;nginx-photon:v1.5.4 container_name: harbor-nginx restart: always volumes: - .&#x2F;common&#x2F;config&#x2F;nginx:&#x2F;etc&#x2F;nginx:z networks: - harbor dns_search: . ports: - 80:80 - 443:443 - 4443:4443 depends_on: - mysql - registry - ui - log logging: driver: &quot;json-file&quot; #options: #syslog-address: &quot;tcp:&#x2F;&#x2F;127.0.0.1:1514&quot; #tag: &quot;proxy&quot;networks: harbor: external: false 执行./prepare命令执行./prepare后，然后执行 cp &#x2F;data&#x2F;harbor-adminserver&#x2F;secretkey &#x2F;data&#x2F;harbor-ui&#x2F;secretkey 执行./install.sh脚本 登录查看效果 docker登录和打标签docker login 192.168.172.9:5000docker tag vmware&#x2F;harbor-migrator:v1.5.0 192.168.172.9:5000&#x2F;harbor&#x2F;harbor-migrator:v1.5.0docker push 192.168.172.9:5000&#x2F;harbor&#x2F;harbor-migrator:v1.5.0 复制效果 restful api效果","categories":[{"name":"harbor知识体系","slug":"harbor知识体系","permalink":"https://jxdw.github.io/categories/harbor%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【转载】什么是云原生","slug":"cloud_native_concept","date":"2018-10-09T13:26:11.000Z","updated":"2020-10-22T14:22:34.107Z","comments":true,"path":"2018/10/09/cloud_native_concept/","link":"","permalink":"https://jxdw.github.io/2018/10/09/cloud_native_concept/","excerpt":"","text":"","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【网络系列】docker扩展iptables实现网络隔离与通信","slug":"docker-network-basic","date":"2018-10-09T13:26:11.000Z","updated":"2020-10-24T13:11:05.961Z","comments":true,"path":"2018/10/09/docker-network-basic/","link":"","permalink":"https://jxdw.github.io/2018/10/09/docker-network-basic/","excerpt":"本文参考https:&#x2F;&#x2F;www.cnblogs.com&#x2F;foxgab&#x2F;p&#x2F;6896957.html","text":"本文参考https:&#x2F;&#x2F;www.cnblogs.com&#x2F;foxgab&#x2F;p&#x2F;6896957.html iptables的概念iptables基础概念 iptables表的分类 iptable链的走向 docker对于iptables的应用docker对iptables filter表的扩展 docker对iptables nat表的扩展 docker之后的iptables链的走向","categories":[{"name":"网络协议知识体系","slug":"网络协议知识体系","permalink":"https://jxdw.github.io/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【docker使用系列】docker1.12安装和初步使用","slug":"docker-1-12-install","date":"2018-10-07T02:51:23.000Z","updated":"2020-10-24T13:11:05.916Z","comments":true,"path":"2018/10/07/docker-1-12-install/","link":"","permalink":"https://jxdw.github.io/2018/10/07/docker-1-12-install/","excerpt":"本文背景背景最近闲着无事，准备玩一把k8s，作为核心，要升级一波docker。这次直接安装docker1.12。查了资料，docker1.12的最显著特性就是内置了docker自身的swarm调度。","text":"本文背景背景最近闲着无事，准备玩一把k8s，作为核心，要升级一波docker。这次直接安装docker1.12。查了资料，docker1.12的最显著特性就是内置了docker自身的swarm调度。 安装过程参考去年的docker 1.10安装心得,整一次1.12。 下载rpm包并安装yum install -y --nogpgcheck http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-engine&#x2F;yum&#x2F;repo&#x2F;main&#x2F;centos&#x2F;7&#x2F;Packages&#x2F;docker-engine-selinux-1.12.6-1.el7.centos.noarch.rpmyum install -y --nogpgcheck http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-engine&#x2F;yum&#x2F;repo&#x2F;main&#x2F;centos&#x2F;7&#x2F;Packages&#x2F;docker-engine-1.12.6-1.el7.centos.x86_64.rpm 修改docker的systemd文件[Unit]Description&#x3D;Docker Application Container EngineDocumentation&#x3D;https:&#x2F;&#x2F;docs.docker.comAfter&#x3D;network.target[Service]Type&#x3D;notify# the default is not to use systemd for cgroups because the delegate issues still# exists and systemd currently does not support the cgroup feature set required# for containers run by dockerEnvironmentFile&#x3D;-&#x2F;run&#x2F;flannel&#x2F;dockerExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd --storage-driver&#x3D;devicemapper --exec-opt native.cgroupdriver&#x3D;systemd -D -H tcp:&#x2F;&#x2F;0.0.0.0:2375 -H unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock --pidfile&#x3D;&#x2F;var&#x2F;run&#x2F;docker.pid ExecReload&#x3D;&#x2F;bin&#x2F;kill -s HUP $MAINPIDExecReload&#x3D;&#x2F;bin&#x2F;kill -s HUP $MAINPID# Having non-zero Limit*s causes performance problems due to accounting overhead# in the kernel. We recommend using cgroups to do container-local accounting.LimitNOFILE&#x3D;infinityLimitNPROC&#x3D;infinityLimitCORE&#x3D;infinity# Uncomment TasksMax if your systemd version supports it.# Only systemd 226 and above support this version.#TasksMax&#x3D;infinityTimeoutStartSec&#x3D;0# set delegate yes so that systemd does not reset the cgroups of docker containersDelegate&#x3D;yes# kill only the docker process, not all processes in the cgroupKillMode&#x3D;process[Install]WantedBy&#x3D;multi-user.target 这里暴露2375是为了其他的docker client调用。 修改配置文件发现/etc/sysconfig/docker不顶用了。谷歌了一番，发现配置文件目录变了/data/docker/daemon.json &#123; &quot;insecure-registries&quot;: [ &quot;10.2.1.30:5000&quot; ], &quot;registry-mirror&quot;: [ &quot;https:&#x2F;&#x2F;csokz3oi.mirror.aliyuncs.com&quot; ], &quot;graph&quot;:&quot;&#x2F;data&#x2F;docker&quot;&#125; 启动dockersystemctl restart docker.service docker操作docker1.12与1.10的区别先看docker –help对比果然是多了三个关键字:docker nodedocker swarmdocker service docker1.12 实操先看docker help和docker.hub.com。 docker login命令作用:登录私有镜像仓库 docker login 10.2.1.30:5000 输入账号和密码，即可提示登录成功。 docker tag命令作用:对docker镜像打标签命令使用: docker tag anjia0532&#x2F;google-containers.kubernetes-dashboard-amd64:v1.6.3 10.2.1.30:5000&#x2F;anjia0532&#x2F;kubernetes-dashboard-amd64:v1.6.3 docker pull这个命令不需要多说了，从中央仓库或者私有仓库拉取镜像 docker push命令作用：向仓库推送镜像文件命令使用: docker push 10.2.1.30:5000&#x2F;anjia0532&#x2F;kubernetes-dashboard-amd64:v1.6.3 至于docker swarm模式，有时间再了解。","categories":[{"name":"docker/k8s知识体系","slug":"docker-k8s知识体系","permalink":"https://jxdw.github.io/categories/docker-k8s%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【prometheus知识体系】基于elasticsearch的日志监控方案(改进版)","slug":"elasticsearch-log-metrics","date":"2018-10-01T06:29:46.000Z","updated":"2020-10-22T14:32:58.532Z","comments":true,"path":"2018/10/01/elasticsearch-log-metrics/","link":"","permalink":"https://jxdw.github.io/2018/10/01/elasticsearch-log-metrics/","excerpt":"","text":"","categories":[{"name":"prometheus知识体系","slug":"prometheus知识体系","permalink":"https://jxdw.github.io/categories/prometheus%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【go标准库系列】go 1.11初步体验","slug":"golang_1.11_release","date":"2018-09-28T11:10:08.000Z","updated":"2020-10-22T14:28:31.193Z","comments":true,"path":"2018/09/28/golang_1.11_release/","link":"","permalink":"https://jxdw.github.io/2018/09/28/golang_1.11_release/","excerpt":"背景学过java的朋友都知道，java成功的关键，除了生态、依赖管理也是一个很重要的点。go如果不能解决包管理的问题，做业务系统开发，是比较难的事情。之前没有大量投入时间在golang上面，很大的一个原因是：各种搭梯子的go get，拉取依赖包。各种痛苦","text":"背景学过java的朋友都知道，java成功的关键，除了生态、依赖管理也是一个很重要的点。go如果不能解决包管理的问题，做业务系统开发，是比较难的事情。之前没有大量投入时间在golang上面，很大的一个原因是：各种搭梯子的go get，拉取依赖包。各种痛苦 正题最近的golang 1.11版本开始让我觉得有推广商用的可能性了，因为官方引入了一个概念:module。这也证明了之前的投入没有白费。之前的痛苦，官方终于下定决心解决了。找了很久，发现，墙的问题，已经有解决办法了。","categories":[{"name":"go知识体系","slug":"go知识体系","permalink":"https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【go标准库系列】go语言标准库reflect反射学习","slug":"golang-reflect-learn","date":"2018-09-11T10:06:47.000Z","updated":"2020-10-22T14:28:16.617Z","comments":true,"path":"2018/09/11/golang-reflect-learn/","link":"","permalink":"https://jxdw.github.io/2018/09/11/golang-reflect-learn/","excerpt":"","text":"源码package mainimport ( &quot;flag&quot; &quot;fmt&quot; &quot;net&#x2F;http&quot; &quot;reflect&quot;)type GoService struct &#123;&#125;func (G *GoService) HttpServer(port string)&#123; http.HandleFunc(&quot;&#x2F;&quot;, func(responseWriter http.ResponseWriter, request *http.Request) &#123; responseWriter.Write([]byte(&quot;hello word&quot;)) &#125;) http.ListenAndServe(&quot;:&quot;+port,nil)&#125;func main()&#123; cmd:&#x3D;flag.String(&quot;cmd&quot;,&quot;&quot;,&quot;cmd is a string indecated what server&quot;) arg:&#x3D;flag.String(&quot;args&quot;,&quot;&quot;,&quot;p is a string ,parameter for service&quot;) flag.Parse() if len(*cmd)&#x3D;&#x3D;0 &#123; flag.Usage() return &#125; in :&#x3D;make([]reflect.Value,0) if len(*arg)!&#x3D;0 &#123; in&#x3D;append(in,reflect.ValueOf(*arg)) &#125; &#x2F;&#x2F;指定类 service:&#x3D;&amp;GoService&#123;&#125; f:&#x3D;reflect.ValueOf(service).MethodByName(*cmd) if !f.IsValid() &#123; return &#125; f.Call(in) &#x2F;&#x2F;u:&#x3D;User&#123;1,&quot;golang&quot;,12&#125; &#x2F;&#x2F;Info(u)&#125; 编译go build -o bin&#x2F;runt.exe main.go 执行cd binrunt.exe -cmd&#x3D;HttpServer -args&#x3D;8091","categories":[{"name":"go知识体系","slug":"go知识体系","permalink":"https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【redis使用系列】单节点安装redis 3.2版本集群","slug":"redis-cluster-install","date":"2018-08-25T06:09:47.000Z","updated":"2020-10-22T14:34:17.423Z","comments":true,"path":"2018/08/25/redis-cluster-install/","link":"","permalink":"https://jxdw.github.io/2018/08/25/redis-cluster-install/","excerpt":"本文参考资料https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_37595946&#x2F;article&#x2F;details&#x2F;77800147https:&#x2F;&#x2F;blog.csdn.net&#x2F;ahzxj2012&#x2F;article&#x2F;details&#x2F;73468119https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;854d702e6153","text":"本文参考资料https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_37595946&#x2F;article&#x2F;details&#x2F;77800147https:&#x2F;&#x2F;blog.csdn.net&#x2F;ahzxj2012&#x2F;article&#x2F;details&#x2F;73468119https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;854d702e6153 背景交代公司有些没权限的机器又抽风，于是想把部分服务放到有权限的机器上。比如redis cluster。 安装规划采用docker安装redis node。由redis-trib.rb构建集群。 安装过程docker安装redisnode准备配置文件port 6381bind 10.2.1.31cluster-enabled yescluster-config-file nodes.confcluster-node-timeout 5000appendonly yes 拉取镜像并启动docker pull redis:3.2.0docker run --net&#x3D;host -m 100m --name&#x3D;redis1 -v &#96;pwd&#96;&#x2F;redis1.conf:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf -d redis:3.2.0 redis-server &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.confdocker run --net&#x3D;host -m 100m --name&#x3D;redis2 -v &#96;pwd&#96;&#x2F;redis2.conf:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf -d redis:3.2.0 redis-server &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.confdocker run --net&#x3D;host -m 100m --name&#x3D;redis3 -v &#96;pwd&#96;&#x2F;redis3.conf:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf -d redis:3.2.0 redis-server &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.confdocker run --net&#x3D;host -m 100m --name&#x3D;redis4 -v &#96;pwd&#96;&#x2F;redis4.conf:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf -d redis:3.2.0 redis-server &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.confdocker run --net&#x3D;host -m 100m --name&#x3D;redis5 -v &#96;pwd&#96;&#x2F;redis5.conf:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf -d redis:3.2.0 redis-server &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.confdocker run --net&#x3D;host -m 100m --name&#x3D;redis6 -v &#96;pwd&#96;&#x2F;redis6.conf:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf -d redis:3.2.0 redis-server &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf 下载redis源码并解压执行下面的命令前，请确保ruby版本已经升级到2.2.0。ps:yum install ruby时，centos只会安装ruby2.0版本。 wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-3.2.1.tar.gztar xvf redis-3.2.1.tar.gzmv redis-3.2.1 redisruby redis&#x2F;src&#x2F;redis-trib.rb create --replicas 1 10.2.1.31:6381 10.2.1.31:6382 10.2.1.31:6383 10.2.1.31:6384 10.2.1.31:6385 10.2.1.31:6386 顺利的话，能看到如下信息： &gt;&gt;&gt; Creating cluster&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...Using 3 masters:10.2.1.31:638110.2.1.31:638210.2.1.31:6383Adding replica 10.2.1.31:6384 to 10.2.1.31:6381Adding replica 10.2.1.31:6385 to 10.2.1.31:6382Adding replica 10.2.1.31:6386 to 10.2.1.31:6383M: cb4258f0a219065492d519ebf4417833c397718a 10.2.1.31:6381 slots:0-5460 (5461 slots) masterM: 5e1c70538ec4ddd28b0dbc79bce491ac1d25e452 10.2.1.31:6382 slots:5461-10922 (5462 slots) masterM: 31c913e81bbb994e843d8874d8063debd2e82363 10.2.1.31:6383 slots:10923-16383 (5461 slots) masterS: 34750039ae8d7010a06a7691b95ae81f48e44cb9 10.2.1.31:6384 replicates cb4258f0a219065492d519ebf4417833c397718aS: 48f5de18c92ebdc277c4eaee9d73ea6f1cc91c8e 10.2.1.31:6385 replicates 5e1c70538ec4ddd28b0dbc79bce491ac1d25e452S: 1a349016ed6f326bb4118ec94951301eb3ca7815 10.2.1.31:6386 replicates 31c913e81bbb994e843d8874d8063debd2e82363Can I set the above configuration? (type &#39;yes&#39; to accept): yes&gt;&gt;&gt; Nodes configuration updated&gt;&gt;&gt; Assign a different config epoch to each node&gt;&gt;&gt; Sending CLUSTER MEET messages to join the clusterWaiting for the cluster to join...&gt;&gt;&gt; Performing Cluster Check (using node 10.2.1.31:6381)M: cb4258f0a219065492d519ebf4417833c397718a 10.2.1.31:6381 slots:0-5460 (5461 slots) masterM: 5e1c70538ec4ddd28b0dbc79bce491ac1d25e452 10.2.1.31:6382 slots:5461-10922 (5462 slots) masterM: 31c913e81bbb994e843d8874d8063debd2e82363 10.2.1.31:6383 slots:10923-16383 (5461 slots) masterM: 34750039ae8d7010a06a7691b95ae81f48e44cb9 10.2.1.31:6384 slots: (0 slots) master replicates cb4258f0a219065492d519ebf4417833c397718aM: 48f5de18c92ebdc277c4eaee9d73ea6f1cc91c8e 10.2.1.31:6385 slots: (0 slots) master replicates 5e1c70538ec4ddd28b0dbc79bce491ac1d25e452M: 1a349016ed6f326bb4118ec94951301eb3ca7815 10.2.1.31:6386 slots: (0 slots) master replicates 31c913e81bbb994e843d8874d8063debd2e82363[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check for open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered. 但是一般没有那么顺利。 常见错误以及处理出现”kernel_require.rb:55:in `require’: cannot load suc”解决办法：gem install redis 出现”报错redis requires Ruby version -= 2.2.2”解决办法：升级ruby版本。 curl -L get.rvm.io | bash -s stablesource &#x2F;usr&#x2F;local&#x2F;rvm&#x2F;scripts&#x2F;rvmrvm list knownrvm install 2.4.0rvm remove 2.0.0ruby --versiongem install redis 然后执行:ruby redis/src/redis-trib.rb create –replicas 1 10.2.1.31:6381 10.2.1.31:6382 10.2.1.31:6383 10.2.1.31:6384 10.2.1.31:6385 10.2.1.31:6386就可以看到上面的提示信息了。 ruby版本失效解决办法：rvm use ruby-2.4.0 体验","categories":[{"name":"redis知识体系","slug":"redis知识体系","permalink":"https://jxdw.github.io/categories/redis%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【go标准库系列】go语言模拟curl将json发送到httpserver","slug":"go-post-json-file-to-http-server","date":"2018-08-20T11:17:59.000Z","updated":"2020-10-22T14:27:53.585Z","comments":true,"path":"2018/08/20/go-post-json-file-to-http-server/","link":"","permalink":"https://jxdw.github.io/2018/08/20/go-post-json-file-to-http-server/","excerpt":"业务背景最近一个需求：需要将某些数据塞到数据。如果会ui，搞个前后端分离，这个需求很简单。不过我的前端技术实在拿不出手。而我又想固化成程序(造轮子、实现curl命令的部分功能)。不说了，只能直接上源码。","text":"业务背景最近一个需求：需要将某些数据塞到数据。如果会ui，搞个前后端分离，这个需求很简单。不过我的前端技术实在拿不出手。而我又想固化成程序(造轮子、实现curl命令的部分功能)。不说了，只能直接上源码。 package mainimport (&quot;fmt&quot;&quot;os&quot;&quot;strings&quot;&quot;net&#x2F;http&quot;&quot;io&#x2F;ioutil&quot;)func main() &#123;url :&#x3D; os.Args[1]method :&#x3D; &quot;POST&quot;payload ,err:&#x3D; ioutil.ReadFile(&quot;post.json&quot;)client :&#x3D; &amp;http.Client &#123;&#125;reqdata:&#x3D;string(payload)fmt.Println(&quot;request request&quot;,reqdata)req, err :&#x3D; http.NewRequest(method, url, strings.NewReader(reqdata))if err !&#x3D; nil &#123;fmt.Println(err)&#125;req.Header.Add(&quot;Content-Type&quot;, &quot;application&#x2F;json&quot;)res, err :&#x3D; client.Do(req)defer res.Body.Close()body, err :&#x3D; ioutil.ReadAll(res.Body)fmt.Println(string(body))&#125;","categories":[{"name":"go知识体系","slug":"go知识体系","permalink":"https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【prometheus使用系列】【转载】打造高逼格、可视化的Docker容器监控系统平台","slug":"docker-monitor-tech","date":"2018-08-14T12:03:07.000Z","updated":"2020-10-22T14:32:48.557Z","comments":true,"path":"2018/08/14/docker-monitor-tech/","link":"","permalink":"https://jxdw.github.io/2018/08/14/docker-monitor-tech/","excerpt":"原文地址https://mp.weixin.qq.com/s?__biz=MzI0MDQ4MTM5NQ==&amp;mid=2247486129&amp;idx=1&amp;sn=986d170f115071cbe676d211a0458008&amp;chksm=e91b6fadde6ce6bb271dedda23acef2c031ee3bdd7d9e2034ceab9a9e2c65f2caa98932e9491&amp;scene=38#wechat_redirect","text":"原文地址https://mp.weixin.qq.com/s?__biz=MzI0MDQ4MTM5NQ==&amp;mid=2247486129&amp;idx=1&amp;sn=986d170f115071cbe676d211a0458008&amp;chksm=e91b6fadde6ce6bb271dedda23acef2c031ee3bdd7d9e2034ceab9a9e2c65f2caa98932e9491&amp;scene=38#wechat_redirect 笔记版","categories":[{"name":"prometheus知识体系","slug":"prometheus知识体系","permalink":"https://jxdw.github.io/categories/prometheus%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【centos使用系列】安装nodejs并初步使用","slug":"centos7-install-nodejs","date":"2018-08-12T08:37:48.000Z","updated":"2020-10-24T13:11:05.759Z","comments":true,"path":"2018/08/12/centos7-install-nodejs/","link":"","permalink":"https://jxdw.github.io/2018/08/12/centos7-install-nodejs/","excerpt":"node与npm介绍","text":"node与npm介绍 centos下安装nodejs下载执行脚本curl -sL https://rpm.nodesource.com/setup_10.x | bash - 安装依赖yum install gcc-c++ make 安装nodejsyum install -y nodejs 初步使用node帮助命令 npm帮助命令 npm安装命令 第一个nodejs程序var http&#x3D;require(&#39;http&#39;)http.createServer(function(req,res)&#123; res.writeHead(200,&#123;&#39;Content-type&#39;:&#39;test&#x2F;plain&#39;&#125;); res.end(&#39;hello,wordl\\n&#39;);&#125;).listen(1337,&#39;127.0.0.1&#39;);console.log(&#39;server running at http:&#x2F;&#x2F;127.0.0.1:1337&#39;);","categories":[{"name":"centos知识体系","slug":"centos知识体系","permalink":"https://jxdw.github.io/categories/centos%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【elastic-job底层实现系列】elastic-job-lite使用和源码初步分析","slug":"elastic-job-basic-use","date":"2018-07-29T14:20:03.000Z","updated":"2020-10-22T14:40:13.091Z","comments":true,"path":"2018/07/29/elastic-job-basic-use/","link":"","permalink":"https://jxdw.github.io/2018/07/29/elastic-job-basic-use/","excerpt":"elastic-job使用elasticjob概念模型elastic-job的概念模型主要分为5类 注册中心bean(ZookeeperRegistryCenter) job配置bean 业务逻辑job(需要实现simpleJob/DataJob) job事件配置(需要写入到存储中去) job调度器bean","text":"elastic-job使用elasticjob概念模型elastic-job的概念模型主要分为5类 注册中心bean(ZookeeperRegistryCenter) job配置bean 业务逻辑job(需要实现simpleJob/DataJob) job事件配置(需要写入到存储中去) job调度器bean 开发者显示调用jobscheduler的init方法（或者采用spring注解，初始化init方法），进入到quartz调度。 elastic-job使用ZookeeperRegistryCenter配置LiteJobConfiguration配置elastic-job源码分析ZookeeperRegistryCenter封装cutor，调用zookeeper。 LiteJobConfiguration执行逻辑的元数据：类名、分片数量。 JobEventConfiguration数据源封装，结果最终会记录入库 JobScheduler这是核心类，作用：任务调度 SpringJobScheduler简单job的任务调度器。 LiteJob继承quartz的job接口，实现execute方法。并调用任务执行工厂类，实例化任务执行器。 AbstractJobExecutor任务执行器。执行job。比如典型的实现类simplejobExecutor。","categories":[{"name":"job调度知识体系","slug":"job调度知识体系","permalink":"https://jxdw.github.io/categories/job%E8%B0%83%E5%BA%A6%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【redis底层实现系列】redis常用面试题问答","slug":"redis_interview_knowledge","date":"2018-07-21T09:07:03.000Z","updated":"2020-10-22T14:35:04.761Z","comments":true,"path":"2018/07/21/redis_interview_knowledge/","link":"","permalink":"https://jxdw.github.io/2018/07/21/redis_interview_knowledge/","excerpt":"1.redis的5种基本类型string、list、hash、set、zset的使用场景String最常用，可以用在各种cache的key。List可以用作消息队列。Set可以用来取交集。Hash可以用来存储对象(比如用户)的各种属性。zset可以用来做排行榜","text":"1.redis的5种基本类型string、list、hash、set、zset的使用场景String最常用，可以用在各种cache的key。List可以用作消息队列。Set可以用来取交集。Hash可以用来存储对象(比如用户)的各种属性。zset可以用来做排行榜 2.Set的常用命令set、append、get、strlen、keys、scan、object encoding。 3.String 类型对象的底层实现string 底层实现有三种实现方式有三种实现方式:int，embstr，raw 字符串内容可转为 long，采用 int 类型； 长度&lt;39（3.2版本前39,3.2版本后分界线44） 用 embstr; 其他用 raw。SDS是Redis自己构建的一种简单动态字符串的抽象类型，并将 SDS 作为 Redis 的默认字符串表示 4.list的常用命令:lpush、lpop、rpush、rpop、llen、keys、scan、object encoding 5.list类型对象的底层实现list底层实现有三种实现方式:linkedlist、ziplist、quicklist。 双端链表。 1.双端链表便于在表的两端进行 push 和 pop 操作，但是它的内存开销比较大； 2.双端链表每个节点上除了要保存数据之外，还要额外保存两个指针； 3.双端链表的各个节点是单独的内存块，地址不连续，节点多了容易产生内存碎片； 压缩列表。 1.ziplist 由于是一整块连续内存，所以存储效率很高； 2.ziplist 不利于修改操作，每次数据变动都会引发一次内存的 realloc； 3.当 ziplist 长度很长的时候，一次realloc可能会导致大批量的数据拷贝，进一步降低性能； quicklist。1.空间效率和时间效率的折中；2.结合了双端链表和压缩列表的优点； 6.hash常用命令有哪些:hset、hmse、hget、hmget、hlen、hscan(HSCAN website3 0 COUNT 10000)、HKEYS。 7.hash类型的对象的底层实现底层实现有2种实现方式:ziplist、hashtable。 当哈希对象可以同时满足以下两个条件时， 哈希对象使用 ziplist 编码 a.哈希对象保存的所有键值对的键和值的字符串长度都小于 64 字节； b.哈希对象保存的键值对数量小于512个； 不能满足这两个条件的哈希对象需要使用 hashtable 编码。 注意：这两个条件的上限值是可以修改的具体请看配置文件中关于 hash-max-ziplist-value 选项和 hash-max-ziplist-entries 选项的说明。对于使用 ziplist 编码的列表对象来说， 当使用 ziplist 编码所需的两个条件的任意一个不能被满足时， 对象的编码转换操作就会被执行： 原本保存在压缩列表里的所有键值对都会被转移并保存到字典里面， 对象的编码也会从 ziplist 变为 hashtable 。 8.set的常用命令:sadd、smembers(次之)、scard、sscan(SSCAN set01 0 COUNT 10000)(优先)、sinter(取交集)、SMOVE(SMOVE songs my_songs &quot;Believe Me&quot;) 9.集合set的底层实现,集合对象的编码可以是 intset 或者 hashtable。 intset 编码的集合对象使用整数集合作为底层实现， 集合对象包含的所有元素都被保存在整数集合里面。当集合对象可以同时满足以下两个条件时， 对象使用 intset 编码：1.集合对象保存的所有元素都是整数值；2.集合对象保存的元素数量不超过 512 个； 不能满足这两个条件的集合对象需要使用 hashtable 编码。 注意 : 第二个条件的上限值是可以修改的， 具体请看配置文件中关于 set-max-intset-entries 选项的说明。 对于使用 intset 编码的集合对象来说， 当使用 intset 编码所需的两个条件的任意一个不能被满足时， 对象的编码转换操作就会被执行：原本保存在整数集合中的所有元素都会被转移并保存到字典里面， 并且对象的编码也会从 intset 变为 hashtable。 10.zset常用命令:zadd、zcard（第1步）、zscan（第2步，优先）、ZCOUNT、ZRANGE（第2步次之zrange key start stop） 11.有序集合zset的底层实现实现有两种:ziplist、skiplist。 当有序集合对象可以同时满足以下两个条件时， 对象使用 ziplist 编码：a.有序集合保存的元素数量小于 128 个b.有序集合保存的所有元素成员的长度都小于 64 字节； 不能满足以上两个条件的有序集合对象将使用 skiplist 编码。","categories":[{"name":"redis知识体系","slug":"redis知识体系","permalink":"https://jxdw.github.io/categories/redis%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【mysql知识体系】mysql线程问题引申出来的文章","slug":"mysql-percona-server-5-7-10","date":"2018-06-30T09:02:30.000Z","updated":"2020-10-22T14:36:00.141Z","comments":true,"path":"2018/06/30/mysql-percona-server-5-7-10/","link":"","permalink":"https://jxdw.github.io/2018/06/30/mysql-percona-server-5-7-10/","excerpt":"在之前的文章提到：mysql server处理客户端请求的整个过程 疑惑一直在想，mysql到底起了多少个线程，直到看到了2篇文章：https://cloud.tencent.com/developer/article/1148440","text":"在之前的文章提到：mysql server处理客户端请求的整个过程 疑惑一直在想，mysql到底起了多少个线程，直到看到了2篇文章：https://cloud.tencent.com/developer/article/1148440 其中核心观点截图 实操安装验证","categories":[{"name":"mysql知识体系","slug":"mysql知识体系","permalink":"https://jxdw.github.io/categories/mysql%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【java实现微服务架构系列】对oauth2技术的简单理解","slug":"oauth2-technologies-understanding","date":"2018-06-21T12:55:27.000Z","updated":"2020-10-22T14:24:48.495Z","comments":true,"path":"2018/06/21/oauth2-technologies-understanding/","link":"","permalink":"https://jxdw.github.io/2018/06/21/oauth2-technologies-understanding/","excerpt":"","text":"","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【mysql底层实现系列】(转载)mysql服务端架构和配置文件解读","slug":"mysql-server-architecture","date":"2018-06-20T14:02:30.000Z","updated":"2020-10-22T14:36:04.024Z","comments":true,"path":"2018/06/20/mysql-server-architecture/","link":"","permalink":"https://jxdw.github.io/2018/06/20/mysql-server-architecture/","excerpt":"原文地址https://blog.csdn.net/hguisu/article/details/7106342","text":"原文地址https://blog.csdn.net/hguisu/article/details/7106342 截图版","categories":[{"name":"mysql知识体系","slug":"mysql知识体系","permalink":"https://jxdw.github.io/categories/mysql%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【java实现微服务架构系列】(转载)oauth2介绍","slug":"oauth2-introduce","date":"2018-06-16T07:02:30.000Z","updated":"2020-10-22T14:24:40.514Z","comments":true,"path":"2018/06/16/oauth2-introduce/","link":"","permalink":"https://jxdw.github.io/2018/06/16/oauth2-introduce/","excerpt":"原文地址:https://zhuanlan.zhihu.com/p/30720675","text":"原文地址:https://zhuanlan.zhihu.com/p/30720675","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【zipkin/jaeger使用系列】zipkin与thrift结合进行接口监控","slug":"trace-zipkin_rpc_example","date":"2018-06-09T03:02:34.000Z","updated":"2020-10-22T14:21:43.637Z","comments":true,"path":"2018/06/09/trace-zipkin_rpc_example/","link":"","permalink":"https://jxdw.github.io/2018/06/09/trace-zipkin_rpc_example/","excerpt":"#参考资料 http:&#x2F;&#x2F;blog.mozhu.org&#x2F;2017&#x2F;11&#x2F;11&#x2F;zipkin&#x2F;zipkin-2.html","text":"#参考资料 http:&#x2F;&#x2F;blog.mozhu.org&#x2F;2017&#x2F;11&#x2F;11&#x2F;zipkin&#x2F;zipkin-2.html 进入正题添加maven依赖&lt;dependency&gt; &lt;groupId&gt;io.zipkin.brave&lt;&#x2F;groupId&gt; &lt;artifactId&gt;brave&lt;&#x2F;artifactId&gt; &lt;version&gt;5.0.0&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.zipkin.reporter2&lt;&#x2F;groupId&gt; &lt;artifactId&gt;zipkin-reporter&lt;&#x2F;artifactId&gt; &lt;version&gt;2.7.0&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;io..reporter2&#x2F;-sender-okhttp3 --&gt;&lt;dependency&gt; &lt;groupId&gt;io.zipkin.reporter2&lt;&#x2F;groupId&gt; &lt;artifactId&gt;zipkin-sender-okhttp3&lt;&#x2F;artifactId&gt; &lt;version&gt;2.7.0&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt; 配置文件(用于初始化)package com.jxdw.apigateway.config;import brave.Tracer;import brave.Tracing;import brave.propagation.B3Propagation;import brave.propagation.ExtraFieldPropagation;import org.springframework.beans.factory.InitializingBean;import org.springframework.stereotype.Component;import zipkin2.codec.SpanBytesEncoder;import zipkin2.reporter.AsyncReporter;import zipkin2.reporter.Sender;import zipkin2.reporter.okhttp3.OkHttpSender;import java.util.concurrent.TimeUnit;@Componentpublic class TracerConfig implements InitializingBean &#123; private static Tracer tracer; public static Tracer getTracer()&#123; return tracer; &#125; @Override public void afterPropertiesSet() throws Exception &#123; Sender sender&#x3D; OkHttpSender.create(&quot;http:&#x2F;&#x2F;192.168.172.6:9411&#x2F;api&#x2F;v2&#x2F;spans&quot;); AsyncReporter asyncReporter&#x3D;AsyncReporter.builder(sender).closeTimeout(500, TimeUnit.MILLISECONDS).build(SpanBytesEncoder.JSON_V2); Tracing tracing&#x3D; Tracing.newBuilder().localServiceName(&quot;xiaogang_api&quot;).spanReporter(asyncReporter) .propagationFactory(ExtraFieldPropagation.newFactory(B3Propagation.FACTORY,&quot;user-name&quot;)).build(); tracer&#x3D;tracing.tracer(); &#125;&#125; 嵌入到使用的rpc框架入口（多服务共有一个端口）package com.jxdw.apigateway.thrift;import brave.Span;import com.jxdw.apigateway.config.TracerConfig;import org.apache.thrift.TException;import org.apache.thrift.TProcessor;import org.apache.thrift.protocol.TMessage;import org.apache.thrift.protocol.TProtocol;import org.apache.thrift.protocol.TProtocolDecorator;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.HashMap;import java.util.Map;public class MyTMutiplexedProcessor implements TProcessor &#123; private static final Logger logger &#x3D; LoggerFactory.getLogger(ThriftPoolServerStartThread.class); private final Map&lt;String, TProcessor&gt; SERVICE_PROCESSOR_MAP &#x3D; new HashMap(); public void registerProcessor(String serviceName, TProcessor processor) &#123; this.SERVICE_PROCESSOR_MAP.put(serviceName, processor); &#125; @Override public boolean process(TProtocol inProtocol, TProtocol outProtocol1) throws TException &#123; TMessage message &#x3D; inProtocol.readMessageBegin(); logger.info(&quot;service name &#123;&#125;&quot;,message.name); if (message.type !&#x3D; 1 &amp;&amp; message.type !&#x3D; 4) &#123; throw new TException(&quot;This should not have happened!?&quot;); &#125; else &#123; int index &#x3D; message.name.indexOf(&quot;:&quot;); if (index &lt; 0) &#123; throw new TException(&quot;Service name not found in message name: &quot; + message.name + &quot;. Did you &quot; + &quot;forget to use a TMultiplexProtocol in your client?&quot;); &#125; else &#123; String serviceName &#x3D; message.name.substring(0, index); TProcessor actualProcessor &#x3D; (TProcessor)this.SERVICE_PROCESSOR_MAP.get(serviceName); if (actualProcessor &#x3D;&#x3D; null) &#123; throw new TException(&quot;Service name not found: &quot; + serviceName + &quot;. Did you forget &quot; + &quot;to call registerProcessor()?&quot;); &#125; else &#123; logger.info(&quot;rpc start&quot;); TMessage standardMessage &#x3D; new TMessage(message.name.substring(serviceName.length() + &quot;:&quot;.length()), message.type, message.seqid); Span span&#x3D;TracerConfig.getTracer().newTrace().name(message.name.substring(serviceName.length() + &quot;:&quot;.length())).start(); boolean result&#x3D;actualProcessor.process(new MyTMutiplexedProcessor.StoredMessageProtocol(inProtocol, standardMessage), outProtocol1); span.finish(); logger.info(&quot;rpc end&quot;); return result; &#125; &#125; &#125; &#125; private static class StoredMessageProtocol extends TProtocolDecorator &#123; TMessage messageBegin; public StoredMessageProtocol(TProtocol protocol, TMessage messageBegin) &#123; super(protocol); this.messageBegin &#x3D; messageBegin; &#125; public TMessage readMessageBegin() throws TException &#123; return this.messageBegin; &#125; &#125;&#125; 效果 题外话以前的技术选型做的有点草率，thrift这个框架可定制化的地方不是很多。","categories":[{"name":"zipkin/jaeger知识体系","slug":"zipkin-jaeger知识体系","permalink":"https://jxdw.github.io/categories/zipkin-jaeger%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【zipkin/jaeger使用系列】zipkin的基本概念和初步体验","slug":"trace-zipkin-install","date":"2018-05-26T03:02:34.000Z","updated":"2020-10-22T14:21:36.802Z","comments":true,"path":"2018/05/26/trace-zipkin-install/","link":"","permalink":"https://jxdw.github.io/2018/05/26/trace-zipkin-install/","excerpt":"参考文档https:&#x2F;&#x2F;blog.csdn.net&#x2F;apei830&#x2F;article&#x2F;details&#x2F;78722168","text":"参考文档https:&#x2F;&#x2F;blog.csdn.net&#x2F;apei830&#x2F;article&#x2F;details&#x2F;78722168 概念与协议协议概念英文版(spring官网) 概念中文版 Span基本工作单元，一次链路调用（可以是RPC，DB等没有特定的限制）创建一个span，通过一个64位ID标识它，span通过还有其他的数据，例如描述信息，时间戳，key-value对的（Annotation）tag信息，parent-id等，其中parent-id可以表示span调用链路来源，通俗的理解span就是一次请求信息。 Trace类似于树结构的Span集合，表示一条调用链路（一次端到端的完整请求），存在唯一标识，即TraceId。 Annotationspan的注解，用来记录请求特定事件相关信息（例如时间），通常包含四个注解信息：cs:Client Start，表示客户端发起请求sr:Server Receive，表示服务端收到请求ss:Server Send，表示服务端完成处理，并将结果发送给客户端cr:Client Received，表示客户端获取到服务端返回信息 BinaryAnnotation：提供一些额外信息，一般以key-value对出现 传输协议http传输 传输的数据（V2版本）存储到es的document的_source字段 &quot;_source&quot;: &#123; &quot;traceId&quot;: &quot;388c003cbf4d978e&quot;, &quot;duration&quot;: 50735, &quot;remoteEndpoint&quot;: &#123; &quot;ipv4&quot;: &quot;192.168.128.57&quot;, &quot;port&quot;: 12497 &#125;, &quot;shared&quot;: true, &quot;localEndpoint&quot;: &#123; &quot;serviceName&quot;: &quot;serviceb&quot;, &quot;ipv4&quot;: &quot;192.168.128.57&quot; &#125;, &quot;timestamp_millis&quot;: 1527308495000, &quot;kind&quot;: &quot;SERVER&quot;, &quot;name&quot;: &quot;get &#x2F;call&#x2F;&#123;id&#125;&quot;, &quot;id&quot;: &quot;c7e7ea03cfaf7108&quot;, &quot;parentId&quot;: &quot;388c003cbf4d978e&quot;, &quot;timestamp&quot;: 1527308495000715, &quot;tags&quot;: &#123; &quot;http.method&quot;: &quot;GET&quot;, &quot;http.path&quot;: &quot;&#x2F;call&#x2F;abcd&quot;, &quot;mvc.controller.class&quot;: &quot;UserController&quot;, &quot;mvc.controller.method&quot;: &quot;callHome&quot; &#125;&#125; 架构图 主要包括四个模块 Collector 接收或收集各应用传输的数据 Storage 存储接受或收集过来的数据，当前支持Memory，MySQL，Cassandra，ElasticSearch等，默认存储在内存中。 API（Query） 负责查询Storage中存储的数据，提供简单的JSON API获取数据，主要提供给web UI使用 Web 提供简单的web界面 服务端安装配置mysql存储mysql脚本CREATE TABLE IF NOT EXISTS _spans ( trace_id_high BIGINT NOT NULL DEFAULT 0 COMMENT ‘If non zero, this means the trace uses 128 bit traceIds instead of 64 bit’, trace_id BIGINT NOT NULL, id BIGINT NOT NULL, name VARCHAR(255) NOT NULL, remote_service_name VARCHAR(255), parent_id BIGINT, debug BIT(1), start_ts BIGINT COMMENT ‘Span.timestamp(): epoch micros used for endTs query and to implement TTL’, duration BIGINT COMMENT ‘Span.duration(): micros used for minDuration and maxDuration query’, PRIMARY KEY (trace_id_high, trace_id, id)) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci; ALTER TABLE _spans ADD INDEX(trace_id_high, trace_id) COMMENT ‘for getTracesByIds’;ALTER TABLE _spans ADD INDEX(name) COMMENT ‘for getTraces and getSpanNames’;ALTER TABLE _spans ADD INDEX(remote_service_name) COMMENT ‘for getTraces and getRemoteServiceNames’;ALTER TABLE _spans ADD INDEX(start_ts) COMMENT ‘for getTraces ordering and range’; CREATE TABLE IF NOT EXISTS _annotations ( trace_id_high BIGINT NOT NULL DEFAULT 0 COMMENT ‘If non zero, this means the trace uses 128 bit traceIds instead of 64 bit’, trace_id BIGINT NOT NULL COMMENT ‘coincides with _spans.trace_id’, span_id BIGINT NOT NULL COMMENT ‘coincides with _spans.id’, a_key VARCHAR(255) NOT NULL COMMENT ‘BinaryAnnotation.key or Annotation.value if type == -1’, a_value BLOB COMMENT ‘BinaryAnnotation.value(), which must be smaller than 64KB’, a_type INT NOT NULL COMMENT ‘BinaryAnnotation.type() or -1 if Annotation’, a_timestamp BIGINT COMMENT ‘Used to implement TTL; Annotation.timestamp or _spans.timestamp’, endpoint_ipv4 INT COMMENT ‘Null when Binary/Annotation.endpoint is null’, endpoint_ipv6 BINARY(16) COMMENT ‘Null when Binary/Annotation.endpoint is null, or no IPv6 address’, endpoint_port SMALLINT COMMENT ‘Null when Binary/Annotation.endpoint is null’, endpoint_service_name VARCHAR(255) COMMENT ‘Null when Binary/Annotation.endpoint is null’) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci; ALTER TABLE _annotations ADD UNIQUE KEY(trace_id_high, trace_id, span_id, a_key, a_timestamp) COMMENT ‘Ignore insert on duplicate’;ALTER TABLE _annotations ADD INDEX(trace_id_high, trace_id, span_id) COMMENT ‘for joining with _spans’;ALTER TABLE _annotations ADD INDEX(trace_id_high, trace_id) COMMENT ‘for getTraces/ByIds’;ALTER TABLE _annotations ADD INDEX(endpoint_service_name) COMMENT ‘for getTraces and getServiceNames’;ALTER TABLE _annotations ADD INDEX(a_type) COMMENT ‘for getTraces and autocomplete values’;ALTER TABLE _annotations ADD INDEX(a_key) COMMENT ‘for getTraces and autocomplete values’;ALTER TABLE _annotations ADD INDEX(trace_id, span_id, a_key) COMMENT ‘for dependencies job’; CREATE TABLE IF NOT EXISTS _dependencies ( day DATE NOT NULL, parent VARCHAR(255) NOT NULL, child VARCHAR(255) NOT NULL, call_count BIGINT, error_count BIGINT, PRIMARY KEY (day, parent, child)) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci; 启动脚本RABBIT_URI=amqp://admin:&#97;&#100;&#x6d;&#x69;&#x6e;&#64;&#49;&#x39;&#x32;&#x2e;&#x31;&#54;&#56;&#46;&#x31;&#x37;&#50;&#x2e;&#x33;:5672/sleuth STORAGE_TYPE=mysql MYSQL_DB= MYSQL_USER=root MYSQL_PASS=123456 MYSQL_TCP_PORT=3306 MYSQL_HOST=192.168.172.2 MYSQL_DB= MYSQL_USE_SSL=false java -jar .jar elaticsearch存储启动脚本RABBIT_URI=amqp://admin:&#x61;&#100;&#x6d;&#105;&#x6e;&#64;&#x31;&#57;&#50;&#46;&#x31;&#x36;&#x38;&#x2e;&#x31;&#55;&#50;&#46;&#51;:5672/sleuth STORAGE_TYPE=elasticsearch ES_HOSTS=http://192.168.172.8:9200 ES_INDEX_REPLICAS=0 java -jar .jar –logging.level.=debug –logging.level.2=debug &amp; &gt; .log","categories":[{"name":"zipkin/jaeger知识体系","slug":"zipkin-jaeger知识体系","permalink":"https://jxdw.github.io/categories/zipkin-jaeger%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【go标准库系列】go语言标准库之net/http编程","slug":"golang-build-web-application","date":"2018-05-10T11:23:20.000Z","updated":"2020-10-22T14:28:07.067Z","comments":true,"path":"2018/05/10/golang-build-web-application/","link":"","permalink":"https://jxdw.github.io/2018/05/10/golang-build-web-application/","excerpt":"参考资料https:&#x2F;&#x2F;time-track.cn&#x2F;go-http-server-learning.html","text":"参考资料https:&#x2F;&#x2F;time-track.cn&#x2F;go-http-server-learning.html http编程基础类http包下的ListenAndServe、Server、conn、serverHandler、Handler接口 工作时序图","categories":[{"name":"go知识体系","slug":"go知识体系","permalink":"https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【go标准库系列】go用18行代码实现文件服务器","slug":"golang_simple_file_server","date":"2018-05-01T11:17:59.000Z","updated":"2020-10-22T14:28:39.059Z","comments":true,"path":"2018/05/01/golang_simple_file_server/","link":"","permalink":"https://jxdw.github.io/2018/05/01/golang_simple_file_server/","excerpt":"直接上源码吧。","text":"直接上源码吧。 package mainimport ( &quot;log&quot; &quot;net&#x2F;http&quot; &quot;time&quot;)func main ()&#123; s :&#x3D; &amp;http.Server&#123; Addr: &quot;:8080&quot;, Handler: http.FileServer(http.Dir(&quot;&#x2F;go_workspace&quot;)), ReadTimeout: 10 * time.Second, WriteTimeout: 10 * time.Second, MaxHeaderBytes: 1 &lt;&lt; 20, &#125; log.Fatal(s.ListenAndServe())&#125;","categories":[{"name":"go知识体系","slug":"go知识体系","permalink":"https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【docker使用系列】玩转kubernetes之为什么要学习kubernetes","slug":"container-why-learn-kubernetes","date":"2018-04-29T14:22:20.000Z","updated":"2020-10-24T13:11:05.899Z","comments":true,"path":"2018/04/29/container-why-learn-kubernetes/","link":"","permalink":"https://jxdw.github.io/2018/04/29/container-why-learn-kubernetes/","excerpt":"以下内容属于阅读/转载。 kubernetes与微服务架构图片来源博客园，版权属163云刘超","text":"以下内容属于阅读/转载。 kubernetes与微服务架构图片来源博客园，版权属163云刘超 附录为什么kubernetes天然适合微服务:http://www.cnblogs.com/163yun/p/8855360.html","categories":[{"name":"docker/k8s知识体系","slug":"docker-k8s知识体系","permalink":"https://jxdw.github.io/categories/docker-k8s%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【go标准库系列】go标准库之time包","slug":"golang-standard-lib-for-time","date":"2018-04-25T11:17:59.000Z","updated":"2020-10-22T14:28:21.179Z","comments":true,"path":"2018/04/25/golang-standard-lib-for-time/","link":"","permalink":"https://jxdw.github.io/2018/04/25/golang-standard-lib-for-time/","excerpt":"","text":"直接上源码package mainimport ( &quot;fmt&quot; &quot;time&quot;)func main()&#123; now :&#x3D; time.Now().Format(&quot;2006-01-02 15:04:00&quot;) fmt.Print(now)&#125;","categories":[{"name":"go知识体系","slug":"go知识体系","permalink":"https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【prometheus使用系列】(转载)利用Prometheus和Grafana可视化mysql性能","slug":"prometheus-monitor-mysql","date":"2018-04-14T13:39:46.000Z","updated":"2020-10-22T14:33:14.266Z","comments":true,"path":"2018/04/14/prometheus-monitor-mysql/","link":"","permalink":"https://jxdw.github.io/2018/04/14/prometheus-monitor-mysql/","excerpt":"原文地址https://www.percona.com/blog/2016/02/29/graphing-mysql-performance-with-prometheus-and-grafana/","text":"原文地址https://www.percona.com/blog/2016/02/29/graphing-mysql-performance-with-prometheus-and-grafana/ 截图版","categories":[{"name":"prometheus知识体系","slug":"prometheus知识体系","permalink":"https://jxdw.github.io/categories/prometheus%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【go标准库系列】go语法糖","slug":"golang_syntactic_sugar","date":"2018-04-01T11:17:59.000Z","updated":"2020-10-22T14:28:46.128Z","comments":true,"path":"2018/04/01/golang_syntactic_sugar/","link":"","permalink":"https://jxdw.github.io/2018/04/01/golang_syntactic_sugar/","excerpt":"直接上源码","text":"直接上源码 package mainimport ( &quot;fmt&quot; &quot;time&quot;)func main()&#123; now :&#x3D; time.Now().Format(&quot;2006-01-02 15:04:00&quot;) fmt.Print(now)&#125;","categories":[{"name":"go知识体系","slug":"go知识体系","permalink":"https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【go标准库系列】go sdk解读","slug":"golang_sdk_jiedu","date":"2018-03-26T10:06:47.000Z","updated":"2020-10-22T14:28:34.949Z","comments":true,"path":"2018/03/26/golang_sdk_jiedu/","link":"","permalink":"https://jxdw.github.io/2018/03/26/golang_sdk_jiedu/","excerpt":"","text":"","categories":[{"name":"go知识体系","slug":"go知识体系","permalink":"https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【Apollo使用系列】apollo配置中心wrapper启动","slug":"apollo-config-wrapper-install","date":"2018-02-05T11:54:55.000Z","updated":"2020-10-22T14:41:49.070Z","comments":true,"path":"2018/02/05/apollo-config-wrapper-install/","link":"","permalink":"https://jxdw.github.io/2018/02/05/apollo-config-wrapper-install/","excerpt":"非官方参考资料https:&#x2F;&#x2F;286.iteye.com&#x2F;blog&#x2F;1915478 本文背景几个业务平台的几套环境的配置参数管理很混乱，让有些新进入的小伙伴很混乱，所以，引入配置中心迫在眉睫。 配置中心的部署规划图部署ip规划configservice+eurekaserver的ip端口：10.2.1.30:8761adminservice的ip端口：10.2.1.30:8762portald的ip端口：10.2.1.30:8763","text":"非官方参考资料https:&#x2F;&#x2F;286.iteye.com&#x2F;blog&#x2F;1915478 本文背景几个业务平台的几套环境的配置参数管理很混乱，让有些新进入的小伙伴很混乱，所以，引入配置中心迫在眉睫。 配置中心的部署规划图部署ip规划configservice+eurekaserver的ip端口：10.2.1.30:8761adminservice的ip端口：10.2.1.30:8762portald的ip端口：10.2.1.30:8763 1.2 账户和路径规划由root创建apolloconfig账号.并创建/data/server/apolloconfig目录、/data/server/logs/apolloconfig目录,并授权给apolloconfig用户。 1.3 配置中心的最终使用使用入口：http://10.2.1.30:8763/注册中心：http://10.2.1.30:8761/ 下载github源码打包clone源码 目前来说，apollo最高版本的v1.1.0，但还是snapshot版本的，因此不建议使用，而源码master分支是对应v1.1版本，这时先切换到v1.0.0的tag. 将项目中的scripts/sql导入脚本到mysql数据库 1.打开项目中的scripts/sql文件夹，将apolloconfigdb，apolloportaldb的sql,改成自己想要的数据库名com_apolloconfig_db、com_apolloportal_db。 2.修改com_apolloconfig_db的serverconfig表的eureka地址为10.2.1.30:8761/eureka 3.修改com_apolloportal_db的serverconfig表的apollo.portal.envs为fat 修改com_apolloportal_db的serverconfig表的organizations为[&#123;&quot;orgId&quot;:&quot;XXJYZ&quot;,&quot;orgName&quot;:&quot;**交易组&quot;&#125;,&#123;&quot;orgId&quot;:&quot;YUN&quot;,&quot;orgName&quot;:&quot;**云平台&quot;&#125;] 执行mvn install -Dmaven.test.skip打包 执行mvn install -Dmaven.test.skip 分别把target中的apollo-configservice-1.0.0-github.zip，apollo-adminservice-1.0.0-github.zip，apollo-portal-1.0.0-github.zip取出， 这就是我们即将使用的部署包。 基于wrapper工程完整制作过程创建三个wrapper工程adminservice、configservice、portalservice 将apollo-adminservice/target/apollo-adminservice-1.0.0-github.zip下的apollo-adminservice-1.0.0.jar放到adminservice的app目录下。 将apollo-configservice/target/apollo-configservice-1.0.0-github.zip下的apollo-configservice-1.0.0.jar放到configservice的app目录下。 将apollo-portal/target/apollo-portal-1.0.0-github.zip下的apollo-portal-1.0.0.jar放到portalservice的app目录下。 配置configservice复制源码工程下的配置文件到wrapper工程的conf目录 ①复制apollo-configservice\\src\\main\\config的三个文件到configservice的wrapper工程的conf目录 ②apollo-configservice\\src\\main\\resources的4个文件到configservice的wrapper工程的conf目录 修改apolloconfigdb的数据库表serverconfig 打开步骤2中创建的com_apolloconfig_db数据库，将serverconfig表中的eureka.service.url配置项改成http://10.2.1.30:8897/eureka/ 修改configservice配置文件 修改bootstrap.yml文件。 修改application-github.properties。将application-github.properties修改为application-fat.properties。并将数据库信息配置成步骤2中建立的com_apolloconfig_db 修改application.yml 修改configservice.properties 修改apollo-configservice.conf文件 修改logback文件 增加wrapper文件 配置adminservice复制源码工程下的配置文件到wrapper工程的conf目录 复制apollo-configservice\\src\\main\\config的三个文件到adminservice的wrapper工程的conf目录 复制apollo-configservice\\src\\main\\resources的4个文件到adminservice的wrapper工程的conf目录 修改adminservice配置文件 修改bootstrap.yml文件 修改application.yml 修改apollo-configservice.conf文件 修改application-github.properties 修改为application-fat.properties 修改logback.xml文件 增加wrapper相关文件 配置portalservice复制源码工程下的配置文件到wrapper工程的conf目录 复制apollo-portal\\src\\main\\config的三个文件到portalservice的wrapper工程的conf目录 复制apollo-portal\\src\\main\\resources的4个文件到portalservice的wrapper工程的conf目录 修改portalservice配置文件 修改apollo-env.properties 修改application.yml apollo-portal.conf 修改application-github.properties。application-github.properties为application-fat.properties,并修改内容 logback文件 新增wrapper相关文件","categories":[{"name":"nacos/apollo知识体系","slug":"nacos-apollo知识体系","permalink":"https://jxdw.github.io/categories/nacos-apollo%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【docker使用系列】镜像仓库harbor0.5.0版本安装和使用","slug":"docker-registry-harbor-05-install","date":"2018-01-14T14:49:09.000Z","updated":"2020-10-24T13:11:05.976Z","comments":true,"path":"2018/01/14/docker-registry-harbor-05-install/","link":"","permalink":"https://jxdw.github.io/2018/01/14/docker-registry-harbor-05-install/","excerpt":"本文背景背景玩docker也差不多一年有余了，但是一直依赖没有一个私有仓库(docker registry没有可视化的界面，一直被我嫌弃)，一直依赖都是在docker hub上面找。没有形成自己的积淀 本文参考资料https://www.cnblogs.com/huangjc/p/6266564.html 下载、配置和安装下载harbor0.5.0版本离线版wget https:&#x2F;&#x2F;github.com&#x2F;vmware&#x2F;harbor&#x2F;releases&#x2F;download&#x2F;0.5.0&#x2F;harbor-offline-installer-0.5.0.tgz","text":"本文背景背景玩docker也差不多一年有余了，但是一直依赖没有一个私有仓库(docker registry没有可视化的界面，一直被我嫌弃)，一直依赖都是在docker hub上面找。没有形成自己的积淀 本文参考资料https://www.cnblogs.com/huangjc/p/6266564.html 下载、配置和安装下载harbor0.5.0版本离线版wget https:&#x2F;&#x2F;github.com&#x2F;vmware&#x2F;harbor&#x2F;releases&#x2F;download&#x2F;0.5.0&#x2F;harbor-offline-installer-0.5.0.tgz 下载docker-copose 1.10版本下载docker-copose 1.10版本的二进制文件 curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.10.0&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-composechmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose 修改harbor配置vim harbor.cfg #修改iphostname &#x3D; 10.2.1.30 修改docker-compose.yml文件 #暴露registry端口，否则有时会报连接被拒绝 执行./install.sh脚本登录查看效果","categories":[{"name":"harbor知识体系","slug":"harbor知识体系","permalink":"https://jxdw.github.io/categories/harbor%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【java实现微服务架构系列】spring boot与dubbo 2.5.8整合体验","slug":"spring_boot_dubbo_2.5.8_experience","date":"2017-12-28T06:04:49.000Z","updated":"2020-10-22T14:25:56.243Z","comments":true,"path":"2017/12/28/spring_boot_dubbo_2.5.8_experience/","link":"","permalink":"https://jxdw.github.io/2017/12/28/spring_boot_dubbo_2.5.8_experience/","excerpt":"本文参考资料https:&#x2F;&#x2F;www.oschina.net&#x2F;news&#x2F;91565&#x2F;dubbo-2-5-8-released","text":"本文参考资料https:&#x2F;&#x2F;www.oschina.net&#x2F;news&#x2F;91565&#x2F;dubbo-2-5-8-released","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【rabbitmq知识体系】centos7下rabbitmq3.7.2集群配置(续)","slug":"rabbitmq-cluster-install_2","date":"2017-12-23T13:26:52.000Z","updated":"2020-10-22T14:37:55.697Z","comments":true,"path":"2017/12/23/rabbitmq-cluster-install_2/","link":"","permalink":"https://jxdw.github.io/2017/12/23/rabbitmq-cluster-install_2/","excerpt":"参考资料https:&#x2F;&#x2F;www.cnblogs.com&#x2F;me-sa&#x2F;p&#x2F;erlang-epmd.html erlang虚拟机查询官网后得知，rabbitmq是一个基于erlang语言的应用程序。在 Erlang中有两个概念：节点(node)和应用程序(application)。","text":"参考资料https:&#x2F;&#x2F;www.cnblogs.com&#x2F;me-sa&#x2F;p&#x2F;erlang-epmd.html erlang虚拟机查询官网后得知，rabbitmq是一个基于erlang语言的应用程序。在 Erlang中有两个概念：节点(node)和应用程序(application)。 节点(node)node为运行Erlang虚拟机的一个实例。 应用程序(application)多个Erlang应用程序(application)可以运行在同一个节点(node)之上。 erlang节点特点节点(node)之间可进行通信（无论是否运行在同一台服务器)。简单来说：1.一个运行在节点A上的应用程序（application）可以调用节点B上应用程序的方法，就好像调用本地函数一样。2.如果要关闭整个RabbitMQ节点可以使用stop参数，它会和本地节点通信并指示其干净得关闭：/sbin/rabbitmqctl stop。比如：默认node名称是rabbit@server，如果主机名是server.example.com，那么node名称就是 &#x72;&#97;&#x62;&#x62;&#105;&#x74;&#64;&#115;&#x65;&#114;&#118;&#x65;&#114;&#46;&#x65;&#120;&#x61;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109; &#x2F;sbin&#x2F;rabbitmqctl -n rabbit@server.example.com stop 3.rabbitmqctl关闭RabbitMQ应用程序，如果只想关闭应用程序，同时保持Erlang节点运行则可以使用 stop_app。rabbitmqctl也可以指定关闭不同得节点（包括远程节点），只需传入参数也可以指定关闭不同的节点（包括远程节点），且只需传入参数 -n node(依赖于下面要提到的epmd)。 &#x2F;sbin&#x2F;rabbitmqctl -n rabbit@server.example.com stop_app empd rabbitmq顶层架构集群整体架构 单点整体架构 启动参数解析上面提到的整体架构可能有点抽象，看下启动参数 &#x2F;usr&#x2F;lib64&#x2F;erlang&#x2F;erts-9.3.3.6&#x2F;bin&#x2F;beam.smp -W w -A 64 -P 1048576 -t 5000000 -stbt db -zdbbl 128000 -K true -- -root &#x2F;usr&#x2F;lib64&#x2F;erlang #erlang虚拟机目录-progname erl -- -home &#x2F;var&#x2F;lib&#x2F;rabbitmq #rabbitmq家目录-- -pa &#x2F;usr&#x2F;lib&#x2F;rabbitmq&#x2F;lib&#x2F;rabbitmq_server-3.7.2&#x2F;ebin -noshell-noinput -s rabbit boot -sname rabbit@lxg53 -boot start_sasl -conf &#x2F;etc&#x2F;rabbitmq&#x2F;rabbitmq #rabbitmq配置文件-conf_dir &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;config #rabbitmq配置文件目录-conf_script_dir &#x2F;usr&#x2F;lib&#x2F;rabbitmq&#x2F;bin -conf_schema_dir &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;schema -kernel inet_default_connect_options [&#123;nodelay,true&#125;] #kerner程序的配置-sasl errlog_type error -sasl sasl_error_logger false -rabbit lager_log_root &quot;&#x2F;data&#x2F;rabbitmq&#x2F;log&quot; #rabbitmq程序的日志配置-rabbit lager_default_file &quot;&#x2F;data&#x2F;rabbitmq&#x2F;log&#x2F;rabbit@lxg53.log&quot; #rabbitmq程序的日志配置-rabbit lager_upgrade_file &quot;&#x2F;data&#x2F;rabbitmq&#x2F;log&#x2F;rabbit@lxg53_upgrade.log&quot; #rabbitmq程序的日志配置-rabbit enabled_plugins_file &quot;&#x2F;etc&#x2F;rabbitmq&#x2F;enabled_plugins&quot; #rabbitmq程序的插件配置-rabbit plugins_dir &quot;&#x2F;usr&#x2F;lib&#x2F;rabbitmq&#x2F;plugins:&#x2F;usr&#x2F;lib&#x2F;rabbitmq&#x2F;lib&#x2F;rabbitmq_server-3.7.2&#x2F;plugins&quot; #rabbitmq程序的插件目录 -rabbit plugins_expand_dir &quot;&#x2F;data&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@lxg53-plugins-expand&quot; -os_mon start_cpu_sup false #rabbitmq程序的配置-os_mon start_disksup false -os_mon start_memsup false -mnesia dir &quot;&#x2F;data&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@lxg53&quot; -kernel inet_dist_listen_min 25672 -kernel inet_dist_listen_max 25672 rabbitmq相关应用程序第二种手段：查询日志。结合启动参数、日志后可以看出，rabbitmq相关的erlang程序包括： rabbitmq_management amqp_client rabbitmq_web_dispatch cowboy #http server cowlib rabbitmq_management_agent #基于cowboy的插件 rabbit mnesia rabbit_common os_mon2017-12-23 13:21:40.187 [info] &lt;0.18635.0&gt; RabbitMQ is asked to stop...2017-12-23 13:21:40.410 [info] &lt;0.18635.0&gt; Stopping RabbitMQ applications and their dependencies in the following order: rabbitmq_management amqp_client rabbitmq_web_dispatch cowboy cowlib rabbitmq_management_agent rabbit mnesia rabbit_common os_mon2017-12-23 13:21:40.410 [info] &lt;0.18635.0&gt; Stopping application &#39;rabbitmq_management&#39;2017-12-23 13:21:40.414 [info] &lt;0.33.0&gt; Application rabbitmq_management exited with reason: stopped2017-12-23 13:21:40.414 [info] &lt;0.18635.0&gt; Stopping application &#39;amqp_client&#39;2017-12-23 13:21:40.416 [info] &lt;0.33.0&gt; Application amqp_client exited with reason: stopped2017-12-23 13:21:40.416 [info] &lt;0.18635.0&gt; Stopping application &#39;rabbitmq_web_dispatch&#39;2017-12-23 13:21:40.419 [info] &lt;0.33.0&gt; Application rabbitmq_web_dispatch exited with reason: stopped2017-12-23 13:21:40.419 [info] &lt;0.18635.0&gt; Stopping application &#39;cowboy&#39;2017-12-23 13:21:40.421 [info] &lt;0.33.0&gt; Application cowboy exited with reason: stopped2017-12-23 13:21:40.421 [info] &lt;0.18635.0&gt; Stopping application &#39;cowlib&#39;2017-12-23 13:21:40.421 [info] &lt;0.33.0&gt; Application cowlib exited with reason: stopped2017-12-23 13:21:40.421 [info] &lt;0.18635.0&gt; Stopping application &#39;rabbitmq_management_agent&#39;2017-12-23 13:21:40.424 [info] &lt;0.33.0&gt; Application rabbitmq_management_agent exited with reason: stopped2017-12-23 13:21:40.424 [info] &lt;0.18635.0&gt; Stopping application &#39;rabbit&#39;2017-12-23 13:21:40.424 [info] &lt;0.944.0&gt; Peer discovery backend rabbit_peer_discovery_classic_config does not support registration, skipping unregistration.2017-12-23 13:21:40.424 [info] &lt;0.1300.0&gt; stopped TCP Listener on [::]:56722017-12-23 13:21:40.425 [info] &lt;0.1039.0&gt; Closing all connections in vhost &#39;bbs&#39; on node &#39;rabbit@lxg54&#39; because the vhost is stopping2017-12-23 13:21:40.426 [info] &lt;0.1039.0&gt; Closing all connections in vhost &#39;fsp_metrics&#39; on node &#39;rabbit@lxg54&#39; because the vhost is stopping2017-12-23 13:21:40.426 [info] &lt;0.1236.0&gt; Stopping message store for directory &#39;&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@lxg54&#x2F;msg_stores&#x2F;vhosts&#x2F;2EO163IWD87C0LGDYBMCOU9AZ&#x2F;msg_store_persistent&#39;2017-12-23 13:21:40.426 [info] &lt;0.1183.0&gt; Stopping message store for directory &#39;&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@lxg54&#x2F;msg_stores&#x2F;vhosts&#x2F;CJ961M2R0VKA2HG0XCI215CBA&#x2F;msg_store_persistent&#39;2017-12-23 13:21:40.426 [info] &lt;0.1130.0&gt; Stopping message store for directory &#39;&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@lxg54&#x2F;msg_stores&#x2F;vhosts&#x2F;628WB79CIFDYO9LJI6DKMI09L&#x2F;msg_store_persistent&#39;2017-12-23 13:21:40.426 [info] &lt;0.1077.0&gt; Stopping message store for directory &#39;&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@lxg54&#x2F;msg_stores&#x2F;vhosts&#x2F;BILT8EMIAEYFVG7TLIG4764T5&#x2F;msg_store_persistent&#39;2017-12-23 13:21:40.426 [info] &lt;0.1039.0&gt; Closing all connections in vhost &#39;&#x2F;&#39; on node &#39;rabbit@lxg54&#39; because the vhost is stopping2017-12-23 13:21:40.426 [info] &lt;0.1039.0&gt; Closing all connections in vhost &#39;fsp-asynctask-service&#39; on node &#39;rabbit@lxg54&#39; because the vhost is stopping2017-12-23 13:21:40.482 [info] &lt;0.1130.0&gt; Message store for directory &#39;&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@lxg54&#x2F;msg_stores&#x2F;vhosts&#x2F;628WB79CIFDYO9LJI6DKMI09L&#x2F;msg_store_persistent&#39; is stopped2017-12-23 13:21:40.482 [info] &lt;0.1127.0&gt; Stopping message store for directory &#39;&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@lxg54&#x2F;msg_stores&#x2F;vhosts&#x2F;628WB79CIFDYO9LJI6DKMI09L&#x2F;msg_store_transient&#39;2017-12-23 13:21:40.483 [info] &lt;0.1236.0&gt; Message store for directory &#39;&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@lxg54&#x2F;msg_stores&#x2F;vhosts&#x2F;2EO163IWD87C0LGDYBMCOU9AZ&#x2F;msg_store_persistent&#39; is stopped2017-12-23 13:21:40.483 [info] &lt;0.1077.0&gt; Message store for directory &#39;&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@lxg54&#x2F;msg_stores&#x2F;vhosts&#x2F;BILT8EMIAEYFVG7TLIG4764T5&#x2F;msg_store_persistent&#39; is stopped2017-12-23 13:21:40.483 [info] &lt;0.1183.0&gt; Message store for directory &#39;&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@lxg54&#x2F;msg_stores&#x2F;vhosts&#x2F;CJ961M2R0VKA2HG0XCI215CBA&#x2F;msg_store_persistent&#39; is stopped2017-12-23 13:21:40.483 [info] &lt;0.1074.0&gt; Stopping message store for directory &#39;&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@lxg54&#x2F;msg_stores&#x2F;vhosts&#x2F;BILT8EMIAEYFVG7TLIG4764T5&#x2F;msg_store_transient&#39;2017-12-23 13:21:40.483 [info] &lt;0.1233.0&gt; Stopping message store for directory &#39;&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@lxg54&#x2F;msg_stores&#x2F;vhosts&#x2F;2EO163IWD87C0LGDYBMCOU9AZ&#x2F;msg_store_transient&#39;2017-12-23 13:21:40.483 [info] &lt;0.1180.0&gt; Stopping message store for directory &#39;&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@lxg54&#x2F;msg_stores&#x2F;vhosts&#x2F;CJ961M2R0VKA2HG0XCI215CBA&#x2F;msg_store_transient&#39;2017-12-23 13:21:40.626 [info] &lt;0.1127.0&gt; Message store for directory &#39;&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@lxg54&#x2F;msg_stores&#x2F;vhosts&#x2F;628WB79CIFDYO9LJI6DKMI09L&#x2F;msg_store_transient&#39; is stopped2017-12-23 13:21:40.626 [info] &lt;0.1233.0&gt; Message store for directory &#39;&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@lxg54&#x2F;msg_stores&#x2F;vhosts&#x2F;2EO163IWD87C0LGDYBMCOU9AZ&#x2F;msg_store_transient&#39; is stopped2017-12-23 13:21:40.626 [info] &lt;0.1180.0&gt; Message store for directory &#39;&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@lxg54&#x2F;msg_stores&#x2F;vhosts&#x2F;CJ961M2R0VKA2HG0XCI215CBA&#x2F;msg_store_transient&#39; is stopped2017-12-23 13:21:40.627 [info] &lt;0.1074.0&gt; Message store for directory &#39;&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@lxg54&#x2F;msg_stores&#x2F;vhosts&#x2F;BILT8EMIAEYFVG7TLIG4764T5&#x2F;msg_store_transient&#39; is stopped2017-12-23 13:21:40.631 [info] &lt;0.18635.0&gt; Stopping application &#39;mnesia&#39;2017-12-23 13:21:40.631 [info] &lt;0.33.0&gt; Application rabbit exited with reason: stopped2017-12-23 13:21:40.634 [info] &lt;0.33.0&gt; Application mnesia exited with reason: stopped2017-12-23 13:21:40.634 [info] &lt;0.18635.0&gt; Stopping application &#39;rabbit_common&#39;2017-12-23 13:21:40.634 [info] &lt;0.33.0&gt; Application rabbit_common exited with reason: stopped2017-12-23 13:21:40.634 [info] &lt;0.18635.0&gt; Stopping application &#39;os_mon&#39;2017-12-23 13:21:40.636 [info] &lt;0.33.0&gt; Application os_mon exited with reason: stopped2017-12-23 13:21:40.636 [info] &lt;0.18635.0&gt; Successfully stopped RabbitMQ and its dependencies rabbitmq核心概念Broker简单来说就是消息队列服务器的实体，类似于 JMS 规范中的 JMS provider。它用于接收和分发消息，有时候也称为 Message Broker 或者更直白的称为 RabbitMQ Server。 cluster一群broker组成的集群，其中一个是disc节点，其他的为ram节点。 Virtual Host和 Web 服务器中的虚拟主机（Virtual Host）是类似的概念，出于多租户和安全因素设计的，可以将 RabbitMQ Server 划分成多个独立的空间，彼此之间互相独立，这样就可以将一个 RabbitMQ Server 同时提供给多个用户使用，每个用户在自己的空间内创建 Exchange 和 Queue。 Exchange交换机用于接收消息，这是消息到达 Broker 的第一站，然后根据交换机的类型和路由规则（Routing Key），将消息分发到特定的队列中去。常用的交换机类型有：direct (point-to-point)、topic (publish-subscribe) 和 fanout (multicast)。 Queue生产者发送的消息就是存储在这里，在 JMS 规范里，没有 Exchange 的概念，消息是直接发送到 Queue，而在 AMQP 中，消息会经过 Exchange，由 Exchange 来将消息分发到各个队列中。消费者可以直接从这里取走消息。 Binding绑定的作用就是把 Exchange 和 Queue 按照路由规则绑定起来，路由规则可由下面的 Routing Key 指定。 Routing Key路由关键字，Exchange 根据这个关键字进行消息投递。 Producer/Publisher消息生产者或发布者，产生消息的程序。 Consumer/Subscriber消息消费者或订阅者，接收消息的程序。 Connection生产者和消费者和 Broker 之间的连接，一个 Connection 实际上就对应着一条 TCP 连接。 Channel由于 TCP 连接的创建和关闭开销非常大，如果每次访问 Broker 都建立一个 Connection，在消息量大的时候效率会非常低。Channel 是在 Connection 内部建立的逻辑连接，相当于一次会话，如果应用程序支持多线程，通常每个线程都会创建一个单独的 Channel 进行通讯，各个 Channel 之间完全隔离，但这些 Channel 可以公用一个 Connection。","categories":[{"name":"rabbitmq/kafka知识体系","slug":"rabbitmq-kafka知识体系","permalink":"https://jxdw.github.io/categories/rabbitmq-kafka%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【rabbitmq知识体系】centos7下rabbitmq3.7.2集群配置","slug":"rabbitmq-cluster-install","date":"2017-12-23T11:30:54.000Z","updated":"2020-10-22T14:37:47.689Z","comments":true,"path":"2017/12/23/rabbitmq-cluster-install/","link":"","permalink":"https://jxdw.github.io/2017/12/23/rabbitmq-cluster-install/","excerpt":"参考资料和更新历史本文参考资料http:&#x2F;&#x2F;www.cnblogs.com&#x2F;luxiaoxun&#x2F;p&#x2F;3918054.htmlhttps:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;518a504fe2cchttps:&#x2F;&#x2F;www.rabbitmq.com&#x2F;changelog.htmlhttp:&#x2F;&#x2F;blog.didispace.com&#x2F;spring-boot-rabbitmq&#x2F;https:&#x2F;&#x2F;blog.csdn.net&#x2F;zyz511919766&#x2F;article&#x2F;details&#x2F;41896747https:&#x2F;&#x2F;www.rabbitmq.com&#x2F;configure.htmlhttps:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;b6bdd6f56f9c","text":"参考资料和更新历史本文参考资料http:&#x2F;&#x2F;www.cnblogs.com&#x2F;luxiaoxun&#x2F;p&#x2F;3918054.htmlhttps:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;518a504fe2cchttps:&#x2F;&#x2F;www.rabbitmq.com&#x2F;changelog.htmlhttp:&#x2F;&#x2F;blog.didispace.com&#x2F;spring-boot-rabbitmq&#x2F;https:&#x2F;&#x2F;blog.csdn.net&#x2F;zyz511919766&#x2F;article&#x2F;details&#x2F;41896747https:&#x2F;&#x2F;www.rabbitmq.com&#x2F;configure.htmlhttps:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;b6bdd6f56f9c 文章更新历史2017-12-23 19:30:54 初稿2019-04-29 20:30:54 因为erlang的rpm包被移走了，需要更新repo文件 部署规划集群所有机器增加hosts10.2.1.53 lxg5310.2.1.54 lxg5410.2.1.55 lxg55 目录规划配置文件目录:&#x2F;etc&#x2F;rabbitmq&#x2F;主要工作目录:&#x2F;var&#x2F;lib&#x2F;rabbitmq日志文件目录:&#x2F;data&#x2F;rabbitmq&#x2F;log数据库目录：&#x2F;data&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@lxg53 ps:真的很讨厌程序的工作目录放在/var/lib目录下（这是系统盘下，如果系统盘符小，分分钟撑爆系统盘符）。但是目前也没有找到有效的办法，修改工作目录。 安装erlang与rabbit-server集群更新curl程序yum update nss curl 更新erlang的repovim /etc/yum.repos.d/rabbitmq-erlang.repo [rabbitmq-erlang]name&#x3D;rabbitmq-erlangbaseurl&#x3D;https:&#x2F;&#x2F;dl.bintray.com&#x2F;rabbitmq-erlang&#x2F;rpm&#x2F;erlang&#x2F;20&#x2F;el&#x2F;7gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;dl.bintray.com&#x2F;rabbitmq&#x2F;Keys&#x2F;rabbitmq-release-signing-key.ascrepo_gpgcheck&#x3D;0enabled&#x3D;1 安装erlangyum install erlang 安装rabbitmq-serverwget https:&#x2F;&#x2F;dl.bintray.com&#x2F;rabbitmq&#x2F;all&#x2F;rabbitmq-server&#x2F;3.7.2&#x2F;rabbitmq-server-3.7.2-1.el7.noarch.rpmrpm --import https:&#x2F;&#x2F;dl.bintray.com&#x2F;rabbitmq&#x2F;Keys&#x2F;rabbitmq-release-signing-key.ascyum install rabbitmq-server-3.7.2-1.el7.noarch.rpm 修改rabbitmq配置配置文件位置rabbit3.7之后，采用了rabbitmq.conf、rabbitmq-env.conf。（网上很多照抄的说，从3.7开始命名叫rabbitmq.config，看着蛋疼） rabbitmq.conf rabbitmq-env.conf 启动rabbitmq主节点和插件创建目录及启动rabbit-serverchown -R rabbitmq:rabbitmq &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mkdir -p data&#x2F;rabbitmq&#x2F;logmkdir -p &#x2F;data&#x2F;rabbitmq&#x2F;mnesiachown -R rabbitmq:rabbitmq &#x2F;data&#x2F;rabbitmq&#x2F;systemctl start rabbitmq-server 启用插件授权登录rabbitmq-plugins enable rabbitmq_managementrabbitmqctl add_user admin adminrabbitmqctl set_user_tags admin administratorrabbitmqctl set_permissions -p &#x2F; admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;rabbitmqctl status 其他的插件rabbitmq-plugins enable rabbitmq_mqttrabbitmq-plugins enable rabbitmq_stomprabbitmq-plugins enable rabbitmq_web_mqttrabbitmq-plugins enable rabbitmq_web_stomp 同步cookie和启动从节点同步cookie到从节点cat /var/lib/rabbitmq/.erlang.cookie DSXSMAIWGQYIUAALJXQH nc到从节点的/var/lib/rabbitmq/目录。 启动从节点systemctl start rabbitmq-serverrabbitmq-plugins enable rabbitmq_managementrabbitmqctl add_user admin adminrabbitmqctl set_user_tags admin administratorrabbitmqctl set_permissions -p &#x2F; admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;rabbitmqctl stop_apprabbitmqctl reset 从节点加入到集群rabbitmqctl join_cluster --ram rabbit@lxg53rabbitmqctl start_app 某个从节点重启systemctl start rabbitmq-serverrabbitmqctl stop_apprabbitmqctl start_app 镜像队列负载均衡负载均衡#---------------------------------------------------------------------# Example configuration for a possible web application. See the# full configuration options online.## http:&#x2F;&#x2F;haproxy.1wt.eu&#x2F;download&#x2F;1.4&#x2F;doc&#x2F;configuration.txt##---------------------------------------------------------------------#---------------------------------------------------------------------# Global settings#---------------------------------------------------------------------global # to have these messages end up in &#x2F;var&#x2F;log&#x2F;haproxy.log you will # need to: # # 1) configure syslog to accept network log events. This is done # by adding the &#39;-r&#39; option to the SYSLOGD_OPTIONS in # &#x2F;etc&#x2F;sysconfig&#x2F;syslog # # 2) configure local2 events to go to the &#x2F;var&#x2F;log&#x2F;haproxy.log # file. A line like the following can be added to # &#x2F;etc&#x2F;sysconfig&#x2F;syslog # # local2.* &#x2F;var&#x2F;log&#x2F;haproxy.log # log 127.0.0.1 local0 info chroot &#x2F;var&#x2F;lib&#x2F;haproxy pidfile &#x2F;var&#x2F;run&#x2F;haproxy.pid maxconn 4000 user haproxy group haproxy daemon # turn on stats unix socket stats socket &#x2F;var&#x2F;lib&#x2F;haproxy&#x2F;stats#---------------------------------------------------------------------# common defaults that all the &#39;listen&#39; and &#39;backend&#39; sections will# use if not designated in their block#---------------------------------------------------------------------defaults mode http log global option httplog option dontlognull option http-server-close option forwardfor except 127.0.0.0&#x2F;8 option redispatch retries 3 timeout http-request 10s timeout queue 1m timeout connect 10s timeout client 1m timeout server 1m timeout http-keep-alive 10s timeout check 10s maxconn 3000listen status bind 10.2.1.30:18080 #监听的地址和端口，默认端口1080 mode http #模式 stats enable #启用状态监控 stats hide-version #隐藏软件版本号 stats auth admin:admin #登陆用户名和密码 stats realm HAproxy\\ stats #提示信息，空格之前加\\ stats admin if TRUE #当通过认证才可管理 stats uri &#x2F;stats #访问路径，在域名后面添加&#x2F;stats可以查看haproxy监控状态,默认为&#x2F;haproxy?stats stats refresh 5 #页面自动刷新间隔,每隔5s刷新frontend rabbitmq_broker bind 10.2.1.30:5672 default_backend rabbitmq_broker_backendbackend rabbitmq_broker_backend balance roundrobin server lxg53 10.2.1.53:5672 check server lxg54 10.2.1.54:5672 check server lxg55 10.2.1.55:5672 checkfrontend rabbitmq_management bind 10.2.1.30:15672 default_backend rabbitmq_management_backendbackend rabbitmq_management_backend balance roundrobin server lxg53 10.2.1.53:15672 check server lxg54 10.2.1.54:15672 check server lxg55 10.2.1.55:15672 check #---------------------------------------------------------------------# main frontend which proxys to the backends#---------------------------------------------------------------------#frontend main *:5000# acl url_static path_beg -i &#x2F;static &#x2F;images &#x2F;javascript &#x2F;stylesheets# acl url_static path_end -i .jpg .gif .png .css .js# use_backend static if url_static# default_backend app#---------------------------------------------------------------------# static backend for serving up images, stylesheets and such#---------------------------------------------------------------------#backend static# balance roundrobin# server static 127.0.0.1:4331 check#---------------------------------------------------------------------# round robin balancing between the various backends#---------------------------------------------------------------------#backend app# balance roundrobin# server app1 127.0.0.1:5001 check# server app2 127.0.0.1:5002 check# server app3 127.0.0.1:5003 check# server app4 127.0.0.1:5004 check 最终效果","categories":[{"name":"rabbitmq/kafka知识体系","slug":"rabbitmq-kafka知识体系","permalink":"https://jxdw.github.io/categories/rabbitmq-kafka%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【rabbitmq知识体系】(转载)rabbitmq手册之rabbitmqctl","slug":"rabbitmqctl-handbook","date":"2017-12-22T11:52:16.000Z","updated":"2020-10-22T14:38:00.372Z","comments":true,"path":"2017/12/22/rabbitmqctl-handbook/","link":"","permalink":"https://jxdw.github.io/2017/12/22/rabbitmqctl-handbook/","excerpt":"原文地址https://www.jianshu.com/p/61a90fba1d2a","text":"原文地址https://www.jianshu.com/p/61a90fba1d2a application相关命令(集群管理的基础)rabbitmqctl stop [{pid_file}]rabbitmqctl stop 或者 rabbitmqctl stop[{pid_file}] 表示stop 在RabbitMQ服务器上运行的一个Erlang节点，可以指定某一个 *pid_file*，表示会等待这个指定的程序结束 rabbitmqctl shutdown表示终止RabbitMQ 服务器上的Erlang进程，如果终止失败，会返回非零数字 rabbitmqctl stop_app表示终止RabbitMQ的应用，但是Erlang节点还在运行。该命令典型的运行在一些需要RabbitMQ应用被停止的管理行为之前，例如 reset rabbitmqctl start_app表示启动RabbitMQ的应用。该命令典型的运行在一些需要RabbitMQ应用被停止的管理行为之后，例如 reset rabbitmqctl wait {pid_file}表示等待RabbitMQ应用启动。该命令会等待指定的pid file被创建，也就是启动的进程对应的pid保存在这个文件中，然后RabbitMQ应用在这个进程中启动。如果该进程终止，没有启动RabbitMQ应用，就会返回错误。合适的pid file是有rabbitmq-server 脚本创建的，默认保存在 Mnesia 目录下，可以通过修改 RABBITMQ_PID_FILE 环境变量来修改例如 rabbitmqctl wait &#x2F;var&#x2F;run&#x2F;rabbitmq&#x2F;pid rabbitmqctl reset表示设置RabbitMQ节点为原始状态。会从该节点所属的cluster中都删除，从管理数据库中删除所有数据，例如配置的用户和vhost，还会删除所有的持久消息。要想reset和force_reset操作执行成功，RabbitMQ应用需要处于停止状态，即执行过 stop_app rabbitmqctl force_reset表示强制性地设置RabbitMQ节点为原始状态。它和reset的区别在于，可以忽略目前管理数据库的状态和cluster的配置，无条件的reset。该方法的使用，应当用在当数据库或者cluster配置损坏的情况下作为最后的方法。 rabbitmqctl rotate_logs {suffix}表示将日志文件的内容追加到新的日志文件中去，这个新的日志文件的文件名是原有的日志文件名加上命令中的 suffix，并且恢复日志到原来位置的新文件中。注意：如果新文件原先不存在，那么会新建一个；如果suffix为空，那么不会发生日志转移，只是重新打开了一次日志文件而已。 rabbitmqctl hipe_compile {directory}表示在指定的目录下执行HiPE编译和缓存结果文件 .beam-files如果需要父目录会被创建。并且在编译之前，该目录下的所有 .beam-files会被自动删除。使用预编译的文件，你应该设置 RABBITMQ_SERVER_CODE_PATH 环境变量为 hipe_compile 调用指定的目录。 cluster management(集群管理)rabbitmqctl join_cluster {clusternode} [–ram]表示结合到指定的集群，如果有参数 --ram 表示作为RAM节点结合到该集群中。该命令指令本节结合到指定的集群中，在结合之前，该节点需要reset，所以在使用时，需要格外注意。为了成功运行本命令，必须要停止RabbitMQ应用，例如 stop_app集群节点有两种类型: disc 和 RAM。disc类型，复制数据在RAM和disc上，在节点失效的情况下，提供了冗余保证，也能从一些全局事件中恢复，例如所有节点失效。RAM类型，只复制数据在RAM上，主要表现在伸缩性上，特别是在管理资源（例如：增加删除队列，交换器，或者绑定）上表现突出。一个集群必须至少含有一个disc节点，当通常都多余一个。通过该命令时，默认是设置为disc节点，如果需创建RAM节点，需要指定参数 --ram执行此命令之后，在该节点上启动的RabbitMQ应用，在该节点挂掉之后，会尝试连接节点所在集群中的其他节点。为了离开集群，可以 reset 该节点，也可以使用命令 forget_cluster_node 远程删除节点 rabbitmqctl cluster_status表示显示通过节点类型聚合在一起的集群中的所有节点，还有目前正在运行的节点 rabbitmqctl change_cluster_node_type {disc|ram}表示改变集群节点的类型。该操作的正确执行，必定会停止该节点。并且在调整一个node为ram类型时，该节点不能为该集群的唯一node rabbitmqctl forget_cluster_node [–offline]表示远程移除一个集群节点。要删除的节点必须脱机，如果没有脱机，需要使用 --offline 参数。当使用 --offline 参数时，rabbitmqctl不会去连接节点，而是暂时变成节点，以便进行变更。这在节点不能正常启动时非常有用。在这种情况下，节点会成为集群元数据的规范来源（例如哪些队列存在）。因此如果可以的话，应该使用此命令在最新的节点上关闭。--offline 参数使节点从脱机节点上移除。使用场景主要是在所有节点脱机，且最后一个节点无法联机时，从而防止整个集群启动。在其他情况不应该使用，否则会导致不一致。例如 rabbitmqctl -n hare@mcnulty forget_cluster_node rabbit@stringer 上述命令将从节点 hare@mcnulty 中移除节点 rabbit@stringer rabbitmqctl rename_cluster_node {oldnode1} {newnode1} [oldnode2] [newnode2…]表示在本地数据库上修改集群节点名称。该命令让rabbitmqctl暂时成为一个节点来做出做变更。因此，本地的待修改的集群节点一定要完全停止，其他节点可以是online或者offline rabbitmqctl update_cluster_nodes {clusternode}表示指示已经集群的节点在唤醒时联系 &#123;clusternode&#125; 进行集群。这与 join_cluster 命令不同，因为它不加入任何集群，它是检查节点是否已经在具有 &#123;clusternode&#125; 的集群中。该命令的需求，是在当一个节点offline时，修改了集群节点的情形下。例如：节点A和B聚群，节点A offline了，节点C和B集群，并且B节点离开了该集群，那么当节点A起来的时候，A会尝试连接B，但是由于B节点已经不在该集群中，所以会失败。通过 update_cluster_nodes -n A C 将会解决上述问题。 rabbitmqctl force_boot表示强制确保节点启动，即使该节点并不是最后down的。一般情况下，当你同时shut down了RabbitMQ集群时，第一个重启的节点应该是最后一个down掉的，因为它可能已经看到了其他节点发生的事情。但是有时候这并不可能：例如当整个集群lose power，那么该集群的所有节点会认为他们不是最后一个关闭的。如果最后down的节点永久的lost，那么应该优先使用 rabbitmqctl forget_cluster_node --offline ，因为这将确保在丢失节点上的镜像队列得到优先处理。 rabbitmqctl sync_queue [-p vhost] {queue}&#123;queue&#125; 表示待同步的队列名称指引含有异步slaves的镜像队列去同步自身。当队列执行同步化时，其将会被锁定（指所有publishers发送出去的和consumers获取到的队列都会被锁定）。为了成功执行此命令，队列必须要被镜像。注意，排除消息的异步队列将最终被同步化，此命令主要运用于未被排除完全消息的队列。 rabbitmqctl cancel_sync_queue [-p vhost] {queue}指引一个正在同步的镜像队列停止此操作。 rabbitmqctl purge_queue [-p vhost] {queue}&#123;queue&#125; 表示待清空消息的队列名称该命令表示清空队列（即删除队列中的所有消息） rabbitmqctl set_cluster_name {name}设置集群的名称。在连接中，集群的名称被声明在客户端上，被同盟和插件用来记录一个消息所在的位置。集群的名称默认来自于集群中第一个节点的主机名，但是可以被修改。 User management(用户和角色管理)用户角色rabbitmq用户角色（role）分为五类： 超级管理员（administrator）administrator可登录管理控制台（启用management plugin的情况下），查看所有的信息，并且可以对用户、策略（policy）进行操作。 监控者（monitor）monitoring可登录管理控制台（启用management plugin的情况下），同时可以查看rabbitmq节点的相关信息（进程数、内存使用情况，磁盘使用情况等）。 决策制定者（policymaker）policymaker可以登录管理控制台（启用management plugin的情况下），同时可以对策略（policy）进行操作。 普通管理者（management）management 仅可登录管理控制台（启用management plugin的情况下），无法看到节点信息，也无法对策略进行管理。 其他无法登录管理控制台，通常就是普通的生产者和消费者。注意，rabbitmqctl 管理 RabbitMQ 的内部用户数据库，所有其他后台需要认证的用户对于rabbitmqctl将不可见。 rabbitmqctl add_user {username} {password}&#123;username&#125; 表示用户名； ｛password｝表示用户密码该命令将创建一个 non-administrative 用户 rabbitmqctl delete_user {username}表示删除一个用户，该命令将指示RabbitMQ broker去删除指定的用户 rabbitmqctl change_password {username} {newpassword}表示修改指定的用户的密码 rabbitmqctl clear_password {username}表示清除指定用户的密码执行此操作后的用户，将不能用密码登录，但是可能通过已经配置的SASL EXTERNAL的方式登录。 rabbitmqctl authenticate_user {username} {password}表示指引RabbitMQ broker认证该用户和密码 rabbitmqctl set_user_tags {username} {tag …}表示设置用户的角色，｛tag｝可以是零个，一个，或者是多个。并且已经存在的tag也将会被移除。rabbitmqctl set_user_tags tonyg administrator 该命令表示指示RabbitMQ broker确保用户tonyg为一个管理员角色。上述命令在用户通过AMQP方式登录时，不会有任何影响；但是如果通过其他方式，例如管理插件方式登录时，就可以去管理用户、vhost 和权限。 rabbitmqctl list_users作用:查看用户信息 结果如下Listing users ...guest [administrator]...done. rabbitmqctl add_user {username} {password}创建新用户例子:rabbitmqctl add_user jshan 123456 结果如下，表示创建成功Creating user &quot;jshan&quot; ......done. 再次查询结果如下： Listing users ...guest [administrator]jshan []...done. 上述结果中，第一列表示用户名，第二列表示用户角色 rabbitmqctl set_user_tags {username} {role}作用:为用户设置用户角色例子:rabbitmqctl set_user_tags jshan monitoring 结果如下，表示设置成功Setting tags for user &quot;jshan&quot; to [monitoring] ......done. 说明一下，执行该命令之后，会先删除该用户已有的角色，然后添加新的角色，可以填写多个角色，如果想删除某个用户的所有角色，可以设置如下：rabbitmqctl set_user_tags {username} rabbitmqctl change_password {username} {newpassword}作用:修改用户密码例子:rabbitmqctl change_password jshan 123 结果如下，表示修改成功Changing password for user &quot;jshan&quot; ......done. rabbitmqctl clear_password {username}作用:清除用户密码例子:rabbitmqctl clear_password jshan 结果如下，表示清除成功Clearing password for user &quot;jshan&quot; ......done.说明一下，执行该命令之后，用户无法对该用户使用密码登录 rabbitmq delete_user jshan删除用户 rabbitmqctl delete_user &#123;username&#125;结果如下，表示删除成功Deleting user &quot;jshan&quot; ......done. Access control(访问控制)注意，rabbitmqctl 管理 RabbitMQ 的内部用户数据库，所有其他后台需要认证的用户的权限对于rabbitmqctl将不可见。 rabbitmqctl add_vhost {vhost}｛vhost｝ 表示待创建的虚拟主机项的名称 rabbitmqctl delete_vhost {vhost}表示删除一个vhost。删除一个vhost将会删除该vhost的所有exchange、queue、binding、用户权限、参数和策略。 rabbitmqctl list_vhosts {vhostinfoitem …}表示列出所有的vhost。其中 &#123;vhostinfoitem&#125; 表示要展示的vhost的字段信息，展示的结果将按照 &#123;vhostinfoitem&#125; 指定的字段顺序展示。这些字段包括： name（名称） 和 tracing （是否为此vhost启动跟踪）。如果没有指定具体的字段项，那么将展示vhost的名称。 rabbitmqctl set_permissions [-p vhost] {user} {conf} {write} {read}表示设置用户权限。 &#123;vhost&#125; 表示待授权用户访问的vhost名称，默认为 &quot;&#x2F;&quot;； &#123;user&#125; 表示待授权反问特定vhost的用户名称； &#123;conf&#125;表示待授权用户的配置权限，是一个匹配资源名称的正则表达式； &#123;write&#125; 表示待授权用户的写权限，是一个匹配资源名称的正则表达式； &#123;read&#125;表示待授权用户的读权限，是一个资源名称的正则表达式。rabbitmqctl set_permissions -p myvhost tonyg &quot;^tonyg-.*&quot; &quot;.*&quot; &quot;.*&quot;例如上面例子，表示授权给用户 &quot;tonyg&quot; 在vhost为 &#96;myvhost&#96; 下有资源名称以 &quot;tonyg-&quot; 开头的 配置权限；所有资源的写权限和读权限。 rabbitmqctl clear_permissions [-p vhost] {username}表示设置用户拒绝访问指定指定的vhost，vhost默认值为 &quot;&#x2F;&quot; rabbitmqctl list_permissions [-p vhost]表示列出具有权限访问指定vhost的所有用户、对vhost中的资源具有的操作权限。默认vhost为 &quot;&#x2F;&quot;。注意，空字符串表示没有任何权限。 rabbitmqctl list_user_permissions {username}表示列出指定用户的权限vhost，和在该vhost上的资源可操作权限。 Parameter Management(参数管理)RabbitMQ的一些特性（例如联合插件）是被动态的、集群范围内的参数控制。有两类参数：属于vhost的参数和全局参数。一个属于vhost的参数由三部分组成： 组件名称，参数名称和值。其中组件名称和名称是字符串，值是一个Erlang项。一个全局参数由两部分组成： 参数名称和值。其中名称是字符串，值是一个Erlang项。参数可以被设置，删除，列出。参数的具体设置方法如下： rabbitmqctl set_parameter [-p vhost] {component_name} {name} {value}设置参数，｛component_name｝表示待设置参数的组件名称，&#123;name&#125; 表示待设置的参数名称，｛value｝表示待设置的参数值，是一个JSON项，在多数shell中，你很有可能要应用该值 rabbitmqctl set_parameter federation local_username ‘“guest”‘上述例子，表示设置默认vhost即 &quot;&#x2F;&quot; 的 federation 组件的参数 local_username 的值设置为JSON项 &quot;guest&quot; rabbitmqctl clear_parameter [-p vhost] {component_name} {key}表示清理一个参数，｛component_name｝表示待清理的组件名称，｛key｝表示待清理的参数名称rabbitmqctl clear_parameter federation local_username上述例子表示清理默认vhost上的组件 federation 的参数 local_username rabbitmqctl list_parameters [-p vhost]表示列举出指定的vhost上的所有参数 rabbitmqctl set_global_parameter {name} {value}设置一个全局运行时的变量，有些类似于 set_parameter ，但是此 key-value 对并不绑定于vhost。 rabbitmqctl set_global_parameter mqtt_default_vhosts &#39;&#123;&quot;O&#x3D;client,CN&#x3D;guest&quot;:&quot;&#x2F;&quot;&#125;&#39;上述例子，设置一个全局运行时的参数 mqtt_default_vhosts 的值为一个JSON项， &#123;&quot;O&#x3D;client,CN&#x3D;guest&quot;:&quot;&#x2F;&quot;&#125; rabbitmqctl clear_global_parameter {name}清除一个全局运行时参数，类似于 clear_parameter，但是此 key-value 对并不绑定于vhost。rabbitmqctl clear_global_parameter mqtt_default_vhosts上述例子，清除一个全局运行时参数 mqtt_default_vhosts rabbitmqctl list_global_parameters列出所有的全局运行时参数，类似于 list_parameters，但是该命令不绑定于任何vhost Policy Management(策略管理)rabbitmqctl set_policy [-p vhost] [–priority priority] [–apply-to apply-to] {name} {pattern} {definition}&#123;name&#125; 表示策略名称；&#123;pattern&#125; 表示当匹配到给定资源的正则表达式，使的该策略得以应用； &#123;definition&#125; 表示策略的定义，作为一个JSON项，在多数shell中，你很可能需要去应用它&#123;priority&#125; 表示策略的优先级的整数，数据越大表示优先级越高，默认值为0&#123;apply_to&#125; 表示策略应该应用的类型： queues&#x2F;exchange&#x2F;all，默认值是 all rabbitmqctl clear_policy [-p vhost] {name}表示清理一个策略。 &#123;name&#125; 表示待清理的策略名称 rabbitmqctl list_policies [-p vhost]表示列举出给定的vhost的所有策略信息 Server Status(服务状态)rabbitmqctl list_queues [-p vhost] [[–offline] | [–online] | [–local]] [queueinfoitem …]返回队列的详细信息。如果 &quot;-p&quot; 标志不存在，那么将返回默认虚拟主机的队列详细信息。&quot;-p&quot; 可以用来覆盖默认vhost。可以使用一下互斥选项之一，通过其状态或者位置过滤显示的队列。[--offline] 表示仅仅列出当前不可用的持久队列（更具体地说，他们的主节点不是）[--online] 表示列出当前可用的队列（他们的主节点是）[--local] 表示仅仅列出那些主程序在当前节点上的队列queueinfoitem参数用于指示要包括在结果中的哪些队列信息项。结果中的列顺序将与参数的顺序相匹配。queueinfoitem可以从以下列表中获取任何值：name 表示队列的名称durable 表示服务器重启之后，队列是否存活auto_delete 表示不再使用的队列是否自动被删除arguments 表示队列的参数policy 表示应用在队列中的策略名称pid 表示和队列相关联的Erlang进程的IDowner_pid 表示作为队列的排他所有者的连接的Erlang进程的ID，如果队列是非排他，则为空exclusive 表示队列是否是排他的，有 owner_pid 返回 True，否则返回 Falseexclusive_consumer_pid 表示排他消费者订阅该队列的频道的Erlang进程的ID，如果没有独家消费者，则为空exclusive_consumer_tag 表示订阅该队列的排他消费者的消费tag。如果没有排他消费者，则为空messages_ready 表示准备被发送到客户端的消息数量messages_unacknowledged 表示已经被发送到客户端但是还没有被确认的消息数量messages 表示准备发送和没有被确认的消息数量总和（队列深度）messages_ready_ram 表示驻留在 ram 里的 messages_ready 的消息数量messages_unacknowledged_ram 表示驻留在 ram 里的 messages_unacknowledged 的消息数量messages_ram 表示驻留在 ram 里的消息总数messages_persistent 表示队列中持久消息的总数（对于临时队列，总是为0）message_bytes 表示在队列中所有消息body的大小，这并不包括消息属性（包括header）或者任何开销message_bytes_ready 表示类似于 messge_bytes 但仅仅计算那些将发送到客户端的消息message_bytes_unacknowledged 表示类似于 message_bytes 但仅仅计算那些已经发送到客户还没有确认的消息message_bytes_ram 表示类似于 message_bytes 但仅仅计算那些驻留在ram中的消息message_bytes_persistent 表示类似于 message_bytes 但仅仅计算那些持久消息head_message_timestamp 表示队列中第一个消息的时间戳属性（如果存在）。只有处在 paged-in 状态的消息才存在时间戳。disk_reads 表示该队列自start起，从磁盘读取消息的次数总和disk_writes 表示该队列自start起，被写入磁盘消息的次数总和consumers 表示consumer的数量consumer_utilisation 表示队列能够立即将消息传递给消费者的时间分数（0.0 ~ 1.0之间），如果消费者受到网络拥塞或者预取计数的限制，该值可能小于1.0memory 表示和该队列相关联的Erlang进程消耗的内存字节数，包括stack&#x2F;heap&#x2F;内部数据结构slave_pids 表示该队列目前的slave的ID号（如果该队列被镜像的话）synchronised_slave_pids 表示如果队列被镜像，给出与主队列同步的当前slave的ID号，即可以从主队列接管而不丢失消息的slave的IDstate 表示队列的状态，一般是 &quot;running&quot;； 如果队列正在同步，也可能是 &quot;&#123;syncing, MsgCount&#125;&quot;； 如果队列所处的节点当前down了，队列显示的状态为 &quot;down&quot;如果没有指定queueinfoitem，那么将显示队列的名称（name）和深度（messages） rabbitmqctl list_exchanges [-p vhost] [exchangeinfoitem …]返回交换器的详细信息。如果 &quot;-p&quot; 标志不存在，那么将返回默认虚拟主机的交换器详细信息。&quot;-p&quot; 可以用来覆盖默认vhost。exchangeinfoitem参数用于指示要包括在结果中的哪些交换器信息项。结果中的列顺序将与参数的顺序相匹配。exchangeinfoitem可以从以下列表中获取任何值：name 表示交换器的名称type 表示交换器类型（例如： direct&#x2F;topic&#x2F;fanout&#x2F;headers）durable 表示服务器重启之后，交换器是否存活auto_delete 表示交换器不再使用时，是否被自动删除internal 表示交换器是否是内部的，例如不能被客户端直接发布arguments 表示交换器的参数policy 表示引用在该交换器上的策略名称如果没有指定任何 exchangeinfoitem，那么该命令将显示交换器的名称（name）和类型（type） rabbitmqctl list_bindings [-p vhost] [bindinginfoitem …]返回绑定的详细信息。如果 &quot;-p&quot; 标志不存在，那么将返回默认虚拟主机的绑定详细信息。&quot;-p&quot; 可以用来覆盖默认vhost。bindinginfoitem参数用于指示要包括在结果中的哪些绑定信息项。结果中的列顺序将与参数的顺序相匹配。bindinginfoitem可以从以下列表中获取任何值：source_name 表示绑定附加到的消息源的名称source_kind 表示绑定附加到的消息源的类型，目前通常交换器destination_name 表示附加绑定到的消息目的地的名称destination_kind 表示附加绑定到的消息目的地的类型routing_key 表示绑定的routing keyarguments 表示绑定的参数如果没有指定任何的 bindinginfoitem ，那么将展示上述所有的参数rabbitmqctl list_bindings -p &#x2F;myvhost exchange_name queue_name上述命令，表示展示在 &#x2F;myvhost 虚拟主机中的绑定的exchange名称和queue名称 rabbitmqctl list_connections [connectioninfoitem …]返回TCP&#x2F;IP连接统计信息connectioninfoitem 参数用于指示要包括在结果中的哪些连接信息项，结果中的列顺序将与参数的顺序相匹配。connectioninfoitem可以从以下列表中获取任何值：pid 表示与该connection相关联的Erlang进程的id号name 表示该连接的可读性名称port 表示服务端口host 表示通过反向DNS获取的服务器主机名，如果反向DNS失败或未启用，则为其IP地址peer_port 表示对等端口peer_host 表示通过反向DNS获取的对等主机名，如果反向DNS失败或未启用，则为其IP地址ssl 表示该连接是否使用SSL保护的bool值ssl_protocal 表示SSL协议(例如： tlsv1)ssl_key_exchange 表示SSL关键交换器算法（例如： rsa）ssl_cipher 表示SSL密码算法（例如： aes_256_cbc）ssl_hash 表示SSL哈希函数（例如： sha）peer_cert_issuer 表示对等体的SSL证书的颁发者，以RFC4514形式出现peer_cert_validity 表示对等体的SSL证书的有效期限state 表示连接状态（例如： starting&#x2F;tuning&#x2F;opening&#x2F;running&#x2F;flow&#x2F;blocking&#x2F;blocked&#x2F;closing&#x2F;closed）channels 表示正在使用连接的通道数量protocol 表示正在使用的AMQP的版本号。注意，如果一个客户端需要一个AMQP 0-9 连接，我们将其作为 AMQP 0-9-1auth_mechanism 表示使用SASL认证机制，如PLANuser 表示和该连接相关联的用户名vhost 表示vhost名称timeout 表示连接超时&#x2F;协商心跳间隔，单位为秒frame_max 表示最大的frame大小（byte）channel_max 表示该连接上通道的最大数量client_properties 表示在连接建立期间，有客户端传送的消息属性recv_oct 表示接受到的八位字节recv_cnt 表示接受到的包send_oct 表示发送的八位字节send_cnt 表示发送的包send_pend 表示发送的队列大小connected_at 表示该连接被建立的日期和时间的时间戳格式如果没有指定任何connectioninfoitem，那么将展示：user&#x2F;peer_host&#x2F;peer_port&#x2F;流量控制和内存块状态之后的时间 rabbitmqctl list_channels [channelinfoitem …]返回所有当前的通道的信息，通道即一个执行大多数AMQP命令的逻辑容器。这包括由普通AMQP连接的一部分通道、由各种插件和其他扩展程序创建的通道。channelinfoitem 参数用于指示要包括在结果中的哪些连接信息项，结果中的列顺序将与参数的顺序相匹配。channelinfoitem 可以从以下列表中获取任何值：pid 表示与该连接相关联的Erlang程序的ID号connection 表示与通道所属连接相关联的Erlang进程的ID号name 表示通道的可读性名称number 表示通道的号码，在连接中唯一表示它user 表示和该通道相关联的用户名vhost 表示通道操作所在的vhosttransactional 表示通道是否处于事务模式，返回 true，否则返回 falseconfirm 表示通道是否处于确认模式，返回 true, 否则返回 falseconsumer_count 表示通过通道检索消息的逻辑AMQP消费者数量messages_unacknowledged 表示通过通道发送过但还没收到反馈的消息的数量messages_uncommitted 表示尚未提交的事务中接受的消息数acks_uncommitted 表示尚未提交的事务中接受的确认数messages_unconfirmed 表示尚未确认已发布的消息数量。在不处于确认模式中的通道上，该值为0prefetch_count 表示新消费者的QoS预取限制，如果没有限制则为0global_prefetch_count 表示整个通道的QoS预取限制，如果没有限制则为0如果没有指定任何 channelinfoitem 项，那么将展示 pid&#x2F;user&#x2F;consumer_count&#x2F;messages_unacknowledged rabbitmqctl list_consumers [-p vhost]列出消费者，例如对一个队列的消息流的订阅者。每一行用tab字符分隔：订阅的队列名称、创建和管理订阅的通道id、在通道中唯一标识订阅的消费者tag、消息传输到订阅者之后是否需要确认的bool值、代表预取限制的整数（0表示none）、订阅者的其他参数 rabbitmqctl status展示broker的状态信息，例如在当前Erlang节点上正在运行的应用、RabbitMQ和Erlang版本号、OS名称、内存和文件描述统计信息 rabbitmqctl node_health_checkRabbitMQ节点的健康检查，验证 Rabbit 应用正在运行，list_queues和list_channels返回，警告没有被设置rabbitmqctl node_health_check -n rabbit@stringer上述例子，表示对RabbitMQ节点进行健康检查&#96;&#96;&#96;&#96;## rabbitmqctl environment 在每个正在运行的应用程序的应用程序环境中，显示每个变量的名称和值 ## rabbitmqctl report 生成服务器状态报告，其中包括用于支持目的的所有服务器状态信息的并置。当伴随支持请求时，输出应该被重定向到一个文件rabbitmqctl report &gt; server_report.txt ## rabbitmqctl eval &#123;expr&#125; 评估一个任务Erlang表达式rabbitmqctl eval ‘node().’上述例子，将返回 rabbitmqctl 已经连接的节点名称 # Miscellaneous(繁杂)## rabbitmqctl close_connection &#123;connectionpid&#125; &#123;explanation&#125; {connectionpid} 表示待关闭连接的Erlang进程的ID号{explanation} 表示解释字符串指引broker去关闭与ID为 {connectionid} Erlang进程相关联的连接，作为AMQP连接关闭协议的一部分，它也会向连接的客户端传递 {explanation} 字符串rabbitmqctl close_connection “&#x72;&#x61;&#98;&#98;&#x69;&#116;&#x40;&#116;&#x61;&#x6e;&#116;&#x6f;&#46;&#52;&#x32;&#x36;&#x32;&#46;&#x30;“ “go away”上述例子，表示关闭与ID号为 “&#114;&#x61;&#98;&#98;&#x69;&#116;&#x40;&#116;&#x61;&#110;&#116;&#x6f;&#46;&#x34;&#50;&#54;&#50;&#x2e;&#x30;“ 的Erlang进程相关联的连接，并向连接的客户端传输解释性语句 “go away”。 ## rabbitmqctl trace_on [-p vhost] vhost 表示要启动跟踪的虚拟机名称。开始跟踪。注意，跟踪状态不是持久的，如果服务重启，它将恢复为关闭 ## rabbitmqctl trace_off [-p vhost]作用:停止跟踪## rabbitmqctl set_vm_memory_high_watermark &#123;fraction&#125; {fraction} 触发流量控制的新内存阈值分数，大于或等于0的浮点数 ## rabbitmqctl set_vm_memory_high_watermark absolute &#123;memory_limit&#125; {memory_limit} 触发流量控制的新内存限制，以字节表示，大于或等于0的整数或作为具有存储单元（例如： 512M或者1G），可用的单位有：k/kiB： kibibytes(2^10字节)； M/MiB: mebibytes(2^20字节)； G/GiB: gibibytes(2^30字节)kB: kilobytes(10^3); MB: megabytes(10^6); GB: gigabytes(10^9) ## rabbitmqctl set_disk_free_limit &#123;disk_limit&#125; {disk_limit} 下限为字节整数或具有存储单元的字符串（参见 vm_memory_high_watermark 命令），例如： 512M或1G，一旦可用磁盘空间达到限制，将会设置磁盘告警 ## rabbitmqctl set_disk_free_limit mem_relative &#123;fraction&#125; {fraction} 相对于可用RAM的限制，为非负的浮点数。低于1.0的值可能是危险的，应小心使用。 ## rabbitmqctl encode [--decode] [value] [passphrase] [--list-ciphers] [--list-hashes] [--cipher cipher] [--hash hash] [--iterations iteraions] [–decode] 表示解密输入值的标志位。例如: rabbitmqctl encode –decode ‘{encrypted,’&lt;&lt;”…”&gt;&gt;}’ mypassphrase[value] [passphrase] 表示加密和解密的值、密码。 例如： rabbitmqctl encode ‘&lt;&lt;”guest”&gt;&gt;’ mypassphrase 。例如： rabbitmqctl encode –decode ‘{encrypted,’&lt;&lt;”…”&gt;&gt;}’ mypassphrase[–list-ciphers] 表示列出支持的密码标志位。例如： rabbitmqctl encode –list-ciphers。[–list-hashes] 表示列出支持的哈希算法标志位。例如： rabbitmqctl encode –list-hashes。[–cipher cipher] [–hash hash] [–iterations iterations] 表示用于指定加密设置的选项，它们可以独立使用。例如： rabbitmqctl encode –cipher blowfish_cfb64 –hash sha256 –iterations 1000 ‘&lt;&lt;”guest”&gt;&gt;’ mypassphrase```","categories":[{"name":"rabbitmq/kafka知识体系","slug":"rabbitmq-kafka知识体系","permalink":"https://jxdw.github.io/categories/rabbitmq-kafka%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【java框架系列】spring-cloud之netfix-ribbon","slug":"spring-cloud-1x-cloud-netfix-ribbon","date":"2017-12-03T09:14:29.000Z","updated":"2020-10-22T14:25:25.944Z","comments":true,"path":"2017/12/03/spring-cloud-1x-cloud-netfix-ribbon/","link":"","permalink":"https://jxdw.github.io/2017/12/03/spring-cloud-1x-cloud-netfix-ribbon/","excerpt":"关于spring boot/cloud 1.X系列关于spring boot 1.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring data redis client、spring web service，进而集大成。","text":"关于spring boot/cloud 1.X系列关于spring boot 1.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring data redis client、spring web service，进而集大成。 关于spring cloud 1.X系列Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client、eureka client。","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【java实现微服务架构系列】spring-cloud edgware版本解读","slug":"spring-cloud-1x-talka-bout-cloud-14","date":"2017-11-30T02:45:49.000Z","updated":"2020-10-22T14:25:31.784Z","comments":true,"path":"2017/11/30/spring-cloud-1x-talka-bout-cloud-14/","link":"","permalink":"https://jxdw.github.io/2017/11/30/spring-cloud-1x-talka-bout-cloud-14/","excerpt":"概述参考资料https://spring.io/blog/2017/11/27/spring-cloud-edgware-release-available","text":"概述参考资料https://spring.io/blog/2017/11/27/spring-cloud-edgware-release-available 关于spring boot/cloud 1.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring data redis client、spring web service，进而集大成。 关于spring cloudSpring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client、eureka client。 springcloud非商业公司部分spring-cloud-commonSpring Cloud Commons是一组在不同Spring Cloud实现中使用的抽象和公共类（例如，Spring Cloud Netflix与Spring Cloud Consul）不会单独拿出来分享。 Spring-Cloud-GatewaySpring-Cloud-Gateway提供了一个用于在Spring MVC之上构建API网关的库。后面找机会展开学习和分享spring-cloud-gateway。 Spring-Cloud-StreamSpring Cloud Stream是基于spring integration框架的一个用于构建与共享消息传递系统相连的高度可扩展的事件驱动的微服务的框架。后面找机会展开学习和分享spring-cloud-stream。 Spring-Cloud-SleuthSpring Cloud Sleuth为Spring Cloud大量借用Dapper，和HTrace实施分布式跟踪的一套解决方案。后面找机会展开学习和分享spring-cloud-sleuth。 spring-cloud商业公司部分spring-cloud-netfixSpring Cloud Netflix通过自动配置、Spring环境、其他Spring编程模型等技术为Spring Boot应用程序提供Netflix OSS集成。这家公司很良心，后面找机会展开学习和分享spring-cloud-netfix。 spring-cloud-awsspring-cloud-aws是为更好的集成aws而提供的一套spring框架。没有机会上aws云，就不入坑了。 附录","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【java框架系列】spring boot将rpc服务的业务逻辑暴露成http服务","slug":"rpc_service_expose_http","date":"2017-10-28T11:41:34.000Z","updated":"2020-10-22T14:24:53.994Z","comments":true,"path":"2017/10/28/rpc_service_expose_http/","link":"","permalink":"https://jxdw.github.io/2017/10/28/rpc_service_expose_http/","excerpt":"本文参考资料https://juejin.im/post/5908a811da2f60005d188aee","text":"本文参考资料https://juejin.im/post/5908a811da2f60005d188aee 定义数据模型请求协议请求url：http:&#x2F;&#x2F;url&#x2F;接口&#x2F;方法请求参数：param:&#123;json串&#125; 服务端对请求的封装public class HttpRequest &#123; private String param; private String service; private String method; set&#x2F;get方法&#125; 服务端的通用应答public class HttpResponse implements Serializable &#123; private boolean success; private String code; private String description; set&#x2F;get方法&#125; 具体实现application.yml配置conf: package: com.jxdw.dubbo.service&#96;&#96;&#96; ## 配置类 @Componentpublic class HttpProviderConf { @Value(&quot;$&#123;conf.package&#125;&quot;) private String usePackageString; private List&lt;String&gt; userPackage; public List&lt;String&gt; getUserPackage() &#123; return userPackage; &#125; public void setUserPackage(List&lt;String&gt; userPackage) &#123; this.userPackage =Arrays.asList(StringUtils.split(usePackageString,&quot;,&quot;)); &#125; } ## 业务类 import com.alibaba.fastjson.JSON;import com.jxdw.config.HttpProviderConf;import com.jxdw.config.HttpRequest;import com.jxdw.config.HttpResponse;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.BeansException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import org.springframework.stereotype.Controller;import org.springframework.util.CollectionUtils;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody; import javax.servlet.http.HttpServletRequest;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.net.InetAddress;import java.net.UnknownHostException;import java.util.HashMap;import java.util.Map; @Controller@RequestMapping(“/ThriftAPI”)public class ThriftServiceController implements ApplicationContextAware { private final static Logger logger= LoggerFactory.getLogger(ThriftServiceController.class); private ApplicationContext applicationContext; @Autowired private HttpProviderConf httpProviderConf; private final Map&lt;String, Class&lt;?&gt;&gt; cacheMap = new HashMap&lt;String, Class&lt;?&gt;&gt;(); @Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123; this.applicationContext=applicationContext; &#125; @ResponseBody @RequestMapping(value = &quot;/&#123;service&#125;/&#123;method&#125;&quot;,method = RequestMethod.POST) public String api(HttpServletRequest httpServletRequest, HttpRequest httpRequest, @PathVariable String service, @PathVariable String method)&#123; logger.info(&quot;ip-&#123;&#125;,http-request &#123;&#125;&quot;,getIp(httpServletRequest), JSON.toJSONString(httpRequest)); String invoke= invoke(httpRequest,service,method); logger.info(&quot;callback &#123;&#125;&quot;,invoke); return invoke; &#125; private String invoke(HttpRequest httpRequest, String service, String method) &#123; httpRequest.setMethod(method); httpRequest.setService(service); HttpResponse httpResponse=new HttpResponse(); if (!CollectionUtils.isEmpty(httpProviderConf.getUserPackage()))&#123; boolean isPac=false; for(String pac:httpProviderConf.getUserPackage())&#123; if(service.startsWith(pac))&#123; isPac=true; break; &#125; &#125; if (!isPac)&#123; logger.error(&quot;service is not correct service is &#123;&#125;&quot;,service); httpResponse.setCode(&quot;2&quot;); httpResponse.setSuccess(false); httpResponse.setDescription(&quot;service is not conrect&quot;); &#125; &#125; Class&lt;?&gt; serviceClass=cacheMap.get(service); if (serviceClass==null)&#123; try &#123; serviceClass=Class.forName(service); cacheMap.put(service,serviceClass); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; &#125; if (method == null)&#123; logger.error(&quot;method is not correct,method=&quot;+method); httpResponse.setCode(&quot;2&quot;); httpResponse.setSuccess(false); httpResponse.setDescription(&quot;method is not correct,method=&quot;+method); &#125; Method[] methodArray=serviceClass.getMethods(); Method targetMethod=null; Boolean isMethod=false; for (Method method1:methodArray)&#123; if (method1.getName().equals(method))&#123; targetMethod=method1; isMethod=true; break; &#125; &#125; if (!isMethod)&#123; logger.error(&quot;method is not correct,method=&quot;+method); httpResponse.setCode(&quot;3&quot;); httpResponse.setSuccess(false); httpResponse.setDescription(&quot;method is not correct,method=&quot;+method); return JSON.toJSONString(httpResponse); &#125; Object bean=this.applicationContext.getBean(serviceClass); Object result=null; if (targetMethod!=null)&#123; Class&lt;?&gt;[] parameterTypes=targetMethod.getParameterTypes(); try&#123; if (parameterTypes.length==0)&#123; result=targetMethod.invoke(bean); return JSON.toJSONString(result); &#125;else if(parameterTypes.length==1)&#123; Object json=JSON.parseObject(httpRequest.getParam(),parameterTypes[0]); result=targetMethod.invoke(bean,json); return JSON.toJSONString(result); &#125;else &#123; logger.error(&quot;can only have one parameter&quot;); httpResponse.setCode(&quot;2&quot;); httpResponse.setSuccess(false); httpResponse.setDescription(&quot;can only have one parameter&quot;); &#125; &#125; catch (InvocationTargetException inException)&#123; logger.error(&quot;&#123;&#125;&quot;,inException); &#125;catch(IllegalAccessException illException)&#123; logger.error(&quot;&#123;&#125;&quot;,illException); &#125; return JSON.toJSONString(httpResponse); &#125; return null; &#125; private Object getIp(HttpServletRequest httpServletRequest) &#123; if (httpServletRequest == null) return null; String s = httpServletRequest.getHeader(&quot;X-Forwarded-For&quot;); if (s == null || s.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(s)) &#123; s = httpServletRequest.getHeader(&quot;Proxy-Client-IP&quot;); &#125; if (s == null || s.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(s)) &#123; s = httpServletRequest.getHeader(&quot;WL-Proxy-Client-IP&quot;); &#125; if (s == null || s.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(s)) &#123; s = httpServletRequest.getHeader(&quot;HTTP_CLIENT_IP&quot;); &#125; if (s == null || s.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(s)) &#123; s = httpServletRequest.getHeader(&quot;HTTP_X_FORWARDED_FOR&quot;); &#125; if (s == null || s.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(s)) &#123; s = httpServletRequest.getRemoteAddr(); &#125; if (&quot;127.0.0.1&quot;.equals(s) || &quot;0:0:0:0:0:0:0:1&quot;.equals(s)) try &#123; s = InetAddress.getLocalHost().getHostAddress(); &#125; catch (UnknownHostException unknownhostexception) &#123; return &quot;&quot;; &#125; return s; &#125; }","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【centos使用系列】centos7二进制安装go sdk和java sdk","slug":"centos7-binary-install-software","date":"2017-10-25T11:45:35.000Z","updated":"2020-10-24T13:11:05.694Z","comments":true,"path":"2017/10/25/centos7-binary-install-software/","link":"","permalink":"https://jxdw.github.io/2017/10/25/centos7-binary-install-software/","excerpt":"安装go sdk下载二进制包和解压wget https:&#x2F;&#x2F;dl.google.com&#x2F;go&#x2F;go1.8.4.linux-amd64.tar.gz (访问不了，可能要搭梯子)tar zxvf go1.8.4.linux-amd64.tar.gz -C &#x2F;usr&#x2F;local&#x2F;","text":"安装go sdk下载二进制包和解压wget https:&#x2F;&#x2F;dl.google.com&#x2F;go&#x2F;go1.8.4.linux-amd64.tar.gz (访问不了，可能要搭梯子)tar zxvf go1.8.4.linux-amd64.tar.gz -C &#x2F;usr&#x2F;local&#x2F; 配置profilemkdir -p &#x2F;data&#x2F;server&#x2F;go_program vim /etc/profile GOPATH&#x3D;&#x2F;data&#x2F;server&#x2F;go_programGOROOT&#x3D;&#x2F;usr&#x2F;local&#x2F;goGOBIN&#x3D;&#x2F;usr&#x2F;local&#x2F;go&#x2F;binexport PATH&#x3D;$PATH:$GOBIN 然后执行 source &#x2F;etc&#x2F;profile 安装java sdk注册一个oracle账号直接到官网上注册一个。 下载二进制包wget https:&#x2F;&#x2F;download.oracle.com&#x2F;otn&#x2F;java&#x2F;jdk&#x2F;8u102-b14&#x2F;jdk-8u102-linux-x64.tar.gz?AuthParam&#x3D;1556950816_9e12f84633d6ef39d26f9c17c827a965mv jdk-8u102-linux-x64.tar.gz?AuthParam&#x3D;1556950816_9e12f84633d6ef39d26f9c17c827a965 jdk-8u102-linux-x64.tar.gztar zxvf jdk-8u102-linux-x64.tar.gz -C &#x2F;usr&#x2F;local&#x2F; 解压和配置profileexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8.0_161 export JRE_HOME&#x3D;$JAVA_HOME&#x2F;jre export CLASS_PATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jarexport PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$JRE_HOME&#x2F;bin 然后执行 source &#x2F;etc&#x2F;profile","categories":[{"name":"centos知识体系","slug":"centos知识体系","permalink":"https://jxdw.github.io/categories/centos%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【java框架系列】spring boot阶段性总结","slug":"java-spring-boot-1x-talk-about_boot","date":"2017-10-21T03:28:53.000Z","updated":"2020-10-22T14:23:58.201Z","comments":true,"path":"2017/10/21/java-spring-boot-1x-talk-about_boot/","link":"","permalink":"https://jxdw.github.io/2017/10/21/java-spring-boot-1x-talk-about_boot/","excerpt":"概述本文背景从2016年接触，2017年全面升级到spring boot，差不多也有一段时间了。spring boot也升级了多个版本。 准备资料官方blog: https://spring.io/blog/2017/10/17/spring-boot-1-5-8-available-now官方文档: https://docs.spring.io/spring-boot/docs/1.5.8.RELEASE/reference/pdf/spring-boot-reference.pdf","text":"概述本文背景从2016年接触，2017年全面升级到spring boot，差不多也有一段时间了。spring boot也升级了多个版本。 准备资料官方blog: https://spring.io/blog/2017/10/17/spring-boot-1-5-8-available-now官方文档: https://docs.spring.io/spring-boot/docs/1.5.8.RELEASE/reference/pdf/spring-boot-reference.pdf 关于spring boot 1.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring data redis client、spring web service，进而集大成。Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client、eureka client。 spring boot 1.5.X版本版本特性我们看下官方文档中的spring boot1.5.X版本的特性： springApplication（这个肯定得用） Externalized Configuration（这个肯定得用） profile（这个不怎么用） logging（这个不怎么用） develop web application（这个肯定得用） Security（这个没有怎么用） Working with SQL databases（这个没有怎么用） Working with NoSQL technologies（这个没怎么用） caching（这个肯定得用） messaging（这个肯定得用） Calling REST services（这个没用） Validation（这个没用） Sending email（这个没用） Distributed Transactions with JTA（这个没用） Spring Integration（这个肯定得用） Spring Session（这个没用） Monitoring and management over JMX（这个没用） Testing（这个肯定得用） websocket（这个没用） web services（这个没用） Spring Boot Actuator: Production-ready features（这个没用，其实要用了，就没啥自定义开发啥事了） 源码预览 附录","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【centos使用系列】centos7下自定义脚本开机自启动","slug":"centos7-self-shell-reboot","date":"2017-08-30T04:31:17.000Z","updated":"2020-10-24T13:11:05.796Z","comments":true,"path":"2017/08/30/centos7-self-shell-reboot/","link":"","permalink":"https://jxdw.github.io/2017/08/30/centos7-self-shell-reboot/","excerpt":"备注本命令可能很久才会用一次","text":"备注本命令可能很久才会用一次 修改/etc/rc.local#!&#x2F;bin&#x2F;bash# THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES## It is highly advisable to create own systemd services or udev rules# to run scripts during boot instead of using this file.## In contrast to previous versions due to parallel execution during boot# this script will NOT be run after all other services.## Please note that you must run &#39;chmod +x &#x2F;etc&#x2F;rc.d&#x2F;rc.local&#39; to ensure# that this script will be executed during boot.touch &#x2F;var&#x2F;lock&#x2F;subsys&#x2F;local&#x2F;bin&#x2F;su - zookeeper -c &quot;&#x2F;data&#x2F;zookeeper&#x2F;bin&#x2F;zkServer.sh start &amp;&quot; # 启动zookeeper服务docker ps -a|awk &#39;&#123;print $1&#125;&#39;|xargs docker start #重启docker里面的服务&#x2F;bin&#x2F;su - bbs_abc -c &quot;&#x2F;data&#x2F;server&#x2F;bbs&#x2F;abc&#x2F;bin&#x2F;server.sh restart &amp;&quot; 给/etc/rc.d/rc.local执行权限chmod a+x /etc/rc.d/rc.local reboot查看效果服务已经启动了。","categories":[{"name":"centos知识体系","slug":"centos知识体系","permalink":"https://jxdw.github.io/categories/centos%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【centos使用系列】玩转centos7之程序安装与启动(rpm、yum、systemd)","slug":"centos7-install-software","date":"2017-08-05T13:11:16.000Z","updated":"2020-10-24T13:11:05.767Z","comments":true,"path":"2017/08/05/centos7-install-software/","link":"","permalink":"https://jxdw.github.io/2017/08/05/centos7-install-software/","excerpt":"提示进行下面的操作前，最好修改下dns(查找速度)： vim &#x2F;etc&#x2F;resolv.conf 升级curl、nss：yum update nss curl","text":"提示进行下面的操作前，最好修改下dns(查找速度)： vim &#x2F;etc&#x2F;resolv.conf 升级curl、nss：yum update nss curl 程序安装包技术rpmrpm包与源码包的对比 rpm help命令 本机已安装的包 程序安装关键技术yumrepo概念repo文件是Fedora中yum源（软件仓库）的配置文件，通常一个repo文件定义了一个或者多个软件仓库的细节内容。例如我们将从哪里下载需要安装或者升级的软件包，repo文件中的设置内容将被yum读取和应用！更多的源介绍，可以参考: https://jxdw.github.io/2017/08/05/centos7-repo-introduce/ yum介绍yum(Yellow dog Updater, Modified)是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。yum提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。YUM的工作原理并不复杂，每一个 RPM软件的头（header）里面都会纪录该软件的依赖关系，那么如果可以将该头的内容纪录下来并且进行分析，可以知道每个软件在安装之前需要额外安装 哪些基础软件。也就是说，在服务器上面先以分析工具将所有的RPM档案进行分析，然后将该分析纪录下来，只要在进行安装或升级时先查询该纪录的文件，就可以知道所有相关联的软件。 yum配置文件解析cat &#x2F;etc&#x2F;yum.conf[main]cachedir&#x3D;&#x2F;var&#x2F;cache&#x2F;yum&#x2F;$basearch&#x2F;$releaseverkeepcache&#x3D;0debuglevel&#x3D;2logfile&#x3D;&#x2F;var&#x2F;log&#x2F;yum.logexactarch&#x3D;1obsoletes&#x3D;1gpgcheck&#x3D;1plugins&#x3D;1installonly_limit&#x3D;5bugtracker_url&#x3D;http:&#x2F;&#x2F;bugs.centos.org&#x2F;set_project.php?project_id&#x3D;23&amp;ref&#x3D;http:&#x2F;&#x2F;bugs.centos.org&#x2F;bug_report_page.php?category&#x3D;yumdistroverpkg&#x3D;centos-release 各个文件存放在/etc/yum.repos.d目录下。 更换yum源一直有一个现实的问题：在国内下载某些国外的软件会很慢。所以，一般会选择aliyun或者163的源仓库。更换步骤： 备份原来的yum源cp &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo.bak 设置aliyun的yum源wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo 添加EPEL源EPEL (http://fedoraproject.org/wiki/EPEL) 是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。装上 EPEL后，可以像在 Fedora 上一样，可以通过 yum install package-name，安装更多软件。 wget -P &#x2F;etc&#x2F;yum.repos.d&#x2F; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo 清理缓存并生成新的缓存yum clean all yum makecache 其他的源暂时不需要更新内核，所以，就不用装elrepo源。自此，结束。 yum其他命令输入man yum可以看到参考手册： 程序启动关键技术systemdsystemd的历史Systemd目的是要取代Unix时代以来一直在使用的init系统，兼容SysV和LSB的启动脚本，而且够在进程启动过程中更有效地引导加载服务。Systemd的很多概念来源于苹果Mac OS操作系统上的launchd，不过launchd专用于苹果系统，因此长期未能获得应有的广泛关注。Systemd借鉴了很多launchd的思想。Systemd是Linux系统中最新的初始化系统（init），它主要的设计目标是克服SysV init 固有的缺点，提高系统的启动速度。systemd和ubuntu的upstart 是竞争对手，预计会取代 UpStart，然而在Ubuntu 15.04采用systemd作为默认引导程序，debian8也开始使用systemd。足以看出systemd的流行度。 systemd的特点CentOS 7使用systemd替换了SysV。下面是一些特别要注意的和之前主要版本的RHEL不再兼容的部分。1.systemd对运行级别支持有限为了保存兼容，systemd提供一定数量的target单元，可以直接和运行级别对应，也可以被早期的分布式的运行级别命令支持。不是所有的target都可以被映射到运行级别，在这种情况下，使用runlevel命令有可能会返回一个为N的不知道的运行级别，所以推荐尽量避免在RHEL7中使用runlevel命令。 2.systemd不支持像init脚本那样的个性化命令。除了一些标准命令参数例如：start、stop、status，SysV init脚本可以根据需要支持想要的任何参数，通过参数提供附加的功能，因为SysV init的服务器脚本实际上就是shell脚本，命令参数实际上就是shell子函数。举个例子，RHEL6的iptables服务脚本可以执行panic命令行参数，这个参数可以让系统立即进入紧急模式，丢弃所有的进入和发出的数据包。但是类似这样的命令行参数在systemd中是不支持的，systemd只支持在配置文件中指定命令行参数。 3.systemd不支持和没有从systemd启动的服务通讯当systemd启动服务的时候，他保存进程的主ID以便于追踪，systemctl工具使用进程PID查询和管理服务。相反的，如果用户从命令行启动特定的服务，systemctl命令是没有办法判断这个服务的状态是启动还是运行的。 4.systemd可以只停止运行的服务在RHEL6及之前的版本，当关闭系统的程序启动之后，RHEL6的系统会执行/etc/rc0.d/下所有服务脚本的关闭操作，不管服务是处于运行或者根本没有运行的状态。而systemd可以做到只关闭在运行的服务，这样可以大大节省关机的时间。 5.不能从标准输出设备读到系统服务信息。systemd启动服务的时候，将标准输出信息定向到/dev/null，以免打扰用户。 6.systemd不继承任何上下文环境。systemd不继承任何上下文环境，如用户或者会话的HOME或者PATH的环境变量。每个服务得到的是干净的上下文环境。 7.SysV init脚本依赖性。当systemd启动SysV init脚本，systemd在运行的时候，从LinuxStandardBase(LSB)Linux标准库头文件读取服务的依赖信息并继承。 8.超时机制。为了防止系统被卡住，所有的服务有5分钟的超时机制。 systemd的架构和优缺点Systemd 的优点是功能强大，使用方便，缺点是体系庞大，非常复杂。事实上，现在还有很多人反对使用 Systemd，理由就是它过于复杂，与操作系统的其他部分强耦合，违反”keep simple, keep stupid”的Unix 哲学。下图是systemd的架构图（图片来自网络）： systemd的概念模型单元的概念在RHEL7之前，服务管理是分布式的被SysV init或UpStart通过/etc/rc.d/init.d下的脚本管理。这些脚本是经典的Bash脚本，允许管理员控制服务的状态。在RHEL7中，这些脚本被服务单元文件替换。系统初始化需要做的事情非常多。需要启动后台服务，比如启动 SSHD 服务；需要做配置工作，比如挂载文件系统。这个过程中的每一步都被 systemd 抽象为一个配置单元，即 unit。Systemd可以管理所有系统资源。不同的资源统称为 Unit（单位）。可以认为一个服务是一个配置单元；一个挂载点是一个配置单元；一个交换分区的配置是一个配置单元；等等。systemd 将配置单元归纳为以下一些不同的类型。然而，systemd 正在快速发展，新功能不断增加。所以配置单元类型可能在不久的将来继续增加。systemd中有许多单元类型，服务单元文件的扩展名是.service，同脚本的功能相似。例如有查看、启动、停止、重启、启用或者禁止服务的参数。下面说明下，systemd单元文件放置位置：/run/systemd/system #单元运行时创建，这个目录优先于按照目录/etc/systemd/system #系统管理员创建和管理的单元目录，优先级最高/usr/lib/systemd/system/system #默认单元文件安装目录有了对systemd的基本认识后，下面就开始来介绍相关的操作命令。但是注意一点，systemd并不是一个命令，而是一组命令，涉及到系统管理的方方面面。 systemd命令1.查看当前系统的所有Unit systemctl list-units #列出正在运行的Unitsystemctl list-units --all #列出所有Unit，包括没有找到配置文件的或者启动失败的systemctl list-units --all --state&#x3D;inactive #列出所有没有运行的Unitsystemctl list-units --failed #列出所有加载失败的Unitsystemctl list-units --type&#x3D;service #列出所有正在运行的、类型为service的Unit 2.unit.service管理命令 systemctl start name.service #启动一个服务systemctl stop name.service #关闭一个服务systemctl restart name.service #重启一个服务systemctl reload name.service #重载一个服务systemctl try-restart name.service #仅当服务运行的时候，重启服务systemctl kill name.service # 杀死一个服务的所有子进程systemctl daemon-reload #重载所有修改过的配置文件systemctl enable name.service #允许服务开机启动systemclt disable name.service #禁止服务开机启动systemctl list-dependencies nginx.service #命令列出一个Unit的所有依赖systemctl show httpd.service #显示某个Unit的所有底层参数systemctl show -p CPUShares httpd.service #显示某个Unit的指定属性的值systemctl set-property httpd.service CPUShares&#x3D;500 # 设置某个Unit的指定属性 3.电源管理命令（systemctl） systemctl reboot #重启机器systemctl poweroff #关机systemctl suspend #待机systemctl hibernate #休眠systemctl hybrid-sleep #混合休眠模式（同时休眠到硬盘并待机） 4.系统引导性能分析命令（systemd-analyze） 5.systemd的日志服务systemd 自带日志服务 journald，该日志服务的设计初衷是克服现有的 syslog 服务的缺点。比如：syslog不安全，消息的内容无法验证。每一个本地进程都可以声称自己是 Apache PID 4711，而 syslog 也就相信并保存到磁盘上。数据没有严格的格式，非常随意。自动化的日志分析器需要分析人类语言字符串来识别消息。一方面此类分析困难低效；此外日志格式的变化会导致分析代码需要更新甚至重写。Systemd Journal 用二进制格式保存所有日志信息，用户使用 journalctl 命令来查看日志信息。无需自己编写复杂脆弱的字符串分析处理程序。 journalctl #查看所有日志（默认情况下 ，只保存本次启动的日志）journalctl -k #查看内核日志（不显示应用日志）journalctl -b #查看系统本次启动的日志journalctl -b -0journalctl -b -1 # 查看上一次启动的日志（需更改设置）journalctl --since&#x3D;&quot;2012-10-30 18:17:16&quot; # 查看指定时间的日志journalctl --since &quot;20 min ago&quot; # 查看指定时间的日志journalctl --since yesterday # 查看指定时间的日志journalctl --since &quot;2015-01-10&quot; --until &quot;2015-01-11 03:00&quot; # 查看指定时间的日志journalctl --since 09:00 --until &quot;1 hour ago&quot; # 查看指定时间的日志journalctl -n # 显示尾部的最新10行日志journalctl -n 20 # 显示尾部指定行数的日志journalctl -f # 实时滚动显示最新日志journalctl &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;systemd # 查看指定服务的日志journalctl _PID&#x3D;1 # 查看指定进程的日志journalctl &#x2F;usr&#x2F;bin&#x2F;bash # 查看某个路径的脚本的日志journalctl _UID&#x3D;33 --since today # 查看指定用户的日志journalctl -u nginx.service # 查看某个 Unit 的日志journalctl -u nginx.service --since todayjournalctl -u nginx.service -f # 实时滚动显示某个 Unit 的最新日志journalctl -u nginx.service -u php-fpm.service --since today # 合并显示多个 Unit 的日志journalctl -p err -b # 查看指定优先级（及其以上级别）的日志，共有8级-0: emerg、1: alert、2: crit、3: err、4: warning、5: notice、6: info、7: debugjournalctl --no-pager # 日志默认分页输出，--no-pager 改为正常的标准输出journalctl -b -u nginx.service -o json # 以JSON格式（单行）输出journalctl -b -u nginx.serviceqq -o json-pretty # 以JSON格式（多行）输出，可读性更好journalctl --disk-usage # 显示日志占据的硬盘空间journalctl --vacuum-size&#x3D;1G # 指定日志文件占据的最大空间journalctl --vacuum-time&#x3D;1years # 指定日志文件保存多久 例子(mysqld为例)# systemd service file for MySQL forking server[Unit]Description&#x3D;MySQL ServerDocumentation&#x3D;man:mysqld(8)Documentation&#x3D;http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;en&#x2F;using-systemd.htmlAfter&#x3D;network.targetAfter&#x3D;syslog.target[Install]WantedBy&#x3D;multi-user.target[Service]User&#x3D;mysqlGroup&#x3D;mysqlType&#x3D;forkingPIDFile&#x3D;&#x2F;data&#x2F;mysql&#x2F;run&#x2F;mysqld.pid# Disable service start and stop timeout logic of systemd for mysqld service.TimeoutSec&#x3D;0# Execute pre and post scripts as rootPermissionsStartOnly&#x3D;true# Needed to create system tables#ExecStartPre&#x3D;&#x2F;home&#x2F;bin&#x2F;mysqld_pre_systemd# Start main serviceExecStart&#x3D;&#x2F;data&#x2F;mysql&#x2F;bin&#x2F;mysqld --daemonize --pid-file&#x3D;&#x2F;data&#x2F;mysql&#x2F;run&#x2F;mysqld.pid $MYSQLD_OPTS# Use this to switch malloc implementationEnvironmentFile&#x3D;-&#x2F;etc&#x2F;sysconfig&#x2F;mysq# Sets open_files_limitLimitNOFILE &#x3D; 65535Restart&#x3D;on-failureRestartPreventExitStatus&#x3D;1PrivateTmp&#x3D;false","categories":[{"name":"centos知识体系","slug":"centos知识体系","permalink":"https://jxdw.github.io/categories/centos%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【centos使用系列】【转载】centos7源介绍与软件安装","slug":"centos7-repo-introduce","date":"2017-08-05T08:52:46.000Z","updated":"2020-10-24T13:11:05.786Z","comments":true,"path":"2017/08/05/centos7-repo-introduce/","link":"","permalink":"https://jxdw.github.io/2017/08/05/centos7-repo-introduce/","excerpt":"原文地址http://yinflying.top/2017/03/373","text":"原文地址http://yinflying.top/2017/03/373 笔记版","categories":[{"name":"centos知识体系","slug":"centos知识体系","permalink":"https://jxdw.github.io/categories/centos%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【centos使用系列】【转载】centos7启动以及systemd详细说明","slug":"centos7-bootstrap","date":"2017-08-05T06:09:32.000Z","updated":"2020-10-24T13:11:05.718Z","comments":true,"path":"2017/08/05/centos7-bootstrap/","link":"","permalink":"https://jxdw.github.io/2017/08/05/centos7-bootstrap/","excerpt":"原文地址https://www.cnblogs.com/mfyang/p/7275966.html","text":"原文地址https://www.cnblogs.com/mfyang/p/7275966.html 标记版","categories":[{"name":"centos知识体系","slug":"centos知识体系","permalink":"https://jxdw.github.io/categories/centos%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【redis使用系列】redis通信协议及与mysql互通","slug":"redis-protocol","date":"2017-07-21T11:58:10.000Z","updated":"2020-10-22T14:34:33.157Z","comments":true,"path":"2017/07/21/redis-protocol/","link":"","permalink":"https://jxdw.github.io/2017/07/21/redis-protocol/","excerpt":"本文参考资料https:&#x2F;&#x2F;redis.io&#x2F;topics&#x2F;protocol","text":"本文参考资料https:&#x2F;&#x2F;redis.io&#x2F;topics&#x2F;protocol redis-cli命令与redis通信协议redis-cli命令redis命令在从提交到返回处理结果的过程中，消耗的时间我们称之为RTT（往返时间）。在需要批量执行redis 命令的场景下，如果命令单条逐个执行，那么总共花费的时间是命令条数 N * RTT。redis 提供了管道技术来提高批量执行效率，即将多个命令打包发送给redis服务端，所有命令执行完后，再将所有结果打包返回。在所有命令执行结束前，redis服务器会缓存已执行结束的结果。在redis-cli命令行中，使用redis管道技术时，我们通常将待执行的命令放到一个文本里，比如commands.txt，然后使用命令： cat commands.txt | redis-cli --pipe 去读取文本里的命令，然后打包已pipe管道的方式发送给redis服务端。其他命令见 redis通信协议Redis服务器与客户端通过RESP（REdis Serialization Protocol）协议通信。协议用 \\r\\n 做间隔。对于简单的字符串，以 + 开头，例如 :+OK\\r\\n。对于错误消息，以 - 开头 ，例如: -ERR unknown command &#39;foobar&#39;\\r\\n-WRONGTYPE Operation against a key holding the wrong kind of value\\r\\n 对于整数，以:开头，例如: :100\\r\\n 对于大字符串，以$开头，接着跟上字符串长度的数字。 最长512MB 。 例如: $6\\r\\nfoobar\\r\\n 代表一个长6的字符串， foobar $0\\r\\n\\r\\n 长度为0 的空字符串$-1\\r\\n Null 对于数组， 以 * 开头， 接上数组元素个数。 加数组元素 *0\\r\\n 一个空的数组*2\\r\\n$3\\r\\nfoo\\r\\n$3\\r\\nbar\\r\\n 一个有两个元素的数组 foo bar 数组可以有更多复杂的用法，具体的建议去看官方文档。此处就不一一介绍了 go与redis通信（2018年补充）func main() &#123; tcpAddr, err :&#x3D; net.ResolveTCPAddr(&quot;tcp4&quot;, &quot;10.2.1.30:6379&quot;) conn, err :&#x3D; net.DialTCP(&quot;tcp&quot;, nil, tcpAddr) if err !&#x3D; nil &#123; fmt.Println(err, conn) return &#125; req :&#x3D; &quot;*3\\r\\n&quot; + &quot;$3\\r\\n&quot; + &quot;set\\r\\n&quot; + &quot;$3\\r\\n&quot; + &quot;foo\\r\\n&quot; + &quot;$3\\r\\n&quot; + &quot;bar\\r\\n&quot; conn.Write([]byte(req)) req &#x3D; &quot;*2\\r\\n&quot; + &quot;$3\\r\\n&quot; + &quot;get\\r\\n&quot; + &quot;$3\\r\\n&quot; + &quot;foo\\r\\n&quot; buffer :&#x3D; make([]byte, 2048) conn.Write([]byte(req)) time.Sleep(10 * time.Millisecond) conn.Read(buffer) fmt.Println(string(buffer))&#125; mysql数据导入redismysql数据导入redis创建表DROP TABLE IF EXISTS &#96;t_area&#96;;CREATE TABLE &#96;t_area&#96; ( &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT, &#96;pid&#96; int(11) NOT NULL, &#96;areaname&#96; varchar(255) NOT NULL, &#96;arealevel&#96; varchar(255) DEFAULT NULL, PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;-- ------------------------------ Records of t_area-- ----------------------------INSERT INTO &#96;t_area&#96; VALUES (&#39;1&#39;, &#39;0&#39;, &#39;北京&#39;, &#39;0&#39;);INSERT INTO &#96;t_area&#96; VALUES (&#39;2&#39;, &#39;0&#39;, &#39;上海&#39;, &#39;0&#39;);INSERT INTO &#96;t_area&#96; VALUES (&#39;3&#39;, &#39;0&#39;, &#39;广州&#39;, &#39;0&#39;);INSERT INTO &#96;t_area&#96; VALUES (&#39;4&#39;, &#39;0&#39;, &#39;深圳&#39;, &#39;0&#39;);INSERT INTO &#96;t_area&#96; VALUES (&#39;5&#39;, &#39;0&#39;, &#39;杭州&#39;, &#39;0&#39;); 编写脚本SELECT CONCAT( &quot;*4\\r\\n&quot;, &#39;$&#39;, LENGTH(redis_cmd), &#39;\\r\\n&#39;, redis_cmd, &#39;\\r\\n&#39;, &#39;$&#39;, LENGTH(redis_key), &#39;\\r\\n&#39;, redis_key, &#39;\\r\\n&#39;, &#39;$&#39;, LENGTH(hkey), &#39;\\r\\n&#39;, hkey, &#39;\\r\\n&#39;, &#39;$&#39;, LENGTH(hval), &#39;\\r\\n&#39;, hval, &#39;\\r&#39;)FROM ( SELECT &#39;HSET&#39; as redis_cmd, CONCAT(&#39;pid:&#39; ,pid) AS redis_key, id AS hkey, areaname AS hval FROM t_area) AS t; 测试脚本mysql -uroot -p -h mysql服务器所在ip 数据库名 --skip-column-names --raw &lt; redis.sql 正式执行mysql -uroot -p -h mysql服务器所在ip 数据库名 --skip-column-names --raw &lt; redis.sql |&#x2F;usr&#x2F;local&#x2F;redis-3.2.12&#x2F;bin&#x2F;redis-cli -p 6379 --pipe","categories":[{"name":"redis知识体系","slug":"redis知识体系","permalink":"https://jxdw.github.io/categories/redis%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【redis使用系列】cento安装redis3.2.1和基本操作","slug":"centos-install-redis3-2-1","date":"2017-07-21T09:07:03.000Z","updated":"2020-10-22T14:34:06.738Z","comments":true,"path":"2017/07/21/centos-install-redis3-2-1/","link":"","permalink":"https://jxdw.github.io/2017/07/21/centos-install-redis3-2-1/","excerpt":"简单介绍官网介绍（最后更新于2019-02-01）:Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker.It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams.Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.","text":"简单介绍官网介绍（最后更新于2019-02-01）:Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker.It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams.Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster. redis安装与配置解压、编译wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-3.2.1.tar.gztar xvf redis-3.2.1.tar.gz cd redis-3.2.1make &amp;&amp; make installmkdir -p &#x2F;usr&#x2F;local&#x2F;redis&#x2F;binmkdir -p &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etccp redis.conf &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc&#x2F;cp src&#x2F;redis-server src&#x2F;redis-cli src&#x2F;redis-benchmark &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;cd &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F; 编辑配置文件修改redis配置文件内容 vim &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc&#x2F;redis.confbind 192.168.128.199logfile &#x2F;var&#x2F;log&#x2F;redis&#x2F;redis.log 加入到环境变量echo “export PATH=$PATH:/usr/local/redis/bin/“ /etc/profilesource /etc/profile 启动/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf 开始操作[root@localhost bin]# redis-cli -h 192.168.128.199192.168.128.199:6379&gt; echo helloredis&quot;helloredis&quot; redis常用数据类型和操作命令正如官网上提到的，redis支持多种数据类型:strings, hashes, lists, sets, sorted sets。命令总览: string适用场景和命令hash适用场景和命令list适用场景和命令list的特性适用于哪些先进先出、先进后出的排序。 set适用场景和命令 sorted sets适用场景和命令","categories":[{"name":"redis知识体系","slug":"redis知识体系","permalink":"https://jxdw.github.io/categories/redis%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【redis使用系列】redis3.2.1安装和基本操作","slug":"redis3-2-1-install","date":"2017-07-21T09:07:03.000Z","updated":"2020-10-22T14:34:51.434Z","comments":true,"path":"2017/07/21/redis3-2-1-install/","link":"","permalink":"https://jxdw.github.io/2017/07/21/redis3-2-1-install/","excerpt":"简单介绍官网介绍（最后更新于2019-02-01）:Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker.It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams.Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.","text":"简单介绍官网介绍（最后更新于2019-02-01）:Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker.It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams.Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster. redis安装与配置解压、编译wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-3.2.1.tar.gztar xvf redis-3.2.1.tar.gz cd redis-3.2.1make &amp;&amp; make installmkdir -p &#x2F;usr&#x2F;local&#x2F;redis&#x2F;binmkdir -p &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etccp redis.conf &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc&#x2F;cp src&#x2F;redis-server src&#x2F;redis-cli src&#x2F;redis-benchmark &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;cd &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F; 编辑配置文件修改redis配置文件内容 vim &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc&#x2F;redis.confbind 192.168.128.199logfile &#x2F;var&#x2F;log&#x2F;redis&#x2F;redis.log 加入到环境变量echo “export PATH=$PATH:/usr/local/redis/bin/“ /etc/profilesource /etc/profile 启动/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf 开始操作[root@localhost bin]# redis-cli -h 192.168.128.199192.168.128.199:6379&gt; echo helloredis&quot;helloredis&quot; redis常用数据类型和操作命令正如官网上提到的，redis支持多种数据类型:strings, hashes, lists, sets, sorted sets。命令总览: string适用场景和命令hash适用场景和命令list适用场景和命令list的特性适用于哪些先进先出、先进后出的排序。 set适用场景和命令 sorted sets适用场景和命令","categories":[{"name":"redis知识体系","slug":"redis知识体系","permalink":"https://jxdw.github.io/categories/redis%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【redis使用系列】redis3.2.1配置文件解读","slug":"redis-config-introduce","date":"2017-07-21T02:34:49.000Z","updated":"2020-10-22T14:34:22.433Z","comments":true,"path":"2017/07/21/redis-config-introduce/","link":"","permalink":"https://jxdw.github.io/2017/07/21/redis-config-introduce/","excerpt":"本文参考http://yijiebuyi.com/blog/bc2b3d3e010bf87ba55267f95ab3aa71.htmlhttp://download.redis.io/releases/","text":"本文参考http://yijiebuyi.com/blog/bc2b3d3e010bf87ba55267f95ab3aa71.htmlhttp://download.redis.io/releases/ redis3.2.1配置文件解读redis配置文件分13部分 文件引用 网络设置 通用配置 数据快照 主从同步 安全 限制 只追加模型 lua脚本配置 集群 慢日志查询 延迟监控 事件通知 高级配置 引用# 不同redis server可以使用同一个模版配置作为主配置，并引用其它配置文件用于本server的个性化设置# include并不会被CONFIG REWRITE命令覆盖。但是主配置文件的选项会被覆盖。# 想故意覆盖主配置的话就把include放文件前面，否则最好放末尾# include &#x2F;path&#x2F;to&#x2F;local.conf# include &#x2F;path&#x2F;to&#x2F;other.conf 网络# 不指定bind的话redis将会监听所有网络接口。这个配置是肯定需要指定的。# Examples:# bind 192.168.1.100 10.0.0.1# bind 127.0.0.1 ::1# 下面这个配置是只允许本地客户端访问。bind 127.0.0.1# 是否开启保护模式。默认开启，如果没有设置bind项的ip和redis密码的话，服务将只允许本地访 问。protected-mode yes# 端口设置，默认为 6379# 如果port设置为0 redis将不会监听tcp socketport 6379# 在高并发环境下需要一个高backlog值来避免慢客户端连接问题。注意Linux内核默默将这个值减小到&#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn的值，# 所以需要确认增大somaxconn和tcp_max_syn_backlog 两个值来达到需要的效果。tcp-backlog 511# 指定用来监听Unix套套接字的路径。没有默认值，没有指定的情况下Redis不会监听Unix socket# unixsocket &#x2F;tmp&#x2F;redis.sock# unixsocketperm 700# 客户端空闲多少秒后关闭连接（0为不关闭）timeout 0# tcp-keepalive设置。如果非零，则设置SO_KEEPALIVE选项来向空闲连接的客户端发送ACK，用途如下：# 1）能够检测无响应的对端# 2）让该连接中间的网络设备知道这个连接还存活# 在Linux上，这个指定的值(单位秒)就是发送ACK的时间间隔。注意：要关闭这个连接需要两倍的这个时间值。# 在其他内核上这个时间间隔由内核配置决定。从redis3.2.1开始默认值为300秒tcp-keepalive 300 通用# 是否将Redis作为守护进程运行。如果需要的话配置成&#39;yes&#39;。注意配置成守护进程后，Redis会将进程号写入文件&#x2F;var&#x2F;run&#x2F;redis.piddaemonize no# 是否通过upstart或systemd管理守护进程。默认no没有服务监控，其它选项有upstart, systemd, autosupervised no# pid文件在redis启动时创建，退出时删除。最佳实践为配置该项。pidfile &#x2F;var&#x2F;run&#x2F;redis_6379.pid# 配置日志级别。选项有debug, verbose, notice, warningloglevel notice# 日志名称。空字符串表示标准输出。注意如果redis配置为后台进程，标准输出中信息会发送到&#x2F;dev&#x2F;nulllogfile &#x2F;var&#x2F;log&#x2F;redis&#x2F;redis.log# 是否启动系统日志记录。# syslog-enabled no# 指定系统日志身份。# syslog-ident redis# 指定syslog设备。必须是user或LOCAL0 ~ LOCAL7之一。# syslog-facility local0# 设置数据库个数。默认数据库是 DB 0# 可以通过SELECT where dbid is a number between 0 and &#39;databases&#39;-1为每个连接使用不同的数据库。databases 16 数据快照# 持久化设置:# 下面的例子将会进行把数据写入磁盘的操作:# 900秒（15分钟）之后，且至少1次变更# 300秒（5分钟）之后，且至少10次变更# 60秒之后，且至少10000次变更# 不写磁盘的话就把所有 &quot;save&quot; 设置注释掉就行了。# 通过添加一条带空字符串参数的save指令也能移除之前所有配置的save指令，如: save &quot;&quot;save 900 1save 300 10save 60 10000# 默认情况下如果上面配置的RDB模式开启且最后一次的保存失败，redis 将停止接受写操作，让用户知道问题的发生。# 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。如果有其它监控方式也可关闭。stop-writes-on-bgsave-error yes# 是否在备份.rdb文件时是否用LZF压缩字符串，默认设置为yes。如果想节约cpu资源可以把它设置为no。rdbcompression yes# 因为版本5的RDB有一个CRC64算法的校验和放在了文件的末尾。这将使文件格式更加可靠,# 但在生产和加载RDB文件时，这有一个性能消耗(大约10%)，可以关掉它来获取最好的性能。# 生成的关闭校验的RDB文件有一个0的校验和，它将告诉加载代码跳过检查rdbchecksum yes# rdb文件名称dbfilename dump.rdb# 备份文件目录，文件名就是上面的 &quot;dbfilename&quot; 的值。累加文件也放这里。# 注意你这里指定的必须是目录，不是文件名。dir &#x2F;Users&#x2F;wuji&#x2F;redis_data&#x2F; 主从同步# 主从同步配置。# 1) redis主从同步是异步的，但是可以配置在没有指定slave连接的情况下使master停止写入数据。# 2) 连接中断一定时间内，slave可以执行部分数据重新同步。# 3) 同步是自动的，slave可以自动重连且同步数据。# slaveof &lt;masterip&gt; &lt;masterport&gt;# master连接密码# masterauth &lt;master-password&gt;# 当一个slave失去和master的连接，或者同步正在进行中，slave的行为有两种可能：# 1) 如果 slave-serve-stale-data 设置为 &quot;yes&quot; (默认值)，slave会继续响应客户端请求，可能是正常数据，也可能是还没获得值的空数据。# 2) 如果 slave-serve-stale-data 设置为 &quot;no&quot;，slave会回复&quot;正在从master同步（SYNC with master in progress）&quot;来处理各种请求，除了 INFO 和 SLAVEOF 命令。slave-serve-stale-data yes# 你可以配置salve实例是否接受写操作。可写的slave实例可能对存储临时数据比较有用(因为写入salve# 的数据在同master同步之后将很容被删除)，但是如果客户端由于配# 置错误在写入时也可能产生一些问题。# 从Redis2.6默认所有的slave为只读# 注意:只读的slave不是为了暴露给互联网上不可信的客户端而设计的。它只是一个防止实例误用的保护层。# 一个只读的slave支持所有的管理命令比如config,debug等。为了限制你可以用&#39;rename-command&#39;来隐藏所有的管理和危险命令来增强只读slave的安全性。slave-read-only yes# 同步策略: 磁盘或socket，默认磁盘方式repl-diskless-sync no# 如果非磁盘同步方式开启，可以配置同步延迟时间，以等待master产生子进程通过socket传输RDB数据给slave。# 默认值为5秒，设置为0秒则每次传输无延迟。repl-diskless-sync-delay 5# slave根据指定的时间间隔向master发送ping请求。默认10秒。# repl-ping-slave-period 10# 同步的超时时间# 1）slave在与master SYNC期间有大量数据传输，造成超时# 2）在slave角度，master超时，包括数据、ping等# 3）在master角度，slave超时，当master发送REPLCONF ACK pings# 确保这个值大于指定的repl-ping-slave-period，否则在主从间流量不高时每次都会检测到超时# repl-timeout 60# 是否在slave套接字发送SYNC之后禁用 TCP_NODELAY# 如果选择yes，Redis将使用更少的TCP包和带宽来向slaves发送数据。但是这将使数据传输到slave上有延迟，Linux内核的默认配置会达到40毫秒。# 如果选择no，数据传输到salve的延迟将会减少但要使用更多的带宽。# 默认我们会为低延迟做优化，但高流量情况或主从之间的跳数过多时，可以设置为“yes”。repl-disable-tcp-nodelay no# 设置数据备份的backlog大小。# backlog是一个slave在一段时间内断开连接时记录salve数据的缓冲，所以一个slave在重新连接时，不必要全量的同步，而是一个增量同步就足够了，# 将在断开连接的这段时间内把slave丢失的部分数据传送给它。同步的backlog越大，slave能够进行增量同步并且允许断开连接的时间就越长。# backlog只分配一次并且至少需要一个slave连接。# repl-backlog-size 1mb# 当master在一段时间内不再与任何slave连接，backlog将会释放。以下选项配置了从最后一个# slave断开开始计时多少秒后，backlog缓冲将会释放。# 0表示永不释放backlog# repl-backlog-ttl 3600# slave的优先级是一个整数展示在Redis的Info输出中。如果master不再正常工作了，sentinel将用它来选择一个slave提升为master。# 优先级数字小的salve会优先考虑提升为master，所以例如有三个slave优先级分别为10，100，25，sentinel将挑选优先级最小数字为10的slave。# 0作为一个特殊的优先级，标识这个slave不能作为master，所以一个优先级为0的slave永远不会被# sentinel挑选提升为master。# 默认优先级为100slave-priority 100# 如果master少于N个延时小于等于M秒的已连接slave，就可以停止接收写操作。# N个slave需要是“oneline”状态。# 延时是以秒为单位，并且必须小于等于指定值，是从最后一个从slave接收到的ping（通常每秒发送）开始计数。# 该选项不保证N个slave正确同步写操作，但是限制数据丢失的窗口期。# 例如至少需要3个延时小于等于10秒的slave用下面的指令：# min-slaves-to-write 3# min-slaves-max-lag 10# 两者之一设置为0将禁用这个功能。# 默认 min-slaves-to-write 值是0（该功能禁用）并且 min-slaves-max-lag 值是10。 安全# 要求客户端在处理任何命令时都要验证身份和密码。# requirepass foobared# 命令重命名# 在共享环境下，可以为危险命令改变名字。比如，你可以为 CONFIG 改个其他不太容易猜到的名字，这样内部的工具仍然可以使用。# 例如：# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52# 也可以通过改名为空字符串来完全禁用一个命令# rename-command CONFIG &quot;&quot;# 请注意：改变命令名字被记录到AOF文件或被传送到从服务器可能产生问题。 限制# 设置最多同时连接的客户端数量。默认这个限制是10000个客户端，然而如果Redis服务器不能配置# 处理文件的限制数来满足指定的值，那么最大的客户端连接数就被设置成当前文件限制数减32（因为Redis服务器保留了一些文件描述符作为内部使用）# 一旦达到这个限制，Redis会关闭所有新连接并发送错误&#39;max number of clients reached&#39;# maxclients 10000# 不要使用比设置的上限更多的内存。一旦内存使用达到上限，Redis会根据选定的回收策略（参见：maxmemmory-policy）删除key。# 如果因为删除策略Redis无法删除key，或者策略设置为 &quot;noeviction&quot;，Redis会回复需要更多内存的错误信息给命令。例如，SET,LPUSH等等，但是会# 继续响应像Get这样的只读命令。# 在使用Redis作为LRU缓存，或者为实例设置了硬性内存限制的时候（使用 &quot;noeviction&quot; 策略）的时候，这个选项通常事很有用的。# 警告：当有多个slave连上达到内存上限时，master为同步slave的输出缓冲区所需内存不计算在使用内存中。这样当移除key时，就不会因网络问题 &#x2F; # 重新同步事件触发移除key的循环，反过来slaves的输出缓冲区充满了key被移除的DEL命令，这将触发删除更多的key，直到这个数据库完全被清空为止。# 总之，如果你需要附加多个slave，建议你设置一个稍小maxmemory限制，这样系统就会有空闲的内存作为slave的输出缓存区(但是如果最大内存策略# 设置为&quot;noeviction&quot;的话就没必要了)# maxmemory &lt;bytes&gt;# 最大内存策略：如果达到内存限制了，Redis如何选择删除key。# volatile-lru -&gt; 根据LRU算法删除设置过期时间的key# allkeys-lru -&gt; 根据LRU算法删除任何key# volatile-random -&gt; 随机移除设置过过期时间的key# allkeys-random -&gt; 随机移除任何key# volatile-ttl -&gt; 移除即将过期的key(minor TTL)# noeviction -&gt; 不移除任何key，只返回一个写错误# 注意：对所有策略来说，如果Redis找不到合适的可以删除的key都会在写操作时返回一个错误。# 目前为止涉及的命令：set setnx setex append incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd sinter sinterstore #sunion sunionstore sdiff sdiffstore zadd zincrby zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby getset mset msetnx exec sort# 默认策略:# maxmemory-policy noeviction# LRU和最小TTL算法的实现都不是很精确，但是很接近（为了省内存），所以你可以用样本量做检测。 例如：默认Redis会检查3个key然后取最旧的那个，你可以通过下面的# 配置指令来设置样本的个数。默认值为5，数字越大结果越精确但是会消耗更多CPU。# maxmemory-samples 5 只追加模型# 默认情况下，Redis是异步的把数据导出到磁盘上。这种模式在很多应用里已经足够好，但Redis进程出问题或断电时可能造成一段时间的写操作丢失(这取决于配置的save指令)。# AOF是一种提供了更可靠的替代持久化模式，例如使用默认的数据写入文件策略（参见后面的配置）。# 在遇到像服务器断电或单写情况下Redis自身进程出问题但操作系统仍正常运行等突发事件时，Redis能只丢失1秒的写操作。# AOF和RDB持久化能同时启动并且不会有问题。# 如果AOF开启，那么在启动时Redis将加载AOF文件，它更能保证数据的可靠性。appendonly no# AOF文件名（默认：&quot;appendonly.aof&quot;）appendfilename &quot;appendonly.aof&quot;# fsync()系统调用告诉操作系统把数据写到磁盘上，而不是等更多的数据进入输出缓冲区。 有些操作系统会真的把数据马上刷到磁盘上；有些则会尽快去尝试这么做。# Redis支持三种不同的模式：# no：不要立刻刷，只有在操作系统需要刷的时候再刷。比较快。# always：每次写操作都立刻写入到aof文件。慢，但是最安全。# everysec：每秒写一次。折中方案。# 默认的 &quot;everysec&quot; 通常来说能在速度和数据安全性之间取得比较好的平衡。# appendfsync alwaysappendfsync everysec# appendfsync no# 如果AOF的同步策略设置成 &quot;always&quot; 或者 &quot;everysec&quot;，并且后台的存储进程（后台存储或写入AOF 日志）会产生很多磁盘I&#x2F;O开销。某些Linux的配置下会使Redis因为 # fsync()系统调用而阻塞很久。 注意，目前对这个情况还没有完美修正，甚至不同线程的 fsync() 会阻塞我们同步的write(2)调用。# 为了缓解这个问题，可以用下面这个选项。它可以在 BGSAVE 或 BGREWRITEAOF 处理时阻止fsync()。# 这就意味着如果有子进程在进行保存操作，那么Redis就处于&quot;不可同步&quot;的状态。# 这实际上是说，在最差的情况下可能会丢掉30秒钟的日志数据。（默认Linux设定）# 如果把这个设置成&quot;yes&quot;带来了延迟问题，就保持&quot;no&quot;，这是保存持久数据的最安全的方式。no-appendfsync-on-rewrite no# 自动重写AOF文件。如果AOF日志文件增大到指定百分比，Redis能够通过 BGREWRITEAOF 自动重写AOF日志文件。# 工作原理：Redis记住上次重写时AOF文件的大小（如果重启后还没有写操作，就直接用启动时的AOF大小）# 这个基准大小和当前大小做比较。如果当前大小超过指定比例，就会触发重写操作。你还需要指定被重写日志的最小尺寸，# 这样避免了达到指定百分比但尺寸仍然很小的情况还要重写。# 指定百分比为0会禁用AOF自动重写特性。auto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mb# 如果设置为yes，如果一个因异常被截断的AOF文件被redis启动时加载进内存，redis将会发送日志通知用户。如果设置为no，erdis将会拒绝启动。# 此时需要用&quot;redis-check-aof&quot;工具修复文件。aof-load-truncated yes 集群# 只有开启了以下选项，redis才能成为集群服务的一部分# cluster-enabled yes# 配置redis自动生成的集群配置文件名。确保同一系统中运行的各redis实例该配置文件不要重名。# cluster-config-file nodes-6379.conf# 集群节点超时毫秒数。超时的节点将被视为不可用状态。# cluster-node-timeout 15000# 如果数据太旧，集群中的不可用master的slave节点会避免成为备用master。如果slave和master失联时间超过: # (node-timeout * slave-validity-factor) + repl-ping-slave-period则不会被提升为master。# 如node-timeout为30秒，slave-validity-factor为10, 默认default repl-ping-slave-period为10秒,失联时间超过310秒slave就不会成为master。# 较大的slave-validity-factor值可能允许包含过旧数据的slave成为master，同时较小的值可能会阻止集群选举出新master。#为了达到最大限度的高可用性，可以设置为0，即slave不管和master失联多久都可以提升为master# cluster-slave-validity-factor 10# 只有在之前master有其它指定数量的工作状态下的slave节点时，slave节点才能提升为master。默认为1#（即该集群至少有3个节点，1 master＋2 slaves，master宕机，仍有另外1个slave的情况下其中1个slave可以提升）# 测试环境可设置为0，生成环境中至少设置为1# cluster-migration-barrier 1# 默认情况下如果redis集群如果检测到至少有1个hash slot不可用，集群将停止查询数据。如果所有slot恢复则集群自动恢复。# 如果需要集群部分可用情况下仍可提供查询服务，设置为no。# cluster-require-full-coverage yes 慢查询日志# 慢查询日志，记录超过多少微秒的查询命令。查询的执行时间不包括客户端的IO执行和网络通信时间，只是查询命令执行时间。# 1000000等于1秒，设置为0则记录所有命令slowlog-log-slower-than 10000# 记录大小，可通过SLOWLOG RESET命令重置slowlog-max-len 128 延迟监控事件通知高级配置# 当hash中包含超过指定元素个数并且最大的元素没有超过临界时，# hash将以一种特殊的编码方式（大大减少内存使用）来存储，这里可以设置这两个临界值# Redis Hash对应Value内部实际就是一个HashMap，实际这里会有2种不同实现，# 这个Hash的成员比较少时Redis为了节省内存会采用类似一维数组的方式来紧凑存储，而不会采用真正的HashMap结构，对应的value redisObject的encoding为zipmap,# 当成员数量增大时会自动转成真正的HashMap,此时encoding为ht。hash-max-zipmap-entries 512hash-max-zipmap-value 64 # list数据类型多少节点以下会采用去指针的紧凑存储格式。# list数据类型节点值大小小于多少字节会采用紧凑存储格式。list-max-ziplist-entries 512list-max-ziplist-value 64 # set数据类型内部数据如果全部是数值型，且包含多少节点以下会采用紧凑格式存储。set-max-intset-entries 512 # zsort数据类型多少节点以下会采用去指针的紧凑存储格式。# zsort数据类型节点值大小小于多少字节会采用紧凑存储格式。zset-max-ziplist-entries 128zset-max-ziplist-value 64 # Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用# # 当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。## 如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存activerehashing yes 附录：redis3.2.1配置文件(全)# Redis configuration file example.## Note that in order to read the configuration file, Redis must be started with the file path as first argument:## .&#x2F;redis-server &#x2F;path&#x2F;to&#x2F;redis.conf# Note on units: when memory size is needed, it is possible to specify it in the usual form of 1k 5GB 4M and so forth:## 1k &#x3D;&gt; 1000 bytes# 1kb &#x3D;&gt; 1024 bytes# 1m &#x3D;&gt; 1000000 bytes# 1mb &#x3D;&gt; 1024*1024 bytes# 1g &#x3D;&gt; 1000000000 bytes# 1gb &#x3D;&gt; 1024*1024*1024 bytes## units are case insensitive so 1GB 1Gb 1gB are all the same.################################## INCLUDES #################################### include &#x2F;path&#x2F;to&#x2F;local.conf# include &#x2F;path&#x2F;to&#x2F;other.conf################################## NETWORK ###################################### By default, if no &quot;bind&quot; configuration directive is specified, Redis listens for connections from all the network interfaces available on the server.# It is possible to listen to just one or multiple selected interfaces using the &quot;bind&quot; configuration directive, followed by one or more IP addresses.## Examples:## bind 192.168.1.100 10.0.0.1# bind 127.0.0.1 ::1## ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the internet, binding to all the interfaces is dangerous and will expose the# instance to everybody on the internet. So by default we uncomment the following bind directive, that will force Redis to listen only into# the IPv4 lookback interface address (this means Redis will be able to accept connections only from clients running into the same computer it is running).## IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES JUST COMMENT THE FOLLOWING LINE.# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~bind 192.168.128.199# Protected mode is a layer of security protection, in order to avoid that Redis instances left open on the internet are accessed and exploited.# When protected mode is on and if:# 1) The server is not binding explicitly to a set of addresses using the &quot;bind&quot; directive.# 2) No password is configured.## The server only accepts connections from clients connecting from the IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain sockets.# By default protected mode is enabled. You should disable it only if you are sure you want clients from other hosts to connect to Redis# even if no authentication is configured, nor a specific set of interfaces are explicitly listed using the &quot;bind&quot; directive.protected-mode yes# Accept connections on the specified port, default is 6379 (IANA #815344). If port 0 is specified Redis will not listen on a TCP socket.port 6379# TCP listen() backlog.## In high requests-per-second environments you need an high backlog in order to avoid slow clients connections issues. Note that the Linux kernel# will silently truncate it to the value of &#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn so make sure to raise both the value of somaxconn and tcp_max_syn_backlog# in order to get the desired effect.tcp-backlog 511# Unix socket.## Specify the path for the Unix socket that will be used to listen for incoming connections. There is no default, so Redis will not listen# on a unix socket when not specified.## unixsocket &#x2F;tmp&#x2F;redis.sock# unixsocketperm 700# Close the connection after a client is idle for N seconds (0 to disable)timeout 0# TCP keepalive.## If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence of communication. This is useful for two reasons:# 1) Detect dead peers.# 2) Take the connection alive from the point of view of network equipment in the middle.## On Linux, the specified value (in seconds) is the period used to send ACKs.# Note that to close the connection the double of the time is needed.# On other kernels the period depends on the kernel configuration.## A reasonable value for this option is 300 seconds, which is the new Redis default starting with Redis 3.2.1.tcp-keepalive 300################################# GENERAL ###################################### By default Redis does not run as a daemon. Use &#39;yes&#39; if you need it.# Note that Redis will write a pid file in &#x2F;var&#x2F;run&#x2F;redis.pid when daemonized.daemonize no# If you run Redis from upstart or systemd, Redis can interact with your# supervision tree. Options:# supervised no - no supervision interaction# supervised upstart - signal upstart by putting Redis into SIGSTOP mode# supervised systemd - signal systemd by writing READY&#x3D;1 to $NOTIFY_SOCKET# supervised auto - detect upstart or systemd method based on# UPSTART_JOB or NOTIFY_SOCKET environment variables# Note: these supervision methods only signal &quot;process is ready.&quot;# They do not enable continuous liveness pings back to your supervisor.supervised no# If a pid file is specified, Redis writes it where specified at startup and removes it at exit.## When the server runs non daemonized, no pid file is created if none is specified in the configuration. When the server is daemonized, the pid file# is used even if not specified, defaulting to &quot;&#x2F;var&#x2F;run&#x2F;redis.pid&quot;.## Creating a pid file is best effort: if Redis is not able to create it nothing bad happens, the server will start and run normally.pidfile &#x2F;var&#x2F;run&#x2F;redis_6379.pid# Specify the server verbosity level. This can be one of:# debug (a lot of information, useful for development&#x2F;testing)# verbose (many rarely useful info, but not a mess like the debug level)# notice (moderately verbose, what you want in production probably)# warning (only very important &#x2F; critical messages are logged)loglevel notice# Specify the log file name. Also the empty string can be used to force Redis to log on the standard output. Note that if you use standard# output for logging but daemonize, logs will be sent to &#x2F;dev&#x2F;nulllogfile &quot;&quot;# To enable logging to the system logger, just set &#39;syslog-enabled&#39; to yes, and optionally update the other syslog parameters to suit your needs.# syslog-enabled no# Specify the syslog identity.# syslog-ident redis# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.# syslog-facility local0# Set the number of databases. The default database is DB 0, you can select# a different one on a per-connection basis using SELECT &lt;dbid&gt; where# dbid is a number between 0 and &#39;databases&#39;-1databases 16################################ SNAPSHOTTING ################################## Save the DB on disk:# save &lt;seconds&gt; &lt;changes&gt;## Will save the DB if both the given number of seconds and the given number of write operations against the DB occurred.## In the example below the behaviour will be to save:# after 900 sec (15 min) if at least 1 key changed# after 300 sec (5 min) if at least 10 keys changed# after 60 sec if at least 10000 keys changed## Note: you can disable saving completely by commenting out all &quot;save&quot; lines.## It is also possible to remove all the previously configured save points by adding a save directive with a single empty string argument# like in the following example:## save &quot;&quot;save 900 1save 300 10save 60 10000# By default Redis will stop accepting writes if RDB snapshots are enabled (at least one save point) and the latest background save failed.# This will make the user aware (in a hard way) that data is not persisting on disk properly, otherwise chances are that no one will notice and some# disaster will happen.## If the background saving process will start working again Redis will automatically allow writes again.## However if you have setup your proper monitoring of the Redis server and persistence, you may want to disable this feature so that Redis will# continue to work as usual even if there are problems with disk, permissions, and so forth.stop-writes-on-bgsave-error yes# Compress string objects using LZF when dump .rdb databases? For default that&#39;s set to &#39;yes&#39; as it&#39;s almost always a win.# If you want to save some CPU in the saving child set it to &#39;no&#39; but the dataset will likely be bigger if you have compressible values or keys.rdbcompression yes# Since version 5 of RDB a CRC64 checksum is placed at the end of the file. This makes the format more resistant to corruption but there is a performance# hit to pay (around 10%) when saving and loading RDB files, so you can disable it for maximum performances.## RDB files created with checksum disabled have a checksum of zero that will tell the loading code to skip the check.rdbchecksum yes# The filename where to dump the DBdbfilename dump.rdb# The working directory.## The DB will be written inside this directory, with the filename specified# above using the &#39;dbfilename&#39; configuration directive.## The Append Only File will also be created inside this directory.## Note that you must specify a directory here, not a file name.dir .&#x2F;################################# REPLICATION ################################## Master-Slave replication. Use slaveof to make a Redis instance a copy of# another Redis server. A few things to understand ASAP about Redis replication.## 1) Redis replication is asynchronous, but you can configure a master to# stop accepting writes if it appears to be not connected with at least# a given number of slaves.# 2) Redis slaves are able to perform a partial resynchronization with the# master if the replication link is lost for a relatively small amount of# time. You may want to configure the replication backlog size (see the next# sections of this file) with a sensible value depending on your needs.# 3) Replication is automatic and does not need user intervention. After a# network partition slaves automatically try to reconnect to masters# and resynchronize with them.## slaveof &lt;masterip&gt; &lt;masterport&gt;# If the master is password protected (using the &quot;requirepass&quot; configuration# directive below) it is possible to tell the slave to authenticate before# starting the replication synchronization process, otherwise the master will# refuse the slave request.## masterauth &lt;master-password&gt;# When a slave loses its connection with the master, or when the replication# is still in progress, the slave can act in two different ways:## 1) if slave-serve-stale-data is set to &#39;yes&#39; (the default) the slave will# still reply to client requests, possibly with out of date data, or the# data set may just be empty if this is the first synchronization.## 2) if slave-serve-stale-data is set to &#39;no&#39; the slave will reply with# an error &quot;SYNC with master in progress&quot; to all the kind of commands# but to INFO and SLAVEOF.#slave-serve-stale-data yes# You can configure a slave instance to accept writes or not. Writing against# a slave instance may be useful to store some ephemeral data (because data# written on a slave will be easily deleted after resync with the master) but# may also cause problems if clients are writing to it because of a# misconfiguration.## Since Redis 2.6 by default slaves are read-only.## Note: read only slaves are not designed to be exposed to untrusted clients# on the internet. It&#39;s just a protection layer against misuse of the instance.# Still a read only slave exports by default all the administrative commands# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve# security of read only slaves using &#39;rename-command&#39; to shadow all the# administrative &#x2F; dangerous commands.slave-read-only yes# Replication SYNC strategy: disk or socket.## -------------------------------------------------------# WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY# -------------------------------------------------------## New slaves and reconnecting slaves that are not able to continue the replication# process just receiving differences, need to do what is called a &quot;full# synchronization&quot;. An RDB file is transmitted from the master to the slaves.# The transmission can happen in two different ways:## 1) Disk-backed: The Redis master creates a new process that writes the RDB# file on disk. Later the file is transferred by the parent# process to the slaves incrementally.# 2) Diskless: The Redis master creates a new process that directly writes the# RDB file to slave sockets, without touching the disk at all.## With disk-backed replication, while the RDB file is generated, more slaves# can be queued and served with the RDB file as soon as the current child producing# the RDB file finishes its work. With diskless replication instead once# the transfer starts, new slaves arriving will be queued and a new transfer# will start when the current one terminates.## When diskless replication is used, the master waits a configurable amount of# time (in seconds) before starting the transfer in the hope that multiple slaves# will arrive and the transfer can be parallelized.## With slow disks and fast (large bandwidth) networks, diskless replication# works better.repl-diskless-sync no# When diskless replication is enabled, it is possible to configure the delay# the server waits in order to spawn the child that transfers the RDB via socket# to the slaves.## This is important since once the transfer starts, it is not possible to serve# new slaves arriving, that will be queued for the next RDB transfer, so the server# waits a delay in order to let more slaves arrive.## The delay is specified in seconds, and by default is 5 seconds. To disable# it entirely just set it to 0 seconds and the transfer will start ASAP.repl-diskless-sync-delay 5# Slaves send PINGs to server in a predefined interval. It&#39;s possible to change# this interval with the repl_ping_slave_period option. The default value is 10# seconds.## repl-ping-slave-period 10# The following option sets the replication timeout for:## 1) Bulk transfer I&#x2F;O during SYNC, from the point of view of slave.# 2) Master timeout from the point of view of slaves (data, pings).# 3) Slave timeout from the point of view of masters (REPLCONF ACK pings).## It is important to make sure that this value is greater than the value# specified for repl-ping-slave-period otherwise a timeout will be detected# every time there is low traffic between the master and the slave.## repl-timeout 60# Disable TCP_NODELAY on the slave socket after SYNC?## If you select &quot;yes&quot; Redis will use a smaller number of TCP packets and# less bandwidth to send data to slaves. But this can add a delay for# the data to appear on the slave side, up to 40 milliseconds with# Linux kernels using a default configuration.## If you select &quot;no&quot; the delay for data to appear on the slave side will# be reduced but more bandwidth will be used for replication.## By default we optimize for low latency, but in very high traffic conditions# or when the master and slaves are many hops away, turning this to &quot;yes&quot; may# be a good idea.repl-disable-tcp-nodelay no# Set the replication backlog size. The backlog is a buffer that accumulates# slave data when slaves are disconnected for some time, so that when a slave# wants to reconnect again, often a full resync is not needed, but a partial# resync is enough, just passing the portion of data the slave missed while# disconnected.## The bigger the replication backlog, the longer the time the slave can be# disconnected and later be able to perform a partial resynchronization.## The backlog is only allocated once there is at least a slave connected.## repl-backlog-size 1mb# After a master has no longer connected slaves for some time, the backlog# will be freed. The following option configures the amount of seconds that# need to elapse, starting from the time the last slave disconnected, for# the backlog buffer to be freed.## A value of 0 means to never release the backlog.## repl-backlog-ttl 3600# The slave priority is an integer number published by Redis in the INFO output.# It is used by Redis Sentinel in order to select a slave to promote into a# master if the master is no longer working correctly.## A slave with a low priority number is considered better for promotion, so# for instance if there are three slaves with priority 10, 100, 25 Sentinel will# pick the one with priority 10, that is the lowest.## However a special priority of 0 marks the slave as not able to perform the# role of master, so a slave with priority of 0 will never be selected by# Redis Sentinel for promotion.## By default the priority is 100.slave-priority 100# It is possible for a master to stop accepting writes if there are less than# N slaves connected, having a lag less or equal than M seconds.## The N slaves need to be in &quot;online&quot; state.## The lag in seconds, that must be &lt;&#x3D; the specified value, is calculated from# the last ping received from the slave, that is usually sent every second.## This option does not GUARANTEE that N replicas will accept the write, but# will limit the window of exposure for lost writes in case not enough slaves# are available, to the specified number of seconds.## For example to require at least 3 slaves with a lag &lt;&#x3D; 10 seconds use:## min-slaves-to-write 3# min-slaves-max-lag 10## Setting one or the other to 0 disables the feature.## By default min-slaves-to-write is set to 0 (feature disabled) and# min-slaves-max-lag is set to 10.################################## SECURITY #################################### Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other# commands. This might be useful in environments in which you do not trust# others with access to the host running redis-server.## This should stay commented out for backward compatibility and because most# people do not need auth (e.g. they run their own servers).## Warning: since Redis is pretty fast an outside user can try up to# 150k passwords per second against a good box. This means that you should# use a very strong password otherwise it will be very easy to break.## requirepass foobared# Command renaming.## It is possible to change the name of dangerous commands in a shared# environment. For instance the CONFIG command may be renamed into something# hard to guess so that it will still be available for internal-use tools# but not available for general clients.## Example:## rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52## It is also possible to completely kill a command by renaming it into# an empty string:## rename-command CONFIG &quot;&quot;## Please note that changing the name of commands that are logged into the# AOF file or transmitted to slaves may cause problems.################################### LIMITS ##################################### Set the max number of connected clients at the same time. By default# this limit is set to 10000 clients, however if the Redis server is not# able to configure the process file limit to allow for the specified limit# the max number of allowed clients is set to the current file limit# minus 32 (as Redis reserves a few file descriptors for internal uses).## Once the limit is reached Redis will close all the new connections sending# an error &#39;max number of clients reached&#39;.## maxclients 10000# Don&#39;t use more memory than the specified amount of bytes.# When the memory limit is reached Redis will try to remove keys# according to the eviction policy selected (see maxmemory-policy).## If Redis can&#39;t remove keys according to the policy, or if the policy is# set to &#39;noeviction&#39;, Redis will start to reply with errors to commands# that would use more memory, like SET, LPUSH, and so on, and will continue# to reply to read-only commands like GET.## This option is usually useful when using Redis as an LRU cache, or to set# a hard memory limit for an instance (using the &#39;noeviction&#39; policy).## WARNING: If you have slaves attached to an instance with maxmemory on,# the size of the output buffers needed to feed the slaves are subtracted# from the used memory count, so that network problems &#x2F; resyncs will# not trigger a loop where keys are evicted, and in turn the output# buffer of slaves is full with DELs of keys evicted triggering the deletion# of more keys, and so forth until the database is completely emptied.## In short... if you have slaves attached it is suggested that you set a lower# limit for maxmemory so that there is some free RAM on the system for slave# output buffers (but this is not needed if the policy is &#39;noeviction&#39;).## maxmemory &lt;bytes&gt;# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory# is reached. You can select among five behaviors:## volatile-lru -&gt; remove the key with an expire set using an LRU algorithm# allkeys-lru -&gt; remove any key according to the LRU algorithm# volatile-random -&gt; remove a random key with an expire set# allkeys-random -&gt; remove a random key, any key# volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)# noeviction -&gt; don&#39;t expire at all, just return an error on write operations## Note: with any of the above policies, Redis will return an error on write# operations, when there are no suitable keys for eviction.## At the date of writing these commands are: set setnx setex append# incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd# sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby# zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby# getset mset msetnx exec sort## The default is:## maxmemory-policy noeviction# LRU and minimal TTL algorithms are not precise algorithms but approximated algorithms (in order to save memory), so you can tune it for speed or# accuracy. For default Redis will check five keys and pick the one that was used less recently, you can change the sample size using the following# configuration directive.# The default of 5 produces good enough results. 10 Approximates very closely true LRU but costs a bit more CPU. 3 is very fast but not very accurate.## maxmemory-samples 5############################## APPEND ONLY MODE ################################ By default Redis asynchronously dumps the dataset on disk. This mode is good enough in many applications, but an issue with the Redis process or# a power outage may result into a few minutes of writes lost (depending on the configured save points).# The Append Only File is an alternative persistence mode that provides much better durability. For instance using the default data fsync policy# (see later in the config file) Redis can lose just one second of writes in a dramatic event like a server power outage, or a single write if something# wrong with the Redis process itself happens, but the operating system is still running correctly# AOF and RDB persistence can be enabled at the same time without problems. If the AOF is enabled on startup Redis will load the AOF, that is the file# with the better durability guarantees.# Please check http:&#x2F;&#x2F;redis.io&#x2F;topics&#x2F;persistence for more information.appendonly no# The name of the append only file (default: &quot;appendonly.aof&quot;)appendfilename &quot;appendonly.aof&quot;# The fsync() call tells the Operating System to actually write data on disk instead of waiting for more data in the output buffer. Some OS will really # flush data on disk, some other OS will just try to do it ASAP.# Redis supports three different modes:# no: don&#39;t fsync, just let the OS flush the data when it wants. Faster.# always: fsync after every write to the append only log. Slow, Safest.# everysec: fsync only one time every second. Compromise.# The default is &quot;everysec&quot;, as that&#39;s usually the right compromise between speed and data safety. It&#39;s up to you to understand if you can relax this to# &quot;no&quot; that will let the operating system flush the output buffer when it wants, for better performances (but if you can live with the idea of# some data loss consider the default persistence mode that&#39;s snapshotting), or on the contrary, use &quot;always&quot; that&#39;s very slow but a bit safer than # everysec.# More details please check the following article:# http:&#x2F;&#x2F;antirez.com&#x2F;post&#x2F;redis-persistence-demystified.html## If unsure, use &quot;everysec&quot;.# appendfsync alwaysappendfsync everysec# appendfsync no# When the AOF fsync policy is set to always or everysec, and a background saving process (a background save or AOF log background rewriting) is# performing a lot of I&#x2F;O against the disk, in some Linux configurations Redis may block too long on the fsync() call. Note that there is no fix for# this currently, as even performing fsync in a different thread will block our synchronous write(2) call.# In order to mitigate this problem it&#39;s possible to use the following option that will prevent fsync() from being called in the main process while a# BGSAVE or BGREWRITEAOF is in progress.# This means that while another child is saving, the durability of Redis is the same as &quot;appendfsync none&quot;. In practical terms, this means that it is# possible to lose up to 30 seconds of log in the worst scenario (with the default Linux settings).# If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as# &quot;no&quot; that is the safest pick from the point of view of durability.no-appendfsync-on-rewrite no# Automatic rewrite of the append only file.# Redis is able to automatically rewrite the log file implicitly calling BGREWRITEAOF when the AOF log size grows by the specified percentage.# This is how it works: Redis remembers the size of the AOF file after the latest rewrite (if no rewrite has happened since the restart, the size of# the AOF at startup is used).# This base size is compared to the current size. If the current size is bigger than the specified percentage, the rewrite is triggered. Also# you need to specify a minimal size for the AOF file to be rewritten, this is useful to avoid rewriting the AOF file even if the percentage increase# is reached but it is still pretty small.# Specify a percentage of zero in order to disable the automatic AOF rewrite feature.auto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mb# An AOF file may be found to be truncated at the end during the Redis startup process, when the AOF data gets loaded back into memory.# This may happen when the system where Redis is running crashes, especially when an ext4 filesystem is mounted without the# data&#x3D;ordered option (however this can&#39;t happen when Redis itself crashes or aborts but the operating system still works correctly).# Redis can either exit with an error when this happens, or load as much data as possible (the default now) and start if the AOF file is found# to be truncated at the end. The following option controls this behavior.# If aof-load-truncated is set to yes, a truncated AOF file is loaded and the Redis server starts emitting a log to inform the user of the event.# Otherwise if the option is set to no, the server aborts with an error and refuses to start. When the option is set to no, the user requires# to fix the AOF file using the &quot;redis-check-aof&quot; utility before to restart the server.## Note that if the AOF file will be found to be corrupted in the middle the server will still exit with an error. This option only applies when# Redis will try to read more data from the AOF file but not enough bytes will be found.aof-load-truncated yes################################ LUA SCRIPTING ################################ Max execution time of a Lua script in milliseconds.## If the maximum execution time is reached Redis will log that a script is# still in execution after the maximum allowed time and will start to# reply to queries with an error.## When a long running script exceeds the maximum execution time only the# SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be# used to stop a script that did not yet called write commands. The second# is the only way to shut down the server in the case a write command was# already issued by the script but the user doesn&#39;t want to wait for the natural# termination of the script.## Set it to 0 or a negative value for unlimited execution without warnings.lua-time-limit 5000################################ REDIS CLUSTER ################################# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++# WARNING EXPERIMENTAL: Redis Cluster is considered to be stable code, however# in order to mark it as &quot;mature&quot; we need to wait for a non trivial percentage# of users to deploy it in production.# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++## Normal Redis instances can&#39;t be part of a Redis Cluster; only nodes that are# started as cluster nodes can. In order to start a Redis instance as a# cluster node enable the cluster support uncommenting the following:## cluster-enabled yes# Every cluster node has a cluster configuration file. This file is not# intended to be edited by hand. It is created and updated by Redis nodes.# Every Redis Cluster node requires a different cluster configuration file.# Make sure that instances running in the same system do not have# overlapping cluster configuration file names.## cluster-config-file nodes-6379.conf# Cluster node timeout is the amount of milliseconds a node must be unreachable# for it to be considered in failure state.# Most other internal time limits are multiple of the node timeout.## cluster-node-timeout 15000# A slave of a failing master will avoid to start a failover if its data# looks too old.## There is no simple way for a slave to actually have a exact measure of# its &quot;data age&quot;, so the following two checks are performed:## 1) If there are multiple slaves able to failover, they exchange messages# in order to try to give an advantage to the slave with the best# replication offset (more data from the master processed).# Slaves will try to get their rank by offset, and apply to the start# of the failover a delay proportional to their rank.## 2) Every single slave computes the time of the last interaction with# its master. This can be the last ping or command received (if the master# is still in the &quot;connected&quot; state), or the time that elapsed since the# disconnection with the master (if the replication link is currently down).# If the last interaction is too old, the slave will not try to failover# at all.## The point &quot;2&quot; can be tuned by user. Specifically a slave will not perform# the failover if, since the last interaction with the master, the time# elapsed is greater than:## (node-timeout * slave-validity-factor) + repl-ping-slave-period## So for example if node-timeout is 30 seconds, and the slave-validity-factor# is 10, and assuming a default repl-ping-slave-period of 10 seconds, the# slave will not try to failover if it was not able to talk with the master# for longer than 310 seconds.## A large slave-validity-factor may allow slaves with too old data to failover# a master, while a too small value may prevent the cluster from being able to# elect a slave at all.## For maximum availability, it is possible to set the slave-validity-factor# to a value of 0, which means, that slaves will always try to failover the# master regardless of the last time they interacted with the master.# (However they&#39;ll always try to apply a delay proportional to their# offset rank).## Zero is the only value able to guarantee that when all the partitions heal# the cluster will always be able to continue.## cluster-slave-validity-factor 10# Cluster slaves are able to migrate to orphaned masters, that are masters# that are left without working slaves. This improves the cluster ability# to resist to failures as otherwise an orphaned master can&#39;t be failed over# in case of failure if it has no working slaves.## Slaves migrate to orphaned masters only if there are still at least a# given number of other working slaves for their old master. This number# is the &quot;migration barrier&quot;. A migration barrier of 1 means that a slave# will migrate only if there is at least 1 other working slave for its master# and so forth. It usually reflects the number of slaves you want for every# master in your cluster.## Default is 1 (slaves migrate only if their masters remain with at least# one slave). To disable migration just set it to a very large value.# A value of 0 can be set but is useful only for debugging and dangerous# in production.## cluster-migration-barrier 1# By default Redis Cluster nodes stop accepting queries if they detect there# is at least an hash slot uncovered (no available node is serving it).# This way if the cluster is partially down (for example a range of hash slots# are no longer covered) all the cluster becomes, eventually, unavailable.# It automatically returns available as soon as all the slots are covered again.## However sometimes you want the subset of the cluster which is working,# to continue to accept queries for the part of the key space that is still# covered. In order to do so, just set the cluster-require-full-coverage# option to no.## cluster-require-full-coverage yes# In order to setup your cluster make sure to read the documentation# available at http:&#x2F;&#x2F;redis.io web site.################################## SLOW LOG #################################### The Redis Slow Log is a system to log queries that exceeded a specified# execution time. The execution time does not include the I&#x2F;O operations# like talking with the client, sending the reply and so forth,# but just the time needed to actually execute the command (this is the only# stage of command execution where the thread is blocked and can not serve# other requests in the meantime).## You can configure the slow log with two parameters: one tells Redis# what is the execution time, in microseconds, to exceed in order for the# command to get logged, and the other parameter is the length of the# slow log. When a new command is logged the oldest one is removed from the# queue of logged commands.# The following time is expressed in microseconds, so 1000000 is equivalent# to one second. Note that a negative number disables the slow log, while# a value of zero forces the logging of every command.slowlog-log-slower-than 10000# There is no limit to this length. Just be aware that it will consume memory.# You can reclaim memory used by the slow log with SLOWLOG RESET.slowlog-max-len 128################################ LATENCY MONITOR ############################### The Redis latency monitoring subsystem samples different operations# at runtime in order to collect data related to possible sources of# latency of a Redis instance.## Via the LATENCY command this information is available to the user that can# print graphs and obtain reports.## The system only logs operations that were performed in a time equal or# greater than the amount of milliseconds specified via the# latency-monitor-threshold configuration directive. When its value is set# to zero, the latency monitor is turned off.## By default latency monitoring is disabled since it is mostly not needed# if you don&#39;t have latency issues, and collecting data has a performance# impact, that while very small, can be measured under big load. Latency# monitoring can easily be enabled at runtime using the command# &quot;CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;&quot; if needed.latency-monitor-threshold 0############################# EVENT NOTIFICATION ############################### Redis can notify Pub&#x2F;Sub clients about events happening in the key space. This feature is documented at http:&#x2F;&#x2F;redis.io&#x2F;topics&#x2F;notifications## For instance if keyspace events notification is enabled, and a client performs a DEL operation on key &quot;foo&quot; stored in the Database 0, two# messages will be published via Pub&#x2F;Sub:## PUBLISH __keyspace@0__:foo del# PUBLISH __keyevent@0__:del foo## It is possible to select the events that Redis will notify among a set# of classes. Every class is identified by a single character:## K Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.# E Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.# g Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...# $ String commands# l List commands# s Set commands# h Hash commands# z Sorted set commands# x Expired events (events generated every time a key expires)# e Evicted events (events generated when a key is evicted for maxmemory)# A Alias for g$lshzxe, so that the &quot;AKE&quot; string means all the events.## The &quot;notify-keyspace-events&quot; takes as argument a string that is composed# of zero or multiple characters. The empty string means that notifications# are disabled.## Example: to enable list and generic events, from the point of view of the# event name, use:## notify-keyspace-events Elg## Example 2: to get the stream of the expired keys subscribing to channel# name __keyevent@0__:expired use:## notify-keyspace-events Ex## By default all notifications are disabled because most users don&#39;t need# this feature and the feature has some overhead. Note that if you don&#39;t# specify at least one of K or E, no events will be delivered.notify-keyspace-events &quot;&quot;############################### ADVANCED CONFIG ################################ Hashes are encoded using a memory efficient data structure when they have a# small number of entries, and the biggest entry does not exceed a given# threshold. These thresholds can be configured using the following directives.hash-max-ziplist-entries 512hash-max-ziplist-value 64# Lists are also encoded in a special way to save a lot of space. The number of entries allowed per internal list node can be specified# as a fixed maximum size or a maximum number of elements. For a fixed maximum size, use -5 through -1, meaning:# -5: max size: 64 Kb &lt;-- not recommended for normal workloads# -4: max size: 32 Kb &lt;-- not recommended# -3: max size: 16 Kb &lt;-- probably not recommended# -2: max size: 8 Kb &lt;-- good# -1: max size: 4 Kb &lt;-- good# Positive numbers mean store up to _exactly_ that number of elements# per list node.# The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),# but if your use case is unique, adjust the settings as necessary.list-max-ziplist-size -2# Lists may also be compressed.# Compress depth is the number of quicklist ziplist nodes from *each* side of# the list to *exclude* from compression. The head and tail of the list# are always uncompressed for fast push&#x2F;pop operations. Settings are:# 0: disable all list compression# 1: depth 1 means &quot;don&#39;t start compressing until after 1 node into the list,# going from either the head or tail&quot;# So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail]# [head], [tail] will always be uncompressed; inner nodes will compress.# 2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail]# 2 here means: don&#39;t compress head or head-&gt;next or tail-&gt;prev or tail,# but compress all nodes between them.# 3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]# etc.list-compress-depth 0# Sets have a special encoding in just one case: when a set is composed of just strings that happen to be integers in radix 10 in the range# of 64 bit signed integers.# The following configuration setting sets the limit in the size of the set in order to use this special memory saving encoding.set-max-intset-entries 512# Similarly to hashes and lists, sorted sets are also specially encoded in order to save a lot of space. This encoding is only used when the length and# elements of a sorted set are below the following limits:zset-max-ziplist-entries 128zset-max-ziplist-value 64# HyperLogLog sparse representation bytes limit. The limit includes the# 16 bytes header. When an HyperLogLog using the sparse representation crosses# this limit, it is converted into the dense representation.## A value greater than 16000 is totally useless, since at that point the# dense representation is more memory efficient.## The suggested value is ~ 3000 in order to have the benefits of# the space efficient encoding without slowing down too much PFADD,# which is O(N) with the sparse encoding. The value can be raised to# ~ 10000 when CPU is not a concern, but space is, and the data set is# composed of many HyperLogLogs with cardinality in the 0 - 15000 range.hll-sparse-max-bytes 3000# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in# order to help rehashing the main Redis hash table (the one mapping top-level# keys to values). The hash table implementation Redis uses (see dict.c)# performs a lazy rehashing: the more operation you run into a hash table# that is rehashing, the more rehashing &quot;steps&quot; are performed, so if the# server is idle the rehashing is never complete and some more memory is used# by the hash table.## The default is to use this millisecond 10 times every second in order to# actively rehash the main dictionaries, freeing memory when possible.## If unsure:# use &quot;activerehashing no&quot; if you have hard latency requirements and it is# not a good thing in your environment that Redis can reply from time to time# to queries with 2 milliseconds delay.## use &quot;activerehashing yes&quot; if you don&#39;t have such hard requirements but# want to free memory asap when possible.activerehashing yes# The client output buffer limits can be used to force disconnection of clients# that are not reading data from the server fast enough for some reason (a# common reason is that a Pub&#x2F;Sub client can&#39;t consume messages as fast as the# publisher can produce them).## The limit can be set differently for the three different classes of clients:## normal -&gt; normal clients including MONITOR clients# slave -&gt; slave clients# pubsub -&gt; clients subscribed to at least one pubsub channel or pattern## The syntax of every client-output-buffer-limit directive is the following:## client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;## A client is immediately disconnected once the hard limit is reached, or if# the soft limit is reached and remains reached for the specified number of# seconds (continuously).# So for instance if the hard limit is 32 megabytes and the soft limit is# 16 megabytes &#x2F; 10 seconds, the client will get disconnected immediately# if the size of the output buffers reach 32 megabytes, but will also get# disconnected if the client reaches 16 megabytes and continuously overcomes# the limit for 10 seconds.## By default normal clients are not limited because they don&#39;t receive data# without asking (in a push way), but just after a request, so only# asynchronous clients may create a scenario where data is requested faster# than it can read.## Instead there is a default limit for pubsub and slave clients, since# subscribers and slaves receive data in a push fashion.## Both the hard or the soft limit can be disabled by setting them to zero.client-output-buffer-limit normal 0 0 0client-output-buffer-limit slave 256mb 64mb 60client-output-buffer-limit pubsub 32mb 8mb 60# Redis calls an internal function to perform many background tasks, like closing connections of clients in timeout, purging expired keys that are# never requested, and so forth.# Not all tasks are performed with the same frequency, but Redis checks for tasks to perform according to the specified &quot;hz&quot; value.# By default &quot;hz&quot; is set to 10. Raising the value will use more CPU when Redis is idle, but at the same time will make Redis more responsive when# there are many keys expiring at the same time, and timeouts may be handled with more precision.# The range is between 1 and 500, however a value over 100 is usually not a good idea. Most users should use the default of 10 and raise this up to# 100 only in environments where very low latency is required.hz 10# When a child rewrites the AOF file, if the following option is enabled the file will be fsync-ed every 32 MB of data generated. This is useful# in order to commit the file to the disk more incrementally and avoid big latency spikes.aof-rewrite-incremental-fsync yes","categories":[{"name":"redis知识体系","slug":"redis知识体系","permalink":"https://jxdw.github.io/categories/redis%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【docker使用系列】构建自定义基础镜像","slug":"docker-build-basic-image","date":"2017-06-28T14:24:01.000Z","updated":"2020-10-24T13:11:05.940Z","comments":true,"path":"2017/06/28/docker-build-basic-image/","link":"","permalink":"https://jxdw.github.io/2017/06/28/docker-build-basic-image/","excerpt":"本文背景最近一年，时不时都在玩docker，有时候想实操一些特性或者功能的时候，发现从hub.docker.com上pull下的镜像，不是ubuntu就是最简版的linux,或者jre，好多命令都没有，甚是烦躁。今天终于忍不住，下定决心自己构建一个基础镜像。","text":"本文背景最近一年，时不时都在玩docker，有时候想实操一些特性或者功能的时候，发现从hub.docker.com上pull下的镜像，不是ubuntu就是最简版的linux,或者jre，好多命令都没有，甚是烦躁。今天终于忍不住，下定决心自己构建一个基础镜像。 编写dockerfile一直觉得centos7不错，也用习惯了。所以，基础镜像就基于centos FROM centos:7ADD jdk-8u102-linux-x64.tar.gz &#x2F;usr&#x2F;local&#x2F; ENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_102ENV CLASSPATH $JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jarENV PATH $PATH:$JAVA_HOME&#x2F;bin 执行构建命令docker build -t centos7java:8 . 后续操作可以执行docker tag到私有仓库url，然后push到私有仓库","categories":[{"name":"docker/k8s知识体系","slug":"docker-k8s知识体系","permalink":"https://jxdw.github.io/categories/docker-k8s%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【mysql使用系列】mysql配置文件解读","slug":"mysql-conf-introduce","date":"2017-06-21T10:18:14.000Z","updated":"2020-10-22T14:35:55.514Z","comments":true,"path":"2017/06/21/mysql-conf-introduce/","link":"","permalink":"https://jxdw.github.io/2017/06/21/mysql-conf-introduce/","excerpt":"本文参考资料https:&#x2F;&#x2F;mysqlrelease.com&#x2F;2016&#x2F;12&#x2F;announcing-mysql-server-5-7-17-5-6-35-and-5-5-54&#x2F;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;relnotes&#x2F;mysql&#x2F;5.7&#x2F;en&#x2F;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;relnotes&#x2F;mysql&#x2F;5.7&#x2F;en&#x2F;news-5-7-17.htmlhttps:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;programs-overview.html","text":"本文参考资料https:&#x2F;&#x2F;mysqlrelease.com&#x2F;2016&#x2F;12&#x2F;announcing-mysql-server-5-7-17-5-6-35-and-5-5-54&#x2F;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;relnotes&#x2F;mysql&#x2F;5.7&#x2F;en&#x2F;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;relnotes&#x2F;mysql&#x2F;5.7&#x2F;en&#x2F;news-5-7-17.htmlhttps:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;programs-overview.html mysql核心参数解释mysqld配置mysqld程序basic配置# 以下选项会被MySQL客户端应用读取。注意只有MySQL附带的客户端应用程序保证可以读取这段内容。如果你想你自己的MySQL应用程序获取这些值。需要在MySQL客户端库初始化的时候指定这些选项。# For advice on how to change settings please see http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;server-configuration-defaults.html# *** DO NOT EDIT THIS FILE. It&#39;s a template which will be copied to the# *** default location during install, and will be replaced if you# *** upgrade to a newer version of MySQL.[mysqld]# Remove leading # and set to the amount of RAM for the most important data cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.# innodb_buffer_pool_size &#x3D; 128M# ★★★这里很重要️能让MySQL登陆链接变快速skip-name-resolve# Remove leading # to turn on a very important data integrity option: logging# changes to the binary log between backups.# log_bin# These are commonly set, remove the # and set as required.# 使用给定目录作为根目录(安装目录)。# basedir &#x3D; .....# 从给定目录读取数据库文件。# datadir &#x3D; .....# 为mysqld程序指定一个存放进程ID的文件(仅适用于UNIX&#x2F;Linux系统);# pid-file &#x3D; .....# 指定MsSQL侦听的端口# port &#x3D; .....# server_id &#x3D; .....# 为MySQL客户程序与服务器之间的本地通信指定一个套接字文件(Linux下默认是&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock文件)# socket &#x3D; .....sql_mode&#x3D;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION# 一般配置选项datadir &#x3D; &#x2F;var&#x2F;lib&#x2F;mysqlpid-file &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pidport &#x3D; 3306socket &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.socklog-error &#x3D; &#x2F;var&#x2F;log&#x2F;mysql&#x2F;error.log# 设置character-set-server&#x3D;utf8# 指定MySQL可能的连接数量。当MySQL主线程在很短时间内接收到非常多的连接请求，该参数生效，主线程花费很短时间检查连接并且启动一个新线程。# back_log参数的值指出在MySQL暂时停止响应新请求之前的短时间内多少个请求可以被存在堆栈中。# 如果系统在一个短时间内有很多连接，则需要增大该参数的值，该参数值指定到来的TCP&#x2F;IP连接的侦听队列的大小。# 试图设定back_log高于你的操作系统的限制将是无效的。默认值为50。对于Linux系统推荐设置为小于512的整数。# back_log 是操作系统在监听队列中所能保持的连接数,队列保存了在 MySQL 连接管理器线程处理之前的连接.# 如果你有非常高的连接率并且出现 “connection refused” 报错,你就应该增加此处的值.# 检查你的操作系统文档来获取这个变量的最大值.如果将back_log设定到比你操作系统限制更高的值，将会没有效果back_log &#x3D; 300# 不在 TCP&#x2F;IP 端口上进行监听.如果所有的进程都是在同一台服务器连接到本地的 mysqld,# 这样设置将是增强安全的方法所有 mysqld 的连接都是通过 Unix Sockets 或者命名管道进行的.# 注意在 Windows下如果没有打开命名管道选项而只是用此项(通过 “enable-named-pipe” 选项) 将会导致 MySQL 服务没有任何作用!#skip-networking# MySQL 服务所允许的同时会话数的上限# 其中一个连接将被 SUPER 权限保留作为管理员登录.# 即便已经达到了连接数的上限.max_connections &#x3D; 3000# 每个客户端连接最大的错误允许数量,如果达到了此限制.这个客户端将会被 MySQL 服务阻止直到执行了 “FLUSH HOSTS” 或者服务重启# 非法的密码以及其他在链接时的错误会增加此值.查看 “Aborted_connects” 状态来获取全局计数器.max_connect_errors &#x3D; 50# 所有线程所打开表的数量.增加此值就增加了 mysqld 所需要的文件描述符的数量。# 这样你需要确认在 [mysqld_safe] 中 “open-files-limit” 变量设置打开文件数量允许至少等于 table_cache 的值table_open_cache &#x3D; 4096# 允许外部文件级别的锁. 打开文件锁会对性能造成负面影响，所以只有在你在同样的文件上运行多个数据库实例时才使用此选项(注意仍会有其他约束!)# 或者你在文件层面上使用了其他一些软件依赖来锁定 MyISAM 表#external-locking# 服务所能处理的请求包的最大大小以及服务所能处理的最大的请求大小(当与大的 BLOB 字段一起工作时相当必要)。每个连接独立的大小，大小动态增加max_allowed_packet &#x3D; 32M# 在一个事务中binlog为了记录SQL状态所持有的cache大小。如果你经常使用大的,多声明的事务,你可以增加此值来获取更大的性能.# 所有从事务来的状态都将被缓冲在 binlog 缓冲中然后在提交后一次性写入到 binlog 中如果事务比此值大, 会使用磁盘上的临时文件来替代.# 此缓冲在每个连接的事务第一次更新状态时被创建binlog_cache_size &#x3D; 4M# 独立的内存表所允许的最大容量。此选项为了防止意外创建一个超大的内存表导致永尽所有的内存资源。max_heap_table_size &#x3D; 128M# 随机读取数据缓冲区使用内存(read_rnd_buffer_size)：和顺序读取相对应，# 当 MySQL 进行非顺序读取（随机读取）数据块的时候，会利用&gt;这个缓冲区暂存读取的数据# 如根据索引信息读取表数据，根据排序后的结果集与表进行 Join 等等# 总的来说，就是当数据块的读取需要满足&gt;一定的顺序的情况下，MySQL 就需要产生随机读取，进而使用到 read_rnd_buffer_size 参数所设置的内存缓冲区read_rnd_buffer_size &#x3D; 16M# 排序缓冲被用来处理类似 ORDER BY 以及 GROUP BY 队列所引起的排序# 如果排序后的数据无法放入排序缓冲,一个用来替代的基于磁盘的合并分类会被使用# 查看 “Sort_merge_passes” 状态变量。# 在排序发生时由每个线程分配# 每个需要进行排序的线程分配该大小的一个缓冲区。增加这值加速ORDER BY或GROUP BY操作。# 注意：该参数对应的分配内存是每连接独占！如果有100个连接，那么实际分配的总共排序缓冲区大小为100×6&#x3D;600MBsort_buffer_size &#x3D; 16M# 此缓冲被使用来优化全联合(FULL JOINS 不带索引的联合)。# 类似的联合在极大多数情况下有非常糟糕的性能表现,但是将此值设大能够减轻性能影响。# 通过 “Select_full_join” 状态变量查看全联合的数量# 当全联合发生时,在每个线程中分配join_buffer_size &#x3D; 16M# 缓存可重用的线程数# thread_cache &#x3D; 8# 避免MySQL的外部锁定，减少出错几率增强稳定性。# skip-locking # 我们在 cache 中保留多少线程用于重用# 当一个客户端断开连接后,如果 cache 中的线程还少于 thread_cache_size,则客户端线程被放入cache 中。# 这可以在你需要大量新连接的时候极大的减少线程创建的开销# (一般来说如果你有好的线程模型的话,这不会有明显的性能提升。)thread_cache_size &#x3D; 16# 此允许应用程序给予线程系统一个提示在同一时间给予渴望被运行的线程的数量。# 此值只对于支持 thread_concurrency() 函数的系统有意义( 例如Sun Solaris)。# 你可可以尝试使用 [CPU数量]*(2..4) 来作为 thread_concurrency 的值#****(此属性对当前环境无效)****# thread_concurrency &#x3D; 8# 查询缓冲常被用来缓冲 SELECT 的结果并且在下一次同样查询的时候不再执行直接返回结果。# 打开查询缓冲可以极大的提高服务器速度, 如果你有大量的相同的查询并且很少修改表。# 查看 “Qcache_lowmem_prunes” 状态变量来检查是否当前值对于你的负载来说是否足够高。# 注意: 在你表经常变化的情况下或者如果你的查询原文每次都不同,# 查询缓冲也许引起性能下降而不是性能提升。query_cache_size &#x3D; 128M# 只有小于此设定值的结果才会被缓冲# 此设置用来保护查询缓冲,防止一个极大的结果集将其他所有的查询结果都覆盖。query_cache_limit &#x3D; 4M# 被全文检索索引的最小的字长。# 你也许希望减少它，如果你需要搜索更短字的时候。# 注意在你修改此值之后，你需要重建你的 FULLTEXT 索引ft_min_word_len &#x3D; 8# 如果你的系统支持 memlock() 函数，你也许希望打开此选项用以让运行中的 mysql 在在内存高度紧张的时候，数据在内存中保持锁定并且防止可能被 swapping out# 此选项对于性能有益#memlock# 当创建新表时作为默认使用的表类型，# 如果在创建表示没有特别执行表类型，将会使用此值#****(此属性对当前环境无效)****#default_table_type &#x3D; InnoDB# 线程使用的堆大小. 此容量的内存在每次连接时被预留.# MySQL 本身常不会需要超过 64K 的内存# 如果你使用你自己的需要大量堆的 UDF 函数或者你的操作系统对于某些操作需要更多的堆，你也许需要将其设置的更高一点.thread_stack &#x3D; 512K# 设定默认的事务隔离级别.可用的级别如下:# READ-UNCOMMITTED， READ-COMMITTED， REPEATABLE-READ， SERIALIZABLEtransaction_isolation &#x3D; REPEATABLE-READ# 内部(内存中)临时表的最大大小# 如果一个表增长到比此值更大，将会自动转换为基于磁盘的表。# 此限制是针对单个表的，而不是总和。tmp_table_size &#x3D; 128M# 打开二进制日志功能。# 在复制(replication)配置中，作为 MASTER 主服务器必须打开此项# 如果你需要从你最后的备份中做基于时间点的恢复，你也同样需要二进制日志。log-bin&#x3D;mysql-bin# 如果你在使用链式从服务器结构的复制模式 (A-&gt;B-&gt;C)，# 你需要在服务器B上打开此项。# 此选项打开在从线程上重做过的更新的日志， 并将其写入从服务器的二进制日志。#log_slave_updates# 打开全查询日志。 所有的由服务器接收到的查询 (甚至对于一个错误语法的查询)# 都会被记录下来。 这对于调试非常有用， 在生产环境中常常关闭此项。#log# 将警告打印输出到错误 log 文件。 如果你对于 MySQL 有任何问题# 你应该打开警告 log 并且仔细审查错误日志，查出可能的原因。#log_warnings# 记录慢速查询。 慢速查询是指消耗了比 “long_query_time” 定义的更多时间的查询。如果 log_long_format 被打开，那些没有使用索引的查询也会被记录。# 如果你经常增加新查询到已有的系统内的话。 一般来说这是一个好主意，#log_slow_queries# 有的使用了比这个时间(以秒为单位)更多的查询会被认为是慢速查询。# 不要在这里使用“1″, 否则会导致所有的查询,甚至非常快的查询页被记录下来(由于 MySQL 目前时间的精确度只能达到秒的级别)。long_query_time &#x3D; 6# 在慢速日志中记录更多的信息。一般此项最好打开。打开此项会记录使得那些没有使用索引的查询也被作为到慢速查询附加到慢速日志里#log_long_format# 此目录被MySQL用来保存临时文件。例如,# 它被用来处理基于磁盘的大型排序,和内部排序一样。# 以及简单的临时表。# 如果你不创建非常大的临时文件,将其放置到 swapfs&#x2F;tmpfs 文件系统上也许比较好# 另一种选择是你也可以将其放置在独立的磁盘上。# 你可以使用”;”来放置多个路径# 他们会按照 roud-robin 方法被轮询使用。#tmpdir &#x3D; &#x2F;tmp mysqld主从复制相关的设置# 唯一的服务辨识号,数值位于 1 到 2^32-1之间。# 此值在master和slave上都需要设置。# 如果 “master-host” 没有被设置,则默认为1, 但是如果忽略此选项,MySQL不会作为master生效。server-id &#x3D; 1# 复制的Slave (去掉master段的注释来使其生效)## 为了配置此主机作为复制的slave服务器,你可以选择两种方法:## 1) 使用 CHANGE MASTER TO 命令 (在我们的手册中有完整描述) -# 语法如下:## CHANGE MASTER TO MASTER_HOST&#x3D;, MASTER_PORT&#x3D;,# MASTER_USER&#x3D;, MASTER_PASSWORD&#x3D; ;## 你需要替换掉，等被尖括号包围的字段以及使用master的端口号替换 (默认3306)。## 例子:## CHANGE MASTER TO MASTER_HOST&#x3D;’125.564.12.1′, MASTER_PORT&#x3D;3306,# MASTER_USER&#x3D;’joe’, MASTER_PASSWORD&#x3D;’secret’;## 或者## 2) 设置以下的变量. 不论如何, 在你选择这种方法的情况下， 然后第一次启动复制(甚至不成功的情况下，# 例如如果你输入错密码在master-password字段并且slave无法连接)，# slave会创建一个 master.info 文件，并且之后任何对于包含在此文件内的参数的变化都会被忽略# 并且由 master.info 文件内的内容覆盖， 除非你关闭slave服务， 删除 master.info 并且重启slave 服务。# 由于这个原因，你也许不想碰一下的配置(注释掉的) 并且使用 CHANGE MASTER TO (查看上面) 来代替## 所需要的唯一id号位于 2 和 2^32 – 1之间# (并且和master不同)# 如果master-host被设置了.则默认值是2# 但是如果省略,则不会生效#server-id &#x3D; 2## 复制结构中的master – 必须#master-host &#x3D;## 当连接到master上时slave所用来认证的用户名 – 必须#master-user &#x3D;## 当连接到master上时slave所用来认证的密码 – 必须#master-password &#x3D;## master监听的端口.# 可选 – 默认是3306#master-port &#x3D;# 使得slave只读。只有用户拥有SUPER权限和在上面的slave线程能够修改数据。# 你可以使用此项去保证没有应用程序会意外的修改slave而不是master上的数据#read_only mysqld INNODB相关选项# 如果你的 MySQL 服务包含 InnoDB 支持但是并不打算使用的话,# 使用此选项会节省内存以及磁盘空间,并且加速某些部分#skip-innodb# 附加的内存池被 InnoDB 用来保存 metadata 信息(5.6中不再推荐使用)# 如果 InnoDB 为此目的需要更多的内存,它会开始从 OS 这里申请内存.# 由于这个操作在大多数现代操作系统上已经足够快, 你一般不需要修改此值.# SHOW INNODB STATUS 命令会显示当先使用的数量.#****(此属性对当前环境无效)****#innodb_additional_mem_pool_size &#x3D; 64M# InnoDB使用一个缓冲池来保存索引和原始数据, 不像 MyISAM.# 这里你设置越大,这能保证你在大多数的读取操作时使用的是内存而不是硬盘,在存取表里面数据时所需要的磁盘 I&#x2F;O 越少.# 在一个独立使用的数据库服务器上,你可以设置这个变量到服务器物理内存大小的80%# 不要设置过大,否则,由于物理内存的竞争可能导致操作系统的换页颠簸.# 注意在32位系统上你每个进程可能被限制在 2-3.5G 用户层面内存限制,# 所以不要设置的太高.innodb_buffer_pool_size &#x3D; 6G# InnoDB 将数据保存在一个或者多个数据文件中成为表空间.# 如果你只有单个逻辑驱动保存你的数据,一个单个的自增文件就足够好了.# 其他情况下.每个设备一个文件一般都是个好的选择.# 你也可以配置 InnoDB 来使用裸盘分区 – 请参考手册来获取更多相关内容innodb_data_file_path &#x3D; ibdata1:10M:autoextend# 设置此选项如果你希望InnoDB表空间文件被保存在其他分区.# 默认保存在MySQL的datadir中.#innodb_data_home_dir &#x3D;# 用来同步IO操作的IO线程的数量.# 此值在Unix下被硬编码为8,但是在Windows磁盘I&#x2F;O可能在一个大数值下表现的更好.#innodb_file_io_threads &#x3D; 8# 如果你发现 InnoDB 表空间损坏, 设置此值为一个非零值可能帮助你导出你的表.# 从1开始并且增加此值知道你能够成功的导出表.#innodb_force_recovery&#x3D;1# 在 InnoDb 核心内的允许线程数量.# 最优值依赖于应用程序,硬件以及操作系统的调度方式.# 过高的值可能导致线程的互斥颠簸.innodb_thread_concurrency &#x3D; 16# 如果设置为1 ,InnoDB 会在每次提交后刷新(fsync)事务日志到磁盘上,# 这提供了完整的 ACID 行为.# 如果你愿意对事务安全折衷, 并且你正在运行一个小的事物, 你可以设置此值到0或者2来减少由事务日志引起的磁盘I&#x2F;O# 0代表日志只大约每秒写入日志文件并且日志文件刷新到磁盘.# 2代表日志写入日志文件在每次提交后,但是日志文件只有大约每秒才会刷新到磁盘上.innodb_flush_log_at_trx_commit &#x3D; 2#（说明：如果是游戏服务器，建议此值设置为2；如果是对数据安全要求极高的应用，建议设置为1；#设置为0性能最高，但如果发生故障，数据可能会有丢失的危险！#默认值1的意思是每一次事务提交或事务外的指令都需要把日志写入（flush）硬盘，这是很费时的。#特别是使用电池供电缓存（Battery backed up cache）时。#设成2对于很多运用，特别是从MyISAM表转过来的是可以的，它的意思是不写入硬盘而是写入系统缓存。#日志仍然会每秒flush到硬盘，所以你一般不会丢失超过1-2秒的更新。#设成0会更快一点，但安全方面比较差，即使MySQL挂了也可能会丢失事务的数据。而值2只会在整个操作系统挂了时才可能丢数据。）# 加速 InnoDB 的关闭. 这会阻止 InnoDB 在关闭时做全清除以及插入缓冲合并.# 这可能极大增加关机时间, 但是取而代之的是 InnoDB 可能在下次启动时做这些操作.#innodb_fast_shutdown# 用来缓冲日志数据的缓冲区的大小.# 当此值快满时, InnoDB 将必须刷新数据到磁盘上.# 由于基本上每秒都会刷新一次,所以没有必要将此值设置的太大(甚至对于长事务而言)innodb_log_buffer_size &#x3D; 16M# 在日志组中每个日志文件的大小.# 你应该设置日志文件总合大小到你缓冲池大小的25%~100%# 来避免在日志文件覆写上不必要的缓冲池刷新行为.# 不论如何, 请注意一个大的日志文件大小会增加恢复进程所需要的时间.innodb_log_file_size &#x3D; 512M# 在日志组中的文件总数.# 通常来说2~3是比较好的.innodb_log_files_in_group &#x3D; 3# InnoDB 的日志文件所在位置. 默认是 MySQL 的 datadir.# 你可以将其指定到一个独立的硬盘上或者一个RAID1卷上来提高其性能#innodb_log_group_home_dir# 在 InnoDB 缓冲池中最大允许的脏页面的比例.# 如果达到限额, InnoDB 会开始刷新他们防止他们妨碍到干净数据页面.# 这是一个软限制,不被保证绝对执行.innodb_max_dirty_pages_pct &#x3D; 90# InnoDB 用来刷新日志的方法.# 表空间总是使用双重写入刷新方法# 默认值是 “fdatasync”, 另一个是 “O_DSYNC”.# 一般来说，如果你有硬件 RAID 控制器，并且其独立缓存采用 write-back 机制，并有着电池断电保护，那么应该设置配置为 O_DIRECT# 否则，大多数情况下应将其设为 fdatasync#innodb_flush_method&#x3D;fdatasync# 在被回滚前,一个 InnoDB 的事务应该等待一个锁被批准多久.# InnoDB 在其拥有的锁表中自动检测事务死锁并且回滚事务.# 如果你使用 LOCK TABLES 指令, 或者在同样事务中使用除了 InnoDB 以外的其他事务安全的存储引擎# 那么一个死锁可能发生而 InnoDB 无法注意到.# 这种情况下这个 timeout 值对于解决这种问题就非常有帮助.innodb_lock_wait_timeout &#x3D; 120# 这项设置告知InnoDB是否需要将所有表的数据和索引存放在共享表空间里（innodb_file_per_table &#x3D; OFF） 或者为每张表的数据单独放在一个.ibd文件（innodb_file_per_table &#x3D; ON）# 每张表一个文件允许你在drop、truncate或者rebuild表时回收磁盘空间# 这对于一些高级特性也是有必要的，比如数据压缩,但是它不会带来任何性能收益innodb_file_per_table &#x3D; on mysqldump配置[mysqldump]# 不要在将内存中的整个结果写入磁盘之前缓存. 在导出非常巨大的表时需要此项quick max_allowed_packet = 32M mysql客户端[mysql]no-auto-rehashdefault-character-set&#x3D;utf8# 仅仅允许使用键值的 UPDATEs 和 DELETEs .safe-updates myisamchk配置[myisamchk]key_buffer &#x3D; 16Msort_buffer_size &#x3D; 16Mread_buffer &#x3D; 8Mwrite_buffer &#x3D; 8M mysqlhotcopy配置[mysqlhotcopy]interactive-timeout mysqld_safe配置[mysqld_safe]# 增加每个进程的可打开文件数量.# 警告: 确认你已经将全系统限制设定的足够高!# 打开大量表需要将此值设大open-files-limit &#x3D; 8192 MySQL客户端````[client]default-character-set=utf8```","categories":[{"name":"mysql知识体系","slug":"mysql知识体系","permalink":"https://jxdw.github.io/categories/mysql%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【mysql知识体系】mysql5.7安装和物理文件解读","slug":"mysql5-7-install","date":"2017-06-21T09:02:30.000Z","updated":"2020-10-22T14:36:08.148Z","comments":true,"path":"2017/06/21/mysql5-7-install/","link":"","permalink":"https://jxdw.github.io/2017/06/21/mysql5-7-install/","excerpt":"安装规划不要安装在根目录下，尽量挂在数据盘下。通用做法:数据盘/data。","text":"安装规划不要安装在根目录下，尽量挂在数据盘下。通用做法:数据盘/data。 mysql下载、安装和配置下载、解压、环境变量配置groupadd mysqluseradd -g mysql -s &#x2F;sbin&#x2F;nologin mysqlcd &#x2F;root&#x2F;tar -zxvf mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz -C &#x2F;datacd &#x2F;data&#x2F;ln -s mysql-5.7.17-linux-glibc2.5-x86_64 mysqlecho &quot;export PATH&#x3D;$PATH:&#x2F;data&#x2F;mysql&#x2F;bin&quot; &gt;&gt; &#x2F;etc&#x2F;profilesource &#x2F;etc&#x2F;profile 创建数据、日志、配置文件目录mkdir -p &#x2F;data&#x2F;mysql&#x2F;&#123;data,binlogs,log,etc,run&#125;chown -R mysql.mysql &#x2F;data&#x2F;mysql&#x2F;&#123;data,binlogs,log,etc,run&#125; 增加配置文件编译版本的mysql，配置文件只允许在/etc/my.cnf(或者/etc/mysql/my.cnf、/usr/local/mysql/etc/my.cnf).vim etc/my.cnf [client]port &#x3D; 3306socket &#x3D; &#x2F;data&#x2F;mysql&#x2F;run&#x2F;mysql.sock[mysqld]port &#x3D; 3306basedir&#x3D;&#x2F;data&#x2F;mysql&#x2F;socket &#x3D; &#x2F;data&#x2F;mysql&#x2F;run&#x2F;mysql.sockpid_file &#x3D; &#x2F;data&#x2F;mysql&#x2F;run&#x2F;mysql.piddatadir &#x3D; &#x2F;data&#x2F;mysql&#x2F;datadefault_storage_engine &#x3D; InnoDBmax_allowed_packet &#x3D; 512Mmax_connections &#x3D; 2048open_files_limit &#x3D; 65535skip-name-resolvelower_case_table_names&#x3D;1character-set-server &#x3D; utf8mb4collation-server &#x3D; utf8mb4_unicode_ciinit_connect&#x3D;&#39;SET NAMES utf8mb4&#39;innodb_buffer_pool_size &#x3D; 1024Minnodb_log_file_size &#x3D; 2048Minnodb_file_per_table &#x3D; 1innodb_flush_log_at_trx_commit &#x3D; 0key_buffer_size &#x3D; 64Mlog-error &#x3D; &#x2F;data&#x2F;mysql&#x2F;log&#x2F;mysql_error.loglog-bin &#x3D; &#x2F;data&#x2F;mysql&#x2F;binlogs&#x2F;mysql-binslow_query_log &#x3D; 1slow_query_log_file &#x3D; &#x2F;data&#x2F;mysql&#x2F;log&#x2F;mysql_slow_query.loglong_query_time &#x3D; 5tmp_table_size &#x3D; 32Mmax_heap_table_size &#x3D; 32Mquery_cache_type &#x3D; 0query_cache_size &#x3D; 0server-id&#x3D;1 mysql初始化和物理文件解读参考 https://dev.mysql.com/doc/refman/5.7/en/programs-overview.html ，说明下mysql组件中最常用的三个组件: mysqldmysql daemon，mysql server。 mysqlThe command-line tool for interactively entering SQL statements or executing them from a file in batch mode) mysql_ssl_rsa_setupThis program creates the SSL certificate and key files and RSA key-pair files required to support secure connections, if those files are missing. mysql服务端启动核心-mysqld帮助 初始化mysql数据库mysqld --initialize-insecure --user&#x3D;mysql --basedir&#x3D;&#x2F;data&#x2F;mysql --datadir&#x3D;&#x2F;data&#x2F;mysql&#x2F;datamysql_ssl_rsa_setup --basedir&#x3D;&#x2F;data&#x2F;mysql --datadir&#x3D;&#x2F;data&#x2F;mysql&#x2F;data&#x2F; 查看数据库物理文件cd /data/mysql/data/ mysql系统数据库在MySQL5.7.17中，系统数据库包括information_schema，mysql，sys，performance_schema information_schema库提供了数据库的元数据信息，是数据库的数据，比如数据库的名字，数据库中的表名，字段名，字段类型等，可以说是数据库的数据字典信息。这个库中的信息并非物理地保存在表中，而是动态地去读取其他文件得到的，比如上面一开始提到的共享表空间，对于用户数据中的对象，比如表结构等，都保存在共享表空间中，information_schema库中的一些信息可以认为是直接映射到共享表空间中的信息的。因此第一个截图中，并没有information_schema的路径（文件夹） performance_schema库是数据库性能相关的信息的数据，记录的是数据库服务器的性能参数。1）保留进程等待信息，包括锁，互斥变量，文件信息等。2）保存历史事件汇总信息，为MySQL服务器性能评估提供参考信息3）配置型选项，来决定是否记录一些与性能相关的信息，比如profile信息等，参考http://www.cnblogs.com/wy123/p/6979499.html sys库可以根据sys库中的数据快速了解系统的运行信息，方便地查询出来数据库的信息，在性能瓶颈，自动化吧运维等方面都有很大的帮助sys库中的信息是通过视图的方式，将information_schema和performance_schema库中的数据结合起来，可以得到更加直观和容易理解的信息 mysql库存储了系统的用户权限信息及帮助信息，新建的用户，用户的权限信息的都存储在MySQL库。比如在修改MySQL的root密码的时候，都要先use mysql这个系统库，然后再执行用户，授权等操作。对于innodb表，如果是独立的表空间的话，数据库中的表结构以及数据都存储在数据库的路径下（而不是在共享表空间中ibdata1文件中）但是数据中的其他对象，包括undo信息，也即数据被修改之后，事务提交之间的版本信息，仍然存储在共享表空间的ibdata1文件中 基于ibdata1文件的共享表空间对于innodb，innodb_file_per_table选项决定了是否启动独立表空间，MySQL5.7中是默认启动的，也就是说MySQL的用户数据库将使用独立表空间来存储数据。 基于ibtmp1文件的临时表空间临时表空间是存储全局级，回话级，事物级，检索级临时表对象的地方，有参数innodb_temp_data_file_path可以看到临时表空间的信息。 基于ib_logfileN的重做日志redo日志默认情况下有两个文件，也即：ib_logfile0和ib_logfile1。如果在数据库启动的过程中没有这两个文件，系统会默认自动生成这两个文件。默认情况下，ib_logfile0和ib_logfile1是两个独立的日志文件（可以配置的更多个ib_logfile文件），但是redo日志的写入在逻辑上对于ib_logfile0和ib_logfile1是连续的。重做日志是MySQL事物处理的核心文件，事务处理的核心之一是一致性，也就是说要么全做，要么全不做。 基于mysql-bin.X的binlog文件bin-log日志记录数据中发生的写入性操作（增删改），但不记录查询操作，语句以事件的方式保存，描述了数据的更改过程，此日志对发生灾难时数据恢复、主从同步中起到了极为重要的作用。 mysql配置systemd启动mysql配置systemd启动cd &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;systemtouch mysqld.service vim mysqld.service 最终的文件如下: # systemd service file for MySQL forking server[Unit]Description&#x3D;MySQL ServerDocumentation&#x3D;man:mysqld(8)Documentation&#x3D;http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;en&#x2F;using-systemd.htmlAfter&#x3D;network.targetAfter&#x3D;syslog.target[Install]WantedBy&#x3D;multi-user.target[Service]User&#x3D;mysqlGroup&#x3D;mysqlType&#x3D;forkingPIDFile&#x3D;&#x2F;data&#x2F;mysql&#x2F;run&#x2F;mysqld.pid# Disable service start and stop timeout logic of systemd for mysqld service.TimeoutSec&#x3D;0# Execute pre and post scripts as rootPermissionsStartOnly&#x3D;true# Needed to create system tables#ExecStartPre&#x3D;&#x2F;home&#x2F;bin&#x2F;mysqld_pre_systemd# Start main serviceExecStart&#x3D;&#x2F;data&#x2F;mysql&#x2F;bin&#x2F;mysqld --daemonize --pid-file&#x3D;&#x2F;data&#x2F;mysql&#x2F;run&#x2F;mysqld.pid $MYSQLD_OPTS# Use this to switch malloc implementationEnvironmentFile&#x3D;-&#x2F;etc&#x2F;sysconfig&#x2F;mysq# Sets open_files_limitLimitNOFILE &#x3D; 65535Restart&#x3D;on-failureRestartPreventExitStatus&#x3D;1PrivateTmp&#x3D;false mysql启动systemctl daemon-reloadsystemctl enable mysqld.servicesystemctl is-enabled mysqldsystemctl start mysqld.service mysql修改root密码和访问权限mysql -h localhost -u rootflush privileges;use mysql;UPDATE user SET authentication_string &#x3D; PASSWORD(&#39;123456&#39;), password_expired &#x3D; &#39;N&#39; WHERE User &#x3D; &#39;root&#39; AND Host &#x3D; &#39;localhost&#39;;UPDATE user SET Host &#x3D; &#39;%&#39; WHERE User &#x3D; &#39;root&#39;;flush privileges;","categories":[{"name":"mysql知识体系","slug":"mysql知识体系","permalink":"https://jxdw.github.io/categories/mysql%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【centos使用系列】centos下的小工具1-tree","slug":"centos-little-tools","date":"2017-06-15T13:11:16.000Z","updated":"2020-10-27T11:24:53.786Z","comments":true,"path":"2017/06/15/centos-little-tools/","link":"","permalink":"https://jxdw.github.io/2017/06/15/centos-little-tools/","excerpt":"","text":"tree的离线安装使用过程从findrpm下载rpm包yum安装 yum localinstall rpm包 使用tree --charset ASCII -L 3","categories":[{"name":"centos知识体系","slug":"centos知识体系","permalink":"https://jxdw.github.io/categories/centos%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【java实现微服务架构系列】服务注册中心eureka的初步使用","slug":"spring-cloud-1x-cloud-netfix-eureka","date":"2017-05-27T09:13:39.000Z","updated":"2020-10-22T14:25:21.244Z","comments":true,"path":"2017/05/27/spring-cloud-1x-cloud-netfix-eureka/","link":"","permalink":"https://jxdw.github.io/2017/05/27/spring-cloud-1x-cloud-netfix-eureka/","excerpt":"概述本文参考资料prometheus监控: https:&#x2F;&#x2F;github.com&#x2F;prometheus&#x2F;client_java&#x2F;releases&#x2F;tag&#x2F;parent-0.5.0spring官方文档： https:&#x2F;&#x2F;cloud.spring.io&#x2F;spring-cloud-static&#x2F;Edgware.SR5&#x2F;single&#x2F;spring-cloud.htmlhttps:&#x2F;&#x2F;github.com&#x2F;Netflix&#x2F;eureka&#x2F;wiki&#x2F;eureka-REST-operations","text":"概述本文参考资料prometheus监控: https:&#x2F;&#x2F;github.com&#x2F;prometheus&#x2F;client_java&#x2F;releases&#x2F;tag&#x2F;parent-0.5.0spring官方文档： https:&#x2F;&#x2F;cloud.spring.io&#x2F;spring-cloud-static&#x2F;Edgware.SR5&#x2F;single&#x2F;spring-cloud.htmlhttps:&#x2F;&#x2F;github.com&#x2F;Netflix&#x2F;eureka&#x2F;wiki&#x2F;eureka-REST-operations 关于spring boot/cloud 1.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring data redis client、spring web service，进而集大成。Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client、eureka client。 eureka server配置pom配置&lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;1.7&lt;&#x2F;maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.7&lt;&#x2F;maven.compiler.target&gt; &lt;skipCheck&gt;true&lt;&#x2F;skipCheck&gt; &lt;!--指定版本号，防止有些环境是jdk7--&gt; &lt;jetty.version&gt;9.2.19.v20160908&lt;&#x2F;jetty.version&gt; &lt;&#x2F;properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;&#x2F;groupId&gt; &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt; &lt;version&gt;4.11&lt;&#x2F;version&gt; &lt;scope&gt;test&lt;&#x2F;scope&gt; &lt;&#x2F;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt; &lt;&#x2F;exclusion&gt; &lt;&#x2F;exclusions&gt; &lt;&#x2F;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt; &lt;artifactId&gt;spring-boot-starter-jetty&lt;&#x2F;artifactId&gt; &lt;&#x2F;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt; &lt;artifactId&gt;spring-cloud-netflix-eureka-server&lt;&#x2F;artifactId&gt; &lt;version&gt;1.4.0.RELEASE&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;!-- The prometheus client --&gt; &lt;dependency&gt; &lt;groupId&gt;io.prometheus&lt;&#x2F;groupId&gt; &lt;artifactId&gt;simpleclient&lt;&#x2F;artifactId&gt; &lt;version&gt;0.5.0&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;!-- Hotspot JVM metrics--&gt; &lt;dependency&gt; &lt;groupId&gt;io.prometheus&lt;&#x2F;groupId&gt; &lt;artifactId&gt;simpleclient_hotspot&lt;&#x2F;artifactId&gt; &lt;version&gt;0.5.0&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.prometheus&lt;&#x2F;groupId&gt; &lt;artifactId&gt;simpleclient_servlet&lt;&#x2F;artifactId&gt; &lt;version&gt;0.5.0&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;!-- Exposition HTTPServer--&gt; &lt;dependency&gt; &lt;groupId&gt;io.prometheus&lt;&#x2F;groupId&gt; &lt;artifactId&gt;simpleclient_httpserver&lt;&#x2F;artifactId&gt; &lt;version&gt;0.5.0&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;&#x2F;dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt; &lt;version&gt;Edgware.RELEASE&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;&#x2F;dependencies&gt; &lt;&#x2F;dependencyManagement&gt; application.yml配置server: port: 8084eureka: instance: hostname: ip地址 client: registerWithEureka: false fetchRegistry: false serviceUrl: defaultZone: http:&#x2F;&#x2F;ip地址:8084&#x2F;eureka&#x2F; 启动eureka和相应restful api操作metrics入口(可被监控) 获取所有实例 手工注册实例 手工下架实例","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【elastic-job基础系列】zookeeper技术概念和原理","slug":"zookeeper-introduce","date":"2017-04-20T11:17:59.000Z","updated":"2020-10-22T14:39:11.280Z","comments":true,"path":"2017/04/20/zookeeper-introduce/","link":"","permalink":"https://jxdw.github.io/2017/04/20/zookeeper-introduce/","excerpt":"参考《从paxos到zookeeper》做了一份思维导图。","text":"参考《从paxos到zookeeper》做了一份思维导图。","categories":[{"name":"job调度知识体系","slug":"job调度知识体系","permalink":"https://jxdw.github.io/categories/job%E8%B0%83%E5%BA%A6%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【docker使用系列】docker镜像导出与导入","slug":"docker-import-and-export","date":"2017-03-25T02:40:46.000Z","updated":"2020-10-24T13:11:05.951Z","comments":true,"path":"2017/03/25/docker-import-and-export/","link":"","permalink":"https://jxdw.github.io/2017/03/25/docker-import-and-export/","excerpt":"本文背景在镜像从一个docker集群向另外一个docker集群转移时，而不想向docker中央仓库时push，下面的命令可以用的到。","text":"本文背景在镜像从一个docker集群向另外一个docker集群转移时，而不想向docker中央仓库时push，下面的命令可以用的到。 docker savedocker save 镜像id &gt; 镜像名.tar 这个命令会生成一个tar包。将这个命令上传至目标docker集群的某一台机器上。 docker load和docker tagdocker load &lt; 镜像名.tar 这个命令可以导入到docker中，但是这时候还不能用。还需要打上tag。docker tag imageId 目标标签 docker push保险起见，最好push到对应的镜像仓库。","categories":[{"name":"docker/k8s知识体系","slug":"docker-k8s知识体系","permalink":"https://jxdw.github.io/categories/docker-k8s%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【go标准库系列】【转载】从java到go快速入门","slug":"from-java-to-go","date":"2017-03-22T04:28:01.000Z","updated":"2020-10-22T14:29:55.933Z","comments":true,"path":"2017/03/22/from-java-to-go/","link":"","permalink":"https://jxdw.github.io/2017/03/22/from-java-to-go/","excerpt":"原文地址https://www.flysnow.org/2016/12/28/from-java-to-golang.html","text":"原文地址https://www.flysnow.org/2016/12/28/from-java-to-golang.html 标记版","categories":[{"name":"go知识体系","slug":"go知识体系","permalink":"https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【centos使用系列】玩转centos7之ssh内网穿透","slug":"centos7_shh","date":"2017-03-15T11:11:16.000Z","updated":"2020-10-24T13:11:05.830Z","comments":true,"path":"2017/03/15/centos7_shh/","link":"","permalink":"https://jxdw.github.io/2017/03/15/centos7_shh/","excerpt":"ssh命令作用一般是用于登录操作。但是输入ssh然后回车，会发现：从command可以看出，ssh不局限于登录，还可以做隧道。","text":"ssh命令作用一般是用于登录操作。但是输入ssh然后回车，会发现：从command可以看出，ssh不局限于登录，还可以做隧道。 ssh做隧道进行内网穿透下面这个截图详细解析了常见的参数。","categories":[{"name":"centos知识体系","slug":"centos知识体系","permalink":"https://jxdw.github.io/categories/centos%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【mysql使用系列】docker1.10安装mysql5.6主从","slug":"docker-mysql-master-slave","date":"2017-03-13T06:42:36.000Z","updated":"2020-10-22T14:35:48.438Z","comments":true,"path":"2017/03/13/docker-mysql-master-slave/","link":"","permalink":"https://jxdw.github.io/2017/03/13/docker-mysql-master-slave/","excerpt":"本文可用于测试环境，正式环境，主从还是需要部署在不同的节点上。 安装过程建数据存储目录mkdir mysql_master&#x2F;mkdir mysql_slave&#x2F;chown -R mysql:mysql mysql_master&#x2F;chown -R mysql:mysql mysql_slave&#x2F;","text":"本文可用于测试环境，正式环境，主从还是需要部署在不同的节点上。 安装过程建数据存储目录mkdir mysql_master&#x2F;mkdir mysql_slave&#x2F;chown -R mysql:mysql mysql_master&#x2F;chown -R mysql:mysql mysql_slave&#x2F; 准备my.cnf配置文件mysql主配置文件# Copyright (c) 2014, Oracle and&#x2F;or its affiliates. All rights reserved.## This program is free software; you can redistribute it and&#x2F;or modify# it under the terms of the GNU General Public License as published by# the Free Software Foundation; version 2 of the License.## This program is distributed in the hope that it will be useful,# but WITHOUT ANY WARRANTY; without even the implied warranty of# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the# GNU General Public License for more details.## You should have received a copy of the GNU General Public License# along with this program; if not, write to the Free Software# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA## The MySQL Community Server configuration file.## For explanations see# http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;mysql&#x2F;en&#x2F;server-system-variables.html[client]port &#x3D; 3306socket &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock[mysqld_safe]pid-file &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pidsocket &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.socknice &#x3D; 0[mysqld]user &#x3D; mysqlpid-file &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pidsocket &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sockport &#x3D; 3306basedir &#x3D; &#x2F;usrdatadir &#x3D; &#x2F;var&#x2F;lib&#x2F;mysqltmpdir &#x3D; &#x2F;tmplc-messages-dir &#x3D; &#x2F;usr&#x2F;share&#x2F;mysqlexplicit_defaults_for_timestamplog-bin &#x3D; mysql-bin server-id &#x3D; 1 # Instead of skip-networking the default is now to listen only on# localhost which is more compatible and is not less secure.#bind-address &#x3D; 127.0.0.1#log-error &#x3D; &#x2F;var&#x2F;log&#x2F;mysql&#x2F;error.log# Recommended in standard MySQL setupsql_mode&#x3D;NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links&#x3D;0# * IMPORTANT: Additional settings that can override those from this file!# The files must end with &#39;.cnf&#39;, otherwise they&#39;ll be ignored.#!includedir &#x2F;etc&#x2F;mysql&#x2F;conf.d&#x2F; mysql从配置文件# Copyright (c) 2014, Oracle and&#x2F;or its affiliates. All rights reserved.## This program is free software; you can redistribute it and&#x2F;or modify# it under the terms of the GNU General Public License as published by# the Free Software Foundation; version 2 of the License.## This program is distributed in the hope that it will be useful,# but WITHOUT ANY WARRANTY; without even the implied warranty of# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the# GNU General Public License for more details.## You should have received a copy of the GNU General Public License# along with this program; if not, write to the Free Software# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA## The MySQL Community Server configuration file.## For explanations see# http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;mysql&#x2F;en&#x2F;server-system-variables.html[client]port &#x3D; 3306socket &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock[mysqld_safe]pid-file &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pidsocket &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.socknice &#x3D; 0[mysqld]user &#x3D; mysqlpid-file &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pidsocket &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sockport &#x3D; 3306basedir &#x3D; &#x2F;usrdatadir &#x3D; &#x2F;var&#x2F;lib&#x2F;mysqltmpdir &#x3D; &#x2F;tmplc-messages-dir &#x3D; &#x2F;usr&#x2F;share&#x2F;mysqlexplicit_defaults_for_timestamplog-bin &#x3D; mysql-bin server-id &#x3D; 2 # Instead of skip-networking the default is now to listen only on# localhost which is more compatible and is not less secure.#bind-address &#x3D; 127.0.0.1#log-error &#x3D; &#x2F;var&#x2F;log&#x2F;mysql&#x2F;error.log# Recommended in standard MySQL setupsql_mode&#x3D;NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links&#x3D;0# * IMPORTANT: Additional settings that can override those from this file!# The files must end with &#39;.cnf&#39;, otherwise they&#39;ll be ignored.#!includedir &#x2F;etc&#x2F;mysql&#x2F;conf.d&#x2F; 启动mysql主从docker run -d -e MYSQL_ROOT_PASSWORD&#x3D;admin --add-host www.slave.com:10.2.1.31 --name mysql_master -v &#x2F;docker&#x2F;mysql_cluster&#x2F;master&#x2F;conf&#x2F;my.cnf:&#x2F;etc&#x2F;mysql&#x2F;my.cnf -v &#x2F;docker&#x2F;mysql_cluster&#x2F;master&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -p 3308:3306 mysql:5.6 docker run -d -e MYSQL_ROOT_PASSWORD&#x3D;admin --add-host www.master.com:10.2.1.31 --name mysql_slave -v &#x2F;docker&#x2F;mysql_cluster&#x2F;slave&#x2F;conf&#x2F;my.cnf:&#x2F;etc&#x2F;mysql&#x2F;my.cnf -v &#x2F;docker&#x2F;mysql_cluster&#x2F;slave&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -p 3309:3306 mysql:5.6 iptables防火墙放通权限iptables -I INPUT 1 -p tcp -m state --state NEW --dport 3308 -j ACCEPT 在mysql主服务上创建用户及授权CREATE USER &#39;rep01&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;; GRANT REPLICATION SLAVE ON *.* TO &#39;rep01&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;SHOW MASTER STATUS;#show variables like &#39;%server_uuid%&#39;; 在mysql从服务上创建用户及授权CREATE USER &#39;rep01&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;change master to master_heartbeat_period &#x3D; 10; CHANGE MASTER TO MASTER_HOST&#x3D;&#39;www.master.com&#39;, MASTER_PORT&#x3D;3308, MASTER_USER&#x3D;&#39;rep01&#39;, MASTER_PASSWORD&#x3D;&#39;123456&#39;, MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000004&#39;, MASTER_LOG_POS&#x3D;472;START SLAVE;show slave status; 验证效果在主服务上建立数据库/表，插入数据create database test_base;use test_base;CREATE TABLE &#96;test_base_bank&#96; ( &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT, &#96;create_time&#96; datetime DEFAULT NULL, &#96;modify_time&#96; datetime DEFAULT NULL, &#96;bank_code&#96; varchar(10) DEFAULT NULL COMMENT &#39;银行编码&#39;, &#96;bank_name&#96; varchar(30) DEFAULT NULL COMMENT &#39;银行名称&#39;, &#96;enable&#96; varchar(10) DEFAULT NULL COMMENT &#39;是否可用&#39;, &#96;single_payment_limit&#96; varchar(20) DEFAULT NULL COMMENT &#39;单笔限额【元】&#39;, &#96;day_payment_limit&#96; varchar(20) DEFAULT NULL COMMENT &#39;日累计限额【元】&#39;, &#96;month_payment_limit&#96; varchar(20) DEFAULT NULL COMMENT &#39;月累计限额【元】&#39;, &#96;bank_logo&#96; varchar(155) DEFAULT NULL COMMENT &#39;银行logo&#39;, PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;INSERT INTO &#96;test_base&#96;.&#96;test_base_bank&#96; (&#96;id&#96;, &#96;create_time&#96;, &#96;modify_time&#96;, &#96;bank_code&#96;, &#96;bank_name&#96;, &#96;enable&#96;, &#96;single_payment_limit&#96;, &#96;day_payment_limit&#96;, &#96;month_payment_limit&#96;, &#96;bank_logo&#96;) VALUES (&#39;2&#39;, &#39;2015-10-26 17:42:53&#39;, &#39;2015-11-10 22:39:37&#39;, &#39;ABC&#39;, &#39;中国农业银行&#39;, &#39;true&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;http:&#x2F;&#x2F;***&#x2F;images&#x2F;bank&#x2F;ABC_large.png&#39;); 查看从服务器上的数据","categories":[{"name":"mysql知识体系","slug":"mysql知识体系","permalink":"https://jxdw.github.io/categories/mysql%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【redis使用系列】docker1.10安装redis主从","slug":"redis-docker-master-slave","date":"2017-03-13T05:13:50.000Z","updated":"2020-10-22T14:34:39.351Z","comments":true,"path":"2017/03/13/redis-docker-master-slave/","link":"","permalink":"https://jxdw.github.io/2017/03/13/redis-docker-master-slave/","excerpt":"本文可用于测试环境。 redis主从的工作原理1.如果设置了一个Slave，无论是第一次连接还是重连到Master，它都会发出一个SYNC命令；2.当Master收到SYNC命令之后，会做两件事： a) Master执行BGSAVE：后台写数据到磁盘（rdb快照）； b) Master同时将新收到的写入和修改数据集的命令存入缓冲区（非查询类）；3.当Master在后台把数据保存到快照文件完成之后，Master会把这个快照文件传送给Slave，而Slave则把内存清空后，加载该文件到内存中；4.而Master也会把此前收集到缓冲区中的命令，通过Reids命令协议形式转发给Slave，Slave执行这些命令，实现和Master的同步；5.Master/Slave此后会不断通过异步方式进行命令的同步，达到最终数据的同步一致；6.需要注意的是Master和Slave之间一旦发生重连都会引发全量同步操作。但在2.8之后，也可能是部分同步操作。","text":"本文可用于测试环境。 redis主从的工作原理1.如果设置了一个Slave，无论是第一次连接还是重连到Master，它都会发出一个SYNC命令；2.当Master收到SYNC命令之后，会做两件事： a) Master执行BGSAVE：后台写数据到磁盘（rdb快照）； b) Master同时将新收到的写入和修改数据集的命令存入缓冲区（非查询类）；3.当Master在后台把数据保存到快照文件完成之后，Master会把这个快照文件传送给Slave，而Slave则把内存清空后，加载该文件到内存中；4.而Master也会把此前收集到缓冲区中的命令，通过Reids命令协议形式转发给Slave，Slave执行这些命令，实现和Master的同步；5.Master/Slave此后会不断通过异步方式进行命令的同步，达到最终数据的同步一致；6.需要注意的是Master和Slave之间一旦发生重连都会引发全量同步操作。但在2.8之后，也可能是部分同步操作。 安装redis创建配置文件目录mkdir -p /data/server/redis/conf 下载配置文件wget https://raw.githubusercontent.com/antirez/redis/3.0/redis.conf -O /data/server/redis/conf/redis.conf 修改配置文件cd /data/server/redis/confsed -i ‘s/# slaveof /slaveof redis-master 6379/g’ redis.conf 启动主从节点docker run --name redis-master -p 6379:6379 -d redisdocker run --link redis-master:redis-master -p 6380:6379 -v &#x2F;data&#x2F;server&#x2F;redis&#x2F;conf&#x2F;redis.conf:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf --name redis-slave1 -d redis redis-server &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.confdocker run --link redis-master:redis-master -p 6381:6379 -v &#x2F;data&#x2F;server&#x2F;redis&#x2F;conf&#x2F;redis.conf:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf --name redis-slave2 -d redis redis-server &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.confdocker run --link redis-master:redis-master -p 6382:6379 -v &#x2F;data&#x2F;server&#x2F;redis&#x2F;conf&#x2F;redis.conf:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf --name redis-slave3 -d redis redis-server &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf redis主从实验","categories":[{"name":"redis知识体系","slug":"redis知识体系","permalink":"https://jxdw.github.io/categories/redis%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"【nginx/haproxy使用系列】高可用软件之keepalived+Haproxy","slug":"common-ha-software-haproxy","date":"2017-03-10T03:27:58.000Z","updated":"2020-10-24T13:11:05.866Z","comments":true,"path":"2017/03/10/common-ha-software-haproxy/","link":"","permalink":"https://jxdw.github.io/2017/03/10/common-ha-software-haproxy/","excerpt":"资料https:&#x2F;&#x2F;blog.51cto.com&#x2F;kernal&#x2F;1433907 背景交代本文使用软件版本keepalived: v1.2.13haproxy: v1.5.18centos: centos6.3、centos7.3lightttpd: 1.4.52","text":"资料https:&#x2F;&#x2F;blog.51cto.com&#x2F;kernal&#x2F;1433907 背景交代本文使用软件版本keepalived: v1.2.13haproxy: v1.5.18centos: centos6.3、centos7.3lightttpd: 1.4.52 ip和部署规划192.168.128.50(主K)：centos6、keepalived、haproxy192.168.128.51(次K)：centos6、keepalived、haproxy192.168.128.85(real server1)：centos7、lighttpd192.168.128.97(real server2)：centos7、lighttpd 需要确保的事情安装软件并配置安装lighttpdyum install -y epel-release gcc gcc-c++ autoconf automake pcre-devel zip unzip libtool &amp;&amp; yum install -y lighttpd 配置lighttpd########################################################################### &#x2F;etc&#x2F;lighttpd&#x2F;lighttpd.conf#### check &#x2F;etc&#x2F;lighttpd&#x2F;conf.d&#x2F;*.conf for the configuration of modules.#################################################################################################################################################### Some Variable definition which will make chrooting easier.#### if you add a variable here. Add the corresponding variable in the## chroot example aswell.##var.log_root &#x3D; &quot;&#x2F;data&#x2F;lighttpd&#x2F;log&quot;var.server_root &#x3D; &quot;&#x2F;data&#x2F;lighttpd&#x2F;www&quot;var.state_dir &#x3D; &quot;&#x2F;var&#x2F;run&quot;var.home_dir &#x3D; &quot;&#x2F;data&#x2F;lighttpd&quot;var.conf_dir &#x3D; &quot;&#x2F;etc&#x2F;lighttpd&quot;#### run the server chrooted.#### This requires root permissions during startup.#### If you run Chrooted set the the variables to directories relative to## the chroot dir.#### example chroot configuration:###var.log_root &#x3D; &quot;&#x2F;logs&quot;#var.server_root &#x3D; &quot;&#x2F;&quot;#var.state_dir &#x3D; &quot;&#x2F;run&quot;#var.home_dir &#x3D; &quot;&#x2F;lib&#x2F;lighttpd&quot;#var.vhosts_dir &#x3D; &quot;&#x2F;vhosts&quot;#var.conf_dir &#x3D; &quot;&#x2F;etc&quot;##server.chroot &#x3D; &quot;&#x2F;srv&#x2F;www&quot;#### Some additional variables to make the configuration easier###### Base directory for all virtual hosts#### used in:## conf.d&#x2F;evhost.conf## conf.d&#x2F;simple_vhost.conf## vhosts.d&#x2F;vhosts.template##var.vhosts_dir &#x3D; server_root + &quot;&#x2F;vhosts&quot;#### Cache for mod_compress#### used in:## conf.d&#x2F;compress.conf##var.cache_dir &#x3D; &quot;&#x2F;data&#x2F;lighttpd&#x2F;cache&quot;#### Base directory for sockets.#### used in:## conf.d&#x2F;fastcgi.conf## conf.d&#x2F;scgi.conf##var.socket_dir &#x3D; state_dir + &quot;&#x2F;sockets&quot;#################################################################################################################################################### Load the modules.include &quot;modules.conf&quot;#################################################################################################################################################### Basic Configuration## ---------------------##server.port &#x3D; 28080#### Use IPv6?###server.use-ipv6 &#x3D; &quot;enable&quot;#### bind to a specific IP##server.bind &#x3D; &quot;192.168.128.97&quot;#### Run as a different username&#x2F;groupname.## This requires root permissions during startup.##server.username &#x3D; &quot;lighttpd&quot;server.groupname &#x3D; &quot;lighttpd&quot;#### enable core files.###server.core-files &#x3D; &quot;disable&quot;#### Document root##server.document-root &#x3D; server_root + &quot;&#x2F;lighttpd&quot;#### The value for the &quot;Server:&quot; response field.#### It would be nice to keep it at &quot;lighttpd&quot;.###server.tag &#x3D; &quot;lighttpd&quot;#### store a pid file##server.pid-file &#x3D; state_dir + &quot;&#x2F;lighttpd.pid&quot;#################################################################################################################################################### Logging Options## ------------------#### all logging options can be overwritten per vhost.#### Path to the error log file##server.errorlog &#x3D; log_root + &quot;&#x2F;error.log&quot;#### If you want to log to syslog you have to unset the## server.errorlog setting and uncomment the next line.###server.errorlog-use-syslog &#x3D; &quot;enable&quot;#### Access log config##include &quot;conf.d&#x2F;access_log.conf&quot;#### The debug options are moved into their own file.## see conf.d&#x2F;debug.conf for various options for request debugging.##include &quot;conf.d&#x2F;debug.conf&quot;#################################################################################################################################################### Tuning&#x2F;Performance## --------------------#### corresponding documentation:## https:&#x2F;&#x2F;redmine.lighttpd.net&#x2F;projects&#x2F;lighttpd&#x2F;wiki&#x2F;Docs_Performance#### set the event-handler (read the performance section in the manual)#### possible options on linux are:#### select## poll## linux-sysepoll#### linux-sysepoll is recommended on kernel 2.6.##server.event-handler &#x3D; &quot;linux-sysepoll&quot;#### The basic network interface for all platforms at the syscalls read()## and write(). Every modern OS provides its own syscall to help network## servers transfer files as fast as possible#### sendfile - is recommended for small files.## writev - is recommended for sending many large files##server.network-backend &#x3D; &quot;sendfile&quot;#### As lighttpd is a single-threaded server, its main resource limit is## the number of file descriptors, which is set to 1024 by default (on## most systems).#### If you are running a high-traffic site you might want to increase this## limit by setting server.max-fds.#### Changing this setting requires root permissions on startup. see## server.username&#x2F;server.groupname.#### By default lighttpd would not change the operation system default.## But setting it to 2048 is a better default for busy servers.#### With SELinux enabled, this is denied by default and needs to be allowed## by running the following once : setsebool -P httpd_setrlimit on#server.max-fds &#x3D; 2048#### listen-backlog is the size of the listen() backlog queue requested when## the lighttpd server ask the kernel to listen() on the provided network## address. Clients attempting to connect() to the server enter the listen()## backlog queue and wait for the lighttpd server to accept() the connection.#### The out-of-box default on many operating systems is 128 and is identified## as SOMAXCONN. This can be tuned on many operating systems. (On Linux,## cat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn) Requesting a size larger than operating## system limit will be silently reduced to the limit by the operating system.#### When there are too many connection attempts waiting for the server to## accept() new connections, the listen backlog queue fills and the kernel## rejects additional connection attempts. This can be useful as an## indication to an upstream load balancer that the server is busy, and## possibly overloaded. In that case, configure a smaller limit for## server.listen-backlog. On the other hand, configure a larger limit to be## able to handle bursts of new connections, but only do so up to an amount## that the server can keep up with responding in a reasonable amount of## time. Otherwise, clients may abandon the connection attempts and the## server will waste resources servicing abandoned connections.#### It is best to leave this setting at its default unless you have modelled## your traffic and tested that changing this benefits your traffic patterns.#### Default: 1024###server.listen-backlog &#x3D; 128#### Stat() call caching.#### lighttpd can utilize FAM&#x2F;Gamin to cache stat call.#### possible values are:## disable, simple or fam.##server.stat-cache-engine &#x3D; &quot;simple&quot;#### Fine tuning for the request handling#### max-connections &#x3D;&#x3D; max-fds&#x2F;2 (maybe &#x2F;3)## means the other file handles are used for fastcgi&#x2F;files##server.max-connections &#x3D; 1024#### How many seconds to keep a keep-alive connection open,## until we consider it idle.#### Default: 5###server.max-keep-alive-idle &#x3D; 5#### How many keep-alive requests until closing the connection.#### Default: 16###server.max-keep-alive-requests &#x3D; 16#### Maximum size of a request in kilobytes.## By default it is unlimited (0).#### Uploads to your server cant be larger than this value.###server.max-request-size &#x3D; 0#### Time to read from a socket before we consider it idle.#### Default: 60###server.max-read-idle &#x3D; 60#### Time to write to a socket before we consider it idle.#### Default: 360###server.max-write-idle &#x3D; 360#### Traffic Shaping## -----------------#### see &#x2F;usr&#x2F;share&#x2F;doc&#x2F;lighttpd&#x2F;traffic-shaping.txt#### Values are in kilobyte per second.#### Keep in mind that a limit below 32kB&#x2F;s might actually limit the## traffic to 32kB&#x2F;s. This is caused by the size of the TCP send## buffer.#### per server:###server.kbytes-per-second &#x3D; 128#### per connection:###connection.kbytes-per-second &#x3D; 32#################################################################################################################################################### Filename&#x2F;File handling## ------------------------#### files to check for if ...&#x2F; is requested## index-file.names &#x3D; ( &quot;index.php&quot;, &quot;index.rb&quot;, &quot;index.html&quot;,## &quot;index.htm&quot;, &quot;default.htm&quot; )##index-file.names +&#x3D; ( &quot;index.xhtml&quot;, &quot;index.html&quot;, &quot;index.htm&quot;, &quot;default.htm&quot;, &quot;index.php&quot;)#### deny access the file-extensions#### ~ is for backupfiles from vi, emacs, joe, ...## .inc is often used for code includes which should in general not be part## of the document-rooturl.access-deny &#x3D; ( &quot;~&quot;, &quot;.inc&quot; )#### disable range requests for pdf files## workaround for a bug in the Acrobat Reader plugin.##$HTTP[&quot;url&quot;] &#x3D;~ &quot;\\.pdf$&quot; &#123; server.range-requests &#x3D; &quot;disable&quot;&#125;#### url handling modules (rewrite, redirect)###url.rewrite &#x3D; ( &quot;^&#x2F;$&quot; &#x3D;&gt; &quot;&#x2F;server-status&quot; )#url.redirect &#x3D; ( &quot;^&#x2F;wishlist&#x2F;(.+)&quot; &#x3D;&gt; &quot;http:&#x2F;&#x2F;www.example.com&#x2F;$1&quot; )#### both rewrite&#x2F;redirect support back reference to regex conditional using %n###$HTTP[&quot;host&quot;] &#x3D;~ &quot;^www\\.(.*)&quot; &#123;# url.redirect &#x3D; ( &quot;^&#x2F;(.*)&quot; &#x3D;&gt; &quot;http:&#x2F;&#x2F;%1&#x2F;$1&quot; )#&#125;#### which extensions should not be handle via static-file transfer#### .php, .pl, .fcgi are most often handled by mod_fastcgi or mod_cgi##static-file.exclude-extensions &#x3D; ( &quot;.php&quot;, &quot;.pl&quot;, &quot;.fcgi&quot;, &quot;.scgi&quot; )#### error-handler for all status 400-599###server.error-handler &#x3D; &quot;&#x2F;error-handler.html&quot;#server.error-handler &#x3D; &quot;&#x2F;error-handler.php&quot;#### error-handler for status 404###server.error-handler-404 &#x3D; &quot;&#x2F;error-handler.html&quot;#server.error-handler-404 &#x3D; &quot;&#x2F;error-handler.php&quot;#### Format: &lt;errorfile-prefix&gt;&lt;status-code&gt;.html## -&gt; ....&#x2F;status-404.html for &#39;File not found&#39;###server.errorfile-prefix &#x3D; &quot;&#x2F;srv&#x2F;www&#x2F;htdocs&#x2F;errors&#x2F;status-&quot;#### mimetype mapping##include &quot;conf.d&#x2F;mime.conf&quot;#### directory listing configuration##include &quot;conf.d&#x2F;dirlisting.conf&quot;#### Should lighttpd follow symlinks?##server.follow-symlink &#x3D; &quot;enable&quot;#### force all filenames to be lowercase?###server.force-lowercase-filenames &#x3D; &quot;disable&quot;#### defaults to &#x2F;var&#x2F;tmp as we assume it is a local harddisk##server.upload-dirs &#x3D; ( &quot;&#x2F;var&#x2F;tmp&quot; )#################################################################################################################################################### SSL Support## -------------#### To enable SSL for the whole server you have to provide a valid## certificate and have to enable the SSL engine.::#### ssl.engine &#x3D; &quot;enable&quot;## ssl.pemfile &#x3D; &quot;&#x2F;path&#x2F;to&#x2F;server.pem&quot;#### The HTTPS protocol does not allow you to use name-based virtual## hosting with SSL. If you want to run multiple SSL servers with## one lighttpd instance you must use IP-based virtual hosting: ::#### Mitigate CVE-2009-3555 by disabling client triggered renegotation## This is enabled by default.#### IMPORTANT: this setting can only be used in the global scope.## It does *not* work inside conditionals### ssl.disable-client-renegotiation &#x3D; &quot;enable&quot;#### $SERVER[&quot;socket&quot;] &#x3D;&#x3D; &quot;10.0.0.1:443&quot; &#123;## ssl.engine &#x3D; &quot;enable&quot;## ssl.pemfile &#x3D; &quot;&#x2F;etc&#x2F;ssl&#x2F;private&#x2F;www.example.com.pem&quot;## ### # (Following SSL&#x2F;TLS Deployment Best Practices 1.3 &#x2F; 17 September 2013 from:## # https:&#x2F;&#x2F;www.ssllabs.com&#x2F;projects&#x2F;best-practices&#x2F;index.html)## # - BEAST is considered mitigaed on client side now, and new weaknesses have been found in RC4,## # so it is strongly advised to disable RC4 ciphers (HIGH doesn&#39;t include RC4)## # - It is recommended to disable 3DES too (although disabling RC4 and 3DES breaks IE6+8 on Windows XP,## # so you might want to support 3DES for now - just remove the &#39;!3DES&#39; parts below).## # - The examples below prefer ciphersuites with &quot;Forward Secrecy&quot; (and ECDHE over DHE (alias EDH)), remove &#39;+kEDH +kRSA&#39;## # if you don&#39;t want that.## # - SRP and PSK are not supported anyway, excluding those (&#39;!kSRP !kPSK&#39;) just keeps the list smaller (easier to review)## # Check your cipher list with: openssl ciphers -v &#39;...&#39; (use single quotes as your shell won&#39;t like ! in double quotes)## ### # If you know you have RSA keys (standard), you can use:## ssl.cipher-list &#x3D; &quot;PROFILE&#x3D;SYSTEM&quot;## # The more generic version (without the restriction to RSA keys) is## # ssl.cipher-list &#x3D; &quot;HIGH !aNULL !3DES +kEDH +kRSA !kSRP !kPSK&quot;## ### # Make the server prefer the order of the server side cipher suite instead of the client suite.## # This option is enabled by default, but only used if ssl.cipher-list is set.## ### # ssl.honor-cipher-order &#x3D; &quot;enable&quot;## ### server.name &#x3D; &quot;www.example.com&quot;#### server.document-root &#x3D; &quot;&#x2F;srv&#x2F;www&#x2F;vhosts&#x2F;example.com&#x2F;www&#x2F;&quot;## &#125;#### If you have a .crt and a .key file, cat them together into a## single PEM file:## $ cat &#x2F;etc&#x2F;ssl&#x2F;private&#x2F;lighttpd.key &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;lighttpd.crt \\## &gt; &#x2F;etc&#x2F;ssl&#x2F;private&#x2F;lighttpd.pem###ssl.pemfile &#x3D; &quot;&#x2F;etc&#x2F;ssl&#x2F;private&#x2F;lighttpd.pem&quot;#### optionally pass the CA certificate here.#####ssl.ca-file &#x3D; &quot;&quot;#### and the CRL revocation list here.#####ssl.ca-crl-file &#x3D; &quot;&quot;#################################################################################################################################################### custom includes like vhosts.###include &quot;conf.d&#x2F;config.conf&quot;#include &quot;&#x2F;etc&#x2F;lighttpd&#x2F;vhosts.d&#x2F;*.conf&quot;#########################################################################","categories":[{"name":"nginx/haproxy知识系列","slug":"nginx-haproxy知识系列","permalink":"https://jxdw.github.io/categories/nginx-haproxy%E7%9F%A5%E8%AF%86%E7%B3%BB%E5%88%97/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【网络系列】【转载】docker容器的网络模式","slug":"docker-network-introduce","date":"2017-02-14T05:13:58.000Z","updated":"2020-10-24T13:11:05.968Z","comments":true,"path":"2017/02/14/docker-network-introduce/","link":"","permalink":"https://jxdw.github.io/2017/02/14/docker-network-introduce/","excerpt":"原文地址https://cizixs.com/2016/06/12/docker-network-modes-explained/","text":"原文地址https://cizixs.com/2016/06/12/docker-network-modes-explained/ 笔记版","categories":[{"name":"docker/k8s知识体系","slug":"docker-k8s知识体系","permalink":"https://jxdw.github.io/categories/docker-k8s%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【docker使用系列】docker1.10安装和初步使用","slug":"docker-1-10-install","date":"2017-02-05T01:54:55.000Z","updated":"2020-10-24T13:11:05.904Z","comments":true,"path":"2017/02/05/docker-1-10-install/","link":"","permalink":"https://jxdw.github.io/2017/02/05/docker-1-10-install/","excerpt":"本文背景背景经同事推荐，觉得docker对于我们这些centos菜鸟很不错（把安装步骤在dokcerfile写好了），建议学习一下。","text":"本文背景背景经同事推荐，觉得docker对于我们这些centos菜鸟很不错（把安装步骤在dokcerfile写好了），建议学习一下。 参考资料https:&#x2F;&#x2F;hub.docker.com (很重要，类似于官方文档)https:&#x2F;&#x2F;cr.console.aliyun.com&#x2F;cn-hangzhou&#x2F;mirrors (镜像加速器，在国内绕不过去的点)http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-engine&#x2F;yum&#x2F;repo&#x2F;main&#x2F;centos&#x2F;7&#x2F;Packages&#x2F; （各版本的安装包） 安装过程下载rpm文件yum install -y --nogpgcheck http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-engine&#x2F;yum&#x2F;repo&#x2F;main&#x2F;centos&#x2F;7&#x2F;Packages&#x2F;docker-engine-selinux-1.10.3-1.el7.centos.noarch.rpmyum install -y --nogpgcheck http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-engine&#x2F;yum&#x2F;repo&#x2F;main&#x2F;centos&#x2F;7&#x2F;Packages&#x2F;docker-engine-1.10.3-1.el7.centos.x86_64.rpm 配置文件因为是yum安装，所以，systemd会有一个文件来管理启动。通过查看docker.service文件，知道我们的配置文件目录在/etc/sysconfig/docker.修改数据目录（别放到/var/lib目录,磁盘分分钟会爆）和加速器 OPTIONS&#x3D;&#39;--graph&#x3D;&#x2F;docker&#x2F;dockbak&#x2F; --registry-mirror&#x3D;https:&#x2F;&#x2F;csokz3oi.mirror.aliyuncs.com&#39; 这里没有配置私有的镜像仓库地址（线上环境还是要配置仓库，比如打标签、push镜像用） 其他可能会出问题的地方其他可能会出现问题的地方，基本上都是在启动命令这一行。有问题，修改就好 ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;docker-current daemon \\ --exec-opt native.cgroupdriver&#x3D;systemd \\ $OPTIONS \\ $DOCKER_STORAGE_OPTIONS \\ $DOCKER_NETWORK_OPTIONS \\ $ADD_REGISTRY \\ $BLOCK_REGISTRY \\ $INSECURE_REGISTRY 启动命令systemctl daemon-reloadsystemctl restart docker.service docker实操可以见docker help命令和官网指南","categories":[{"name":"docker/k8s知识体系","slug":"docker-k8s知识体系","permalink":"https://jxdw.github.io/categories/docker-k8s%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【centos使用系列】玩转centos7之局域网文件传输","slug":"centos7-file-transfer","date":"2017-01-15T11:30:16.000Z","updated":"2020-10-24T13:11:05.748Z","comments":true,"path":"2017/01/15/centos7-file-transfer/","link":"","permalink":"https://jxdw.github.io/2017/01/15/centos7-file-transfer/","excerpt":"在局域网不同的服务器上互传文件，是很平常的事。不过一般分两种情况：知道目标机器的账号密码，不知道目标机器的账号/密码。","text":"在局域网不同的服务器上互传文件，是很平常的事。不过一般分两种情况：知道目标机器的账号密码，不知道目标机器的账号/密码。 知道目标机器的账号密码的情况下这种场景下，一般用scp。 scp 文件名 账号@ip:&#x2F;目录。 不知道目标机器的账号/密码的情况nc安装这种场景下，只能安装nc。(netcat) yum install nmap-ncat nc用法目标机器: nc -l 端口 &gt; 文件名 源机器: nc 目标机器ip 目标机器端口 &lt; 文件名 更多用法参考:","categories":[{"name":"centos知识体系","slug":"centos知识体系","permalink":"https://jxdw.github.io/categories/centos%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【centos使用系列】玩转centos7之格盘和挂载","slug":"centos7-disk-ops","date":"2017-01-15T11:11:16.000Z","updated":"2020-10-24T13:11:05.742Z","comments":true,"path":"2017/01/15/centos7-disk-ops/","link":"","permalink":"https://jxdw.github.io/2017/01/15/centos7-disk-ops/","excerpt":"运维同事在虚拟物理机成虚拟机时，一般会有个系统盘(一般就50G)，然后会分配一个数据盘（大小依据业务决定），挂在/data目录下。如果系统盘和数据盘放在一个文件里面，移动的时候，会有大坑。","text":"运维同事在虚拟物理机成虚拟机时，一般会有个系统盘(一般就50G)，然后会分配一个数据盘（大小依据业务决定），挂在/data目录下。如果系统盘和数据盘放在一个文件里面，移动的时候，会有大坑。 问题來了重启之后，挂载丢失了。 解决之道格盘 查询uuid 挂载磁盘 修改/etc/fstab 最终效果","categories":[{"name":"centos知识体系","slug":"centos知识体系","permalink":"https://jxdw.github.io/categories/centos%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【centos使用系列】玩转centos7之目录解读","slug":"centos7-directory-introduce","date":"2017-01-14T11:11:16.000Z","updated":"2020-10-24T13:11:05.727Z","comments":true,"path":"2017/01/14/centos7-directory-introduce/","link":"","permalink":"https://jxdw.github.io/2017/01/14/centos7-directory-introduce/","excerpt":"安装下载iso文件，然后在vmware里面进行安装。安装完centos7之后，目录结构如下：","text":"安装下载iso文件，然后在vmware里面进行安装。安装完centos7之后，目录结构如下： 目录介绍下面解释下各个目录的作用。 根目录/每一个文件和目录从根目录开始。只有root用户具有该目录下的写权限。请注意，/root是root用户的主目录，这与/.不一样 /boot目录引导加载程序文件目录，包含引导加载程序相关的文件、内核的initrd、vmlinux、grub文件。例如：initramfs-3.10.0-514.el7.x86_64.img。 /bin是一个软链。主要存放：用户二进制文件。包含二进制可执行文件。在单用户模式下，你需要使用的常见Linux命令都位于此目录下。系统的所有用户使用的命令都设在这里。例如：ps、ls、ping、grep、cp /sbin目录是一个软链。主要存放：系统二进制文件就像/bin，/sbin同样也包含二进制可执行文件。但是，在这个目录下的linux命令通常由系统管理员使用，对系统进行维护。例如：iptables、reboot、fdisk、ifconfig、swapon命令 /etc目录主要存放：程序的配置文件(很重要的一个目录)包含所有程序所需的配置文件。也包含了用于启动/停止单个程序的启动和关闭shell脚本。例如： &#x2F;etc&#x2F;resolv.conf # dns服务器配置文件&#x2F;etc&#x2F;logrotate.conf # 日志管理工具的配置文件&#x2F;etc&#x2F;sshd&#x2F;sshd_config #sshd服务的配置文件&#x2F;etc&#x2F;my.cnf # mysql服务器的配置文件 /dev目录主要存放:设备文件。包含设备文件。这些包括终端设备、USB或连接到系统的任何设备。例如：/dev/tty1、/dev/usbmon0 /proc主要存放:进程信息。包含系统进程的相关信息。这是一个虚拟的文件系统，例如：这是一个虚拟的文件系统，系统资源以文本信息形式存在。包含有关正在运行的进程的信息。例如： &#x2F;proc&#x2F;uptime # 系统的运行时间&#x2F;proc&#x2F;&#123;pid&#125; # 目录中存放包含的与特定pid相关的信息。&#x2F;proc&#x2F;sys # 很重要的一个目录。目录中存放与系统相关的一些信息:内核、网络、设备、调试信息等等 表示与给定IP地址所能建立的TCP连接的端口数限制。 /var目录var代表变量文件(很重要的一个目录)。这个目录下可以找到内容可能增长的文件。这包括: 系统日志文件（&#x2F;var&#x2F;log）;包和数据库文件（&#x2F;var&#x2F;lib）;电子邮件（&#x2F;var&#x2F;mail）;打印队列（&#x2F;var&#x2F;spool）;锁文件（&#x2F;var&#x2F;lock）;多次重新启动需要的临时文件（&#x2F;var&#x2F;tmp）; 系统盘空间不够用，一般是因为程序的一些日志文件配置到这个目录下。 /tmp临时文件。包含系统和用户创建的临时文件。当系统重新启动时，这个目录下的文件都将被删除。 /usr用户程序 。包含二进制文件、库文件、文档和二级程序的源代码。 &#x2F;usr&#x2F;bin中包含用户程序的二进制文件。如果你在&#x2F;bin中找不到用户二进制文件，到&#x2F;usr&#x2F;bin目录看看。例如：at、awk、cc、less、scp。&#x2F;usr&#x2F;sbin中包含系统管理员的二进制文件。如果你在&#x2F;sbin中找不到系统二进制文件，到&#x2F;usr&#x2F;sbin目录看看。例如：atd、cron、sshd、useradd、userdel。&#x2F;usr&#x2F;lib中包含了&#x2F;usr&#x2F;bin和&#x2F;usr&#x2F;sbin用到的库。&#x2F;usr&#x2F;local中包含了从源安装的用户程序。例如，当你从源安装Apache，它会在&#x2F;usr&#x2F;local&#x2F;apache2中。 /home目录HOME目录。所有用户用home目录来存储他们的个人档案。例如：/home/john、/home/nikita /lib目录系统库，软链。包含支持位于/bin和/sbin下的二进制文件的库文件.库文件名为 ld或lib.so.*例如：ld-2.11.1.so，libncurses.so.5.7 /opt目录opt代表可选的、可选的附加应用程序。包含从个别厂商的附加应用程序。附加应用程序应该安装在/opt/或者/opt/的子目录下。 /mnt目录挂载目录。临时安装目录，系统管理员可以挂载文件系统。 /media目录用于挂载可移动设备的临时目录。举例来说，挂载CD-ROM的/media/cdrom，挂载软盘驱动器的/media/floppy; /srv目录服务数据目录，包含服务器特定服务相关的数据。例如，/srv/cvs包含cvs相关的数据。 总结其实，上面这只是系统盘目录，一般运维同事，在创建系统的时候，就给了50G。业务应用程序或者安装耗磁盘空间的程序，是不会放在上述目录的。如果安在上述目录，则每天都要清理磁盘空间，得累死。所以，除了运维同事在创建系统盘的同事，会再挂一块数据盘。一般以/data起头，供程序存放。","categories":[{"name":"centos知识体系","slug":"centos知识体系","permalink":"https://jxdw.github.io/categories/centos%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"}]},{"title":"【java框架系列】mybatis-spring-boot-starter使用","slug":"java-spring-boot-1x-mybatis-starter-example","date":"2016-12-28T13:52:03.000Z","updated":"2020-10-22T14:23:46.025Z","comments":true,"path":"2016/12/28/java-spring-boot-1x-mybatis-starter-example/","link":"","permalink":"https://jxdw.github.io/2016/12/28/java-spring-boot-1x-mybatis-starter-example/","excerpt":"本文参考资料http:&#x2F;&#x2F;www.ityouknow.com&#x2F;springboot&#x2F;2016&#x2F;11&#x2F;25&#x2F;spring-boot-multi-mybatis.html","text":"本文参考资料http:&#x2F;&#x2F;www.ityouknow.com&#x2F;springboot&#x2F;2016&#x2F;11&#x2F;25&#x2F;spring-boot-multi-mybatis.html","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【java框架系列】spring boot amqp","slug":"java-spring-boot-1x-boot-amqp","date":"2016-12-20T13:50:39.000Z","updated":"2020-10-22T14:23:09.343Z","comments":true,"path":"2016/12/20/java-spring-boot-1x-boot-amqp/","link":"","permalink":"https://jxdw.github.io/2016/12/20/java-spring-boot-1x-boot-amqp/","excerpt":"关于spring boot 1.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring data redis client、spring web service，进而集大成。Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client、eureka client。","text":"关于spring boot 1.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring data redis client、spring web service，进而集大成。Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client、eureka client。","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【java框架系列】spring webmvc","slug":"java-spring-boot-1x-boot-webmvc","date":"2016-12-13T13:52:03.000Z","updated":"2020-10-22T14:23:40.824Z","comments":true,"path":"2016/12/13/java-spring-boot-1x-boot-webmvc/","link":"","permalink":"https://jxdw.github.io/2016/12/13/java-spring-boot-1x-boot-webmvc/","excerpt":"关于spring boot 1.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring data redis client、spring web service，进而集大成。Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client、eureka client。","text":"关于spring boot 1.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring data redis client、spring web service，进而集大成。Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client、eureka client。","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【java框架系列】spring-boot-data-redis","slug":"java-spring-boot-1x-boot-data-redis","date":"2016-12-06T09:14:49.000Z","updated":"2020-10-22T14:23:25.212Z","comments":true,"path":"2016/12/06/java-spring-boot-1x-boot-data-redis/","link":"","permalink":"https://jxdw.github.io/2016/12/06/java-spring-boot-1x-boot-data-redis/","excerpt":"概述https:&#x2F;&#x2F;docs.spring.io&#x2F;spring-data&#x2F;redis&#x2F;docs&#x2F;1.8.9.RELEASE&#x2F;reference&#x2F;html&#x2F;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;EasonJim&#x2F;p&#x2F;7805665.html PS:如果能看懂英文版的官方文档，就不建议继续往下阅读浪费时间，谢谢。","text":"概述https:&#x2F;&#x2F;docs.spring.io&#x2F;spring-data&#x2F;redis&#x2F;docs&#x2F;1.8.9.RELEASE&#x2F;reference&#x2F;html&#x2F;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;EasonJim&#x2F;p&#x2F;7805665.html PS:如果能看懂英文版的官方文档，就不建议继续往下阅读浪费时间，谢谢。 关于spring boot/cloud 1.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring data redis client、spring web service，进而集大成。Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client、eureka client。","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【java框架系列】spring boot核心类和扩展点(web)","slug":"java-spring-boot-1x-boot-core-2","date":"2016-10-22T12:46:32.000Z","updated":"2020-10-22T14:23:04.629Z","comments":true,"path":"2016/10/22/java-spring-boot-1x-boot-core-2/","link":"","permalink":"https://jxdw.github.io/2016/10/22/java-spring-boot-1x-boot-core-2/","excerpt":"springboot1.5.x web程序的核心类和扩展点关于spring boot/cloud 1.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring data redis client、spring web service，进而集大成。Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client、eureka client。","text":"springboot1.5.x web程序的核心类和扩展点关于spring boot/cloud 1.X系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring data redis client、spring web service，进而集大成。Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client、eureka client。 web核心类和扩展点 附录","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【java框架系列】spring boot核心类和扩展点","slug":"java-spring-boot-1x-boot-core","date":"2016-10-22T12:46:32.000Z","updated":"2020-10-22T14:23:16.199Z","comments":true,"path":"2016/10/22/java-spring-boot-1x-boot-core/","link":"","permalink":"https://jxdw.github.io/2016/10/22/java-spring-boot-1x-boot-core/","excerpt":"概述本文参考资料官方blog: https:&#x2F;&#x2F;spring.io&#x2F;blog&#x2F;2017&#x2F;10&#x2F;17&#x2F;spring-boot-1-5-8-available-now官方文档: https:&#x2F;&#x2F;docs.spring.io&#x2F;spring-boot&#x2F;docs&#x2F;1.5.8.RELEASE&#x2F;reference&#x2F;pdf&#x2F;spring-boot-reference.pdf","text":"概述本文参考资料官方blog: https:&#x2F;&#x2F;spring.io&#x2F;blog&#x2F;2017&#x2F;10&#x2F;17&#x2F;spring-boot-1-5-8-available-now官方文档: https:&#x2F;&#x2F;docs.spring.io&#x2F;spring-boot&#x2F;docs&#x2F;1.5.8.RELEASE&#x2F;reference&#x2F;pdf&#x2F;spring-boot-reference.pdf 温馨提示如果能看到英文版的官方文档，就不建议继续往下阅读浪费时间，谢谢。 本文背景从2016年接触，2017年全面升级到spring boot，差不多也有一段时间了。spring boot也升级了多个版本。 关于spring boot系列spring.io在spring boot和springcloud推出之前，开源了很多的框架（见下文附录），但是除了spring framework自身，影响力都不够。直到spring boot、spring cloud系列框架推出，才成了spring框架的扩展中最有影响力的两个(或者说集大成者)。Spring Boot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通俗点理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了很多的jar包，比如散落在各处的spring框架：spring amqp、spring data redis client、spring web service，进而集大成。Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态。从技术实现上来说，也是集成开源届的各种方案比如 client、rabbitmq client、eureka client。 springboot1.5.x（非web）的核心类写一个非web的demo程序，并调试下程序，得出如下一张图(一图胜千言)。总结起来就两条主线: springapplication构造函数springboot构造函数，有扩展点：applicationListener、applicationContextinitializer。Application启动运行过程中各种事件的监听器，如SpringApplicationEvent、ApplicationContextEvent、Environment相关Event等诸多事件。很多非官方的框架都是基于这两个扩展点做的开发。 springapplication.runrun第一步(实例化和初始化bean)这一步有扩展点：initializingbean、BeanPostProcessor、 run第二步(触发监听)springapplication构造函数初始化的applicationlistener、applicationContextinitializer有活干了。 run第三步(自动装配)这一步有扩展点：EnableAutoConfiguration springboot 扩展点initializingbean可以在bean初始化完成，所有属性设置完成后执行特定逻辑，例如对自动装配对属性进行验证等等,将mysql的数据导入到redis中。 BeanFactoryPostProcessor是beanFactory后置处理器，支持在bean factory标准初始化完成后，对bean factory进行一些额外处理。在讲context初始化流程时介绍过，这时所有的bean的描述信息已经加载完毕，但是还没有进行bean初始化。 BeanPostProcessor提供了在bean初始化之前和之后插入自定义逻辑的能力。与BeanFactoryPostProcessor的区别是处理的对象不同，BeanFactoryPostProcessor是对beanfactory进行处理，BeanPostProcessor是对bean进行处理。 扩展点applicationListener很重要的一个扩展点。监听各种事件扩展这个类，可以关闭banner的打印。 applicationContextinitializer这个类一般做业务开发时，很少有场景会用到。 EnableAutoConfiguration启用自动配置，加载所有的spring.factories配置文件的配置类。 附录","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【java框架系列】spring boot 1.4.0体验","slug":"spring_boot_1.4.0_exprience","date":"2016-07-30T09:13:39.000Z","updated":"2020-10-22T14:25:51.810Z","comments":true,"path":"2016/07/30/spring_boot_1.4.0_exprience/","link":"","permalink":"https://jxdw.github.io/2016/07/30/spring_boot_1.4.0_exprience/","excerpt":"本文参考资料https:&#x2F;&#x2F;docs.spring.io&#x2F;spring&#x2F;docs&#x2F;4.3.0.RELEASE&#x2F;spring-framework-reference&#x2F;htmlsingle&#x2F;https:&#x2F;&#x2F;docs.spring.io&#x2F;spring&#x2F;docs&#x2F;4.3.0.RELEASE&#x2F;spring-framework-reference&#x2F;htmlsingle&#x2F;#mvc-ann-methodshttps:&#x2F;&#x2F;github.com&#x2F;spring-projects&#x2F;spring-boot&#x2F;wiki&#x2F;Spring-Boot-1.4-Release-Noteshttps:&#x2F;&#x2F;docs.spring.io&#x2F;spring-boot&#x2F;docs&#x2F;1.4.0.RELEASE&#x2F;reference&#x2F;htmlsingle&#x2F;","text":"本文参考资料https:&#x2F;&#x2F;docs.spring.io&#x2F;spring&#x2F;docs&#x2F;4.3.0.RELEASE&#x2F;spring-framework-reference&#x2F;htmlsingle&#x2F;https:&#x2F;&#x2F;docs.spring.io&#x2F;spring&#x2F;docs&#x2F;4.3.0.RELEASE&#x2F;spring-framework-reference&#x2F;htmlsingle&#x2F;#mvc-ann-methodshttps:&#x2F;&#x2F;github.com&#x2F;spring-projects&#x2F;spring-boot&#x2F;wiki&#x2F;Spring-Boot-1.4-Release-Noteshttps:&#x2F;&#x2F;docs.spring.io&#x2F;spring-boot&#x2F;docs&#x2F;1.4.0.RELEASE&#x2F;reference&#x2F;htmlsingle&#x2F;","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【java标准库系列】如何停止一个正在运行的线程","slug":"java_how_to_stop_a_running_thread","date":"2016-03-12T14:09:24.000Z","updated":"2020-10-22T14:24:35.741Z","comments":true,"path":"2016/03/12/java_how_to_stop_a_running_thread/","link":"","permalink":"https://jxdw.github.io/2016/03/12/java_how_to_stop_a_running_thread/","excerpt":"","text":"public class MyThread extends Thread &#123; public void run()&#123; while (true)&#123; if(this.isInterrupted())&#123; System.out.println(&quot;线程被停止了！&quot;); return; &#125; System.out.println(&quot;Time: &quot; + System.currentTimeMillis()); &#125; &#125;&#125;public class Run &#123; public static void main(String args[]) throws InterruptedException &#123; Thread thread &#x3D; new MyThread(); thread.start(); Thread.sleep(2000); thread.interrupt(); &#125;&#125;","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【java标准库系列】java两个线程交替运行","slug":"java-two-thread-jiaoti-run","date":"2016-03-04T13:07:23.000Z","updated":"2020-10-22T14:24:15.137Z","comments":true,"path":"2016/03/04/java-two-thread-jiaoti-run/","link":"","permalink":"https://jxdw.github.io/2016/03/04/java-two-thread-jiaoti-run/","excerpt":"理论void notifyAll():解除所有那些在该对象上调用wait方法的线程的阻塞状态。该方法只能在同步方法或同步块内部调用。如果当前线程不是锁的持有者，该方法抛出一个IllegalMonitorStateException异常。void notify():随机选择一个在该对象上调用wait方法的线程，解除其阻塞状态。该方法只能在同步方法或同步块内部调用。如果当前线程不是锁的持有者，该方法抛出一个IllegalMonitorStateException异常。void wait():导致线程进入等待状态，直到它被其他线程通过notify()或者notifyAll唤醒。该方法只能在同步方法中调用。如果当前线程不是锁的持有者，该方法抛出一个IllegalMonitorStateException异常。","text":"理论void notifyAll():解除所有那些在该对象上调用wait方法的线程的阻塞状态。该方法只能在同步方法或同步块内部调用。如果当前线程不是锁的持有者，该方法抛出一个IllegalMonitorStateException异常。void notify():随机选择一个在该对象上调用wait方法的线程，解除其阻塞状态。该方法只能在同步方法或同步块内部调用。如果当前线程不是锁的持有者，该方法抛出一个IllegalMonitorStateException异常。void wait():导致线程进入等待状态，直到它被其他线程通过notify()或者notifyAll唤醒。该方法只能在同步方法中调用。如果当前线程不是锁的持有者，该方法抛出一个IllegalMonitorStateException异常。 源码public class App &#123; private static int count&#x3D;1; private final Object lock&#x3D;new Object(); public static void main( String[] args ) throws InterruptedException &#123; App app&#x3D;new App(); app.test(); &#125; public void test() throws InterruptedException &#123; new Thread(new TuringRunner(),&quot;jishu&quot;).start(); Thread.sleep(1L); new Thread(new TuringRunner(),&quot;oushu&quot;).start(); &#125; private class TuringRunner implements Runnable&#123; @Override public void run() &#123; while(count&lt;&#x3D;100)&#123; synchronized (lock)&#123; System.out.println(Thread.currentThread().getName()+&quot;:&quot;+count++); lock.notifyAll(); try&#123; if (count&lt;&#x3D;100)&#123; lock.wait(); &#125; &#125;catch (InterruptedException interruptedException)&#123; System.out.println(interruptedException); &#125; &#125; &#125; &#125; &#125;&#125;","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【转载】jvm的加载与java程序的运行原理","slug":"java-vmloader-and-application-run","date":"2016-01-28T11:41:34.000Z","updated":"2020-10-22T14:24:08.491Z","comments":true,"path":"2016/01/28/java-vmloader-and-application-run/","link":"","permalink":"https://jxdw.github.io/2016/01/28/java-vmloader-and-application-run/","excerpt":"参考https:&#x2F;&#x2F;blog.csdn.net&#x2F;on_1y&#x2F;article&#x2F;details&#x2F;38761549http:&#x2F;&#x2F;hg.openjdk.java.net&#x2F;jdk7u&#x2F;jdk7u&#x2F;hotspot&#x2F;file&#x2F;78dcbf58e349&#x2F;","text":"参考https:&#x2F;&#x2F;blog.csdn.net&#x2F;on_1y&#x2F;article&#x2F;details&#x2F;38761549http:&#x2F;&#x2F;hg.openjdk.java.net&#x2F;jdk7u&#x2F;jdk7u&#x2F;hotspot&#x2F;file&#x2F;78dcbf58e349&#x2F; 批注版","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【java标准库系列】重学设计模式","slug":"java-relearn-designpattern","date":"2016-01-04T13:07:23.000Z","updated":"2020-10-22T14:22:46.844Z","comments":true,"path":"2016/01/04/java-relearn-designpattern/","link":"","permalink":"https://jxdw.github.io/2016/01/04/java-relearn-designpattern/","excerpt":"设计模式简介设计模式分为三种类型，共23种： 创建型模式 单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。 结构型模式 适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。 行为型模式 模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式(责任链模式)、访问者模式。","text":"设计模式简介设计模式分为三种类型，共23种： 创建型模式 单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。 结构型模式 适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。 行为型模式 模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式(责任链模式)、访问者模式。 创建型模式工厂方法模式抽象产品类: public abstract class Product &#123; public void method1()&#123; &#125;;&#125; 具体产品类1： package com.jxdw.abstractfactory;public class ConcreteProduct1 extends Product &#123;public void method2()&#123; System.out.println(&quot;-------------------ConcreteProduct1 method2----------------&quot;);&#125;&#125; 具体产品类2： package com.jxdw.abstractfactory;public class ConcreteProduct2 extends Product &#123; public void method2()&#123; System.out.println(&quot;ConcreteProduct2 method2&quot;); &#125;&#125; 抽象工厂类: package com.jxdw.abstractfactory;public abstract class Creator &#123; public abstract &lt;T extends Product&gt; T creator(Class&lt;T&gt; c);&#125; 具体工厂类: package com.jxdw.abstractfactory;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;public class ConcreteCreator extends Creator &#123; @Override public &lt;T extends Product&gt; T creator(Class&lt;T&gt; c) &#123; Product product&#x3D;null; try &#123; product&#x3D;(Product) Class.forName(c.getName()).newInstance(); Method method&#x3D;c.getMethod(&quot;method2&quot;,null); method.invoke(product,null); &#125; catch (InstantiationException e) &#123; e.printStackTrace(); &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; catch (NoSuchMethodException e) &#123; e.printStackTrace(); &#125; catch (InvocationTargetException e) &#123; e.printStackTrace(); &#125; return (T)product; &#125;&#125; 测试类: package com.jxdw.abstractfactory;public class Client &#123; public static void main(String[] args)&#123; Creator creator&#x3D;new ConcreteCreator(); Product product&#x3D;creator.creator(ConcreteProduct1.class); &#x2F;&#x2F;((ConcreteProduct1) product).method2(); &#125;&#125; 结构型模式代理模式接口： package com.jxdw.Proxy;public interface IGamePlayer &#123; public void login(String username,String password); public void killBoss(); public void upgrade();&#125; 具体类： package com.jxdw.Proxy;public class GamePlayer implements IGamePlayer &#123; private String name&#x3D;&quot;&quot;; public GamePlayer(String name) &#123; this.name &#x3D; name; &#125; @Override public void login(String username, String password) &#123; System.out.println(&quot;login username: &quot;+username+&quot;,password: &quot;+password); &#125; @Override public void killBoss() &#123; System.out.println(&quot;kill boss&quot;); &#125; @Override public void upgrade() &#123; System.out.println(&quot;upgrade game&quot;); &#125;&#125; 代理类 package com.jxdw.Proxy;public class GamePlayerProxy &#123; private IGamePlayer iGamePlayer; public GamePlayerProxy(IGamePlayer iGamePlayer) &#123; this.iGamePlayer &#x3D; iGamePlayer; &#125; public void killBoss()&#123; this.iGamePlayer.killBoss(); &#125; public void upgrade()&#123; this.iGamePlayer.upgrade(); &#125; public void login(String username,String password)&#123; this.iGamePlayer.login(username,password); &#125;&#125; 测试类： package com.jxdw.Proxy;public class Client &#123; public static void main(String[] args) &#123; IGamePlayer gamePlayer&#x3D;new GamePlayer(&quot;zhangsan&quot;); GamePlayerProxy gamePlayerProxy&#x3D;new GamePlayerProxy(gamePlayer); gamePlayerProxy.login(&quot;zhangsan&quot;,&quot;password&quot;); &#125;&#125; 行为型模式观察者模式观察者接口: package com.jxdw;public interface IObserver &#123; void update(String message);&#125; 主题接口: package com.jxdw;public interface ISubject &#123; void addObserver(IObserver iObserver); void deleteObserver(IObserver iObserver); void inform();&#125; 观察者实现: package com.jxdw;public class CompleteObserver implements IObserver &#123; @Override public void update(String message) &#123; System.out.println(&quot;observer receive &quot;+message); &#125;&#125; 主题实现: package com.jxdw;import java.util.Vector;public class CompleteSubject implements ISubject &#123; private Vector&lt;IObserver&gt; observerVector&#x3D;new Vector&lt;IObserver&gt;(); @Override public void addObserver(IObserver iObserver) &#123; observerVector.add(iObserver); &#125; @Override public void deleteObserver(IObserver iObserver) &#123; observerVector.removeElement(iObserver); &#125; @Override public void inform() &#123; System.out.println(&quot;message&quot;); for (IObserver iObserver:observerVector)&#123; iObserver.update(&quot;message&quot;); &#125; &#125;&#125; 测试类: package com.jxdw;public class App &#123; public static void main( String[] args ) &#123; System.out.println( &quot;Hello World!&quot; ); ISubject completeSubject&#x3D;new CompleteSubject(); completeSubject.addObserver(new CompleteObserver()); completeSubject.inform(); &#125;&#125;","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"【java标准库系列】java反射与动态代理","slug":"java-reflect-dynamic-proxy","date":"2016-01-02T14:09:24.000Z","updated":"2020-10-22T14:22:48.478Z","comments":true,"path":"2016/01/02/java-reflect-dynamic-proxy/","link":"","permalink":"https://jxdw.github.io/2016/01/02/java-reflect-dynamic-proxy/","excerpt":"直接上源码。","text":"直接上源码。 动态代理package com.jxdw.reflect;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;interface Subject&#123; public String say(String name,int age);&#125;class RealSubject implements Subject&#123; @Override public String say(String name, int age) &#123; return name + &quot; &quot; + age; &#125;&#125;class MyInvocationHandler implements InvocationHandler&#123; private Object object&#x3D;null; public Object bind(Object object)&#123; this.object&#x3D;object; return Proxy.newProxyInstance(object.getClass().getClassLoader(),object.getClass().getInterfaces(),this); &#125; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; return method.invoke(this.object,args); &#125;&#125;public class ProxyHello &#123; public static void main(String[] args) &#123; MyInvocationHandler myInvocationHandler&#x3D;new MyInvocationHandler(); Subject realSubject&#x3D;(Subject) myInvocationHandler.bind(new RealSubject()); System.out.println(&quot;info:&quot;+realSubject.say(&quot;xiaogang&quot;,20)+&quot;\\n&quot;); &#125;&#125;","categories":[{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"一切从零开始","slug":"jishuzongjie-2015","date":"2016-01-01T02:35:14.000Z","updated":"2020-10-24T13:12:44.054Z","comments":true,"path":"2016/01/01/jishuzongjie-2015/","link":"","permalink":"https://jxdw.github.io/2016/01/01/jishuzongjie-2015/","excerpt":"背景本文背景新年了，要盘盘肚子里面的“存货”了。对于过去4年半的技术做一个简单的总结。","text":"背景本文背景新年了，要盘盘肚子里面的“存货”了。对于过去4年半的技术做一个简单的总结。 本文关键字软件架构模式 分层模式 服务化 技术总结","categories":[{"name":"感悟","slug":"感悟","permalink":"https://jxdw.github.io/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"架构知识集合","slug":"架构知识集合","permalink":"https://jxdw.github.io/tags/%E6%9E%B6%E6%9E%84%E7%9F%A5%E8%AF%86%E9%9B%86%E5%90%88/"}]}],"categories":[{"name":"go知识体系","slug":"go知识体系","permalink":"https://jxdw.github.io/categories/go%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"},{"name":"es6语言","slug":"es6语言","permalink":"https://jxdw.github.io/categories/es6%E8%AF%AD%E8%A8%80/"},{"name":"感悟","slug":"感悟","permalink":"https://jxdw.github.io/categories/%E6%84%9F%E6%82%9F/"},{"name":"centos知识体系","slug":"centos知识体系","permalink":"https://jxdw.github.io/categories/centos%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"},{"name":"zipkin/jaeger知识体系","slug":"zipkin-jaeger知识体系","permalink":"https://jxdw.github.io/categories/zipkin-jaeger%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"},{"name":"prometheus知识体系","slug":"prometheus知识体系","permalink":"https://jxdw.github.io/categories/prometheus%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"},{"name":"redis知识体系","slug":"redis知识体系","permalink":"https://jxdw.github.io/categories/redis%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"},{"name":"工具软件","slug":"工具软件","permalink":"https://jxdw.github.io/categories/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6/"},{"name":"网络协议知识体系","slug":"网络协议知识体系","permalink":"https://jxdw.github.io/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"},{"name":"java知识体系","slug":"java知识体系","permalink":"https://jxdw.github.io/categories/java%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"},{"name":"mysql知识体系","slug":"mysql知识体系","permalink":"https://jxdw.github.io/categories/mysql%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"},{"name":"docker/k8s知识体系","slug":"docker-k8s知识体系","permalink":"https://jxdw.github.io/categories/docker-k8s%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"},{"name":"jenkins知识体系","slug":"jenkins知识体系","permalink":"https://jxdw.github.io/categories/jenkins%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"},{"name":"harbor知识体系","slug":"harbor知识体系","permalink":"https://jxdw.github.io/categories/harbor%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"},{"name":"job调度知识体系","slug":"job调度知识体系","permalink":"https://jxdw.github.io/categories/job%E8%B0%83%E5%BA%A6%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"},{"name":"nacos/apollo知识体系","slug":"nacos-apollo知识体系","permalink":"https://jxdw.github.io/categories/nacos-apollo%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"},{"name":"rabbitmq/kafka知识体系","slug":"rabbitmq-kafka知识体系","permalink":"https://jxdw.github.io/categories/rabbitmq-kafka%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"},{"name":"nginx/haproxy知识系列","slug":"nginx-haproxy知识系列","permalink":"https://jxdw.github.io/categories/nginx-haproxy%E7%9F%A5%E8%AF%86%E7%B3%BB%E5%88%97/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://jxdw.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"架构知识集合","slug":"架构知识集合","permalink":"https://jxdw.github.io/tags/%E6%9E%B6%E6%9E%84%E7%9F%A5%E8%AF%86%E9%9B%86%E5%90%88/"},{"name":"工具软件集合","slug":"工具软件集合","permalink":"https://jxdw.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/"},{"name":"业务开发所需中间件","slug":"业务开发所需中间件","permalink":"https://jxdw.github.io/tags/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]}